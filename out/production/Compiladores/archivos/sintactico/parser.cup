package archivos.sintactico;

import archivos.CodeGeneratorHelper;
import archivos.ast.Base.Constantes.ConstanteBool;
import archivos.ast.Base.Constantes.ConstanteEntera;
import archivos.ast.Base.Constantes.ConstanteFloat;
import archivos.ast.Base.Constantes.ConstanteString;
import archivos.ast.Base.Expresiones.Expresion;
import archivos.ast.Base.Expresiones.FuncionEspecial.Cola;
import archivos.ast.Base.Expresiones.Inputs.Input_Bool;
import archivos.ast.Base.Expresiones.Inputs.Input_Float;
import archivos.ast.Base.Expresiones.Inputs.Input_Int;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Division;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Multiplicacion;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Resta;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Suma;
import archivos.ast.Base.Expresiones.Operaciones.binarias.comparaciones.*;
import archivos.ast.Base.Expresiones.Operaciones.binarias.logicas.AND;
import archivos.ast.Base.Expresiones.Operaciones.binarias.logicas.OR;
import archivos.ast.Base.Expresiones.Operaciones.unarias.MenosUnario;
import archivos.ast.Base.Expresiones.Operaciones.unarias.NOT;
import archivos.ast.Base.Expresiones.Operaciones.unarias.conversiones.EnteroAFlotante;
import archivos.ast.Base.Identificador;
import archivos.ast.Base.Nodo;
import archivos.ast.Base.Programa;
import archivos.ast.Base.Tipo;
import archivos.ast.Sentencias.Asignacion;
import archivos.ast.Sentencias.Displays.DisplayCadenaCaracteres;
import archivos.ast.Sentencias.Displays.DisplayExpresion;
import archivos.ast.Sentencias.Sentencia;
import archivos.ast.Sentencias.SentenciaInteraciones.While;
import archivos.ast.Sentencias.SentenciaSeleccion.IfElse;
import archivos.ast.Sentencias.SentenciaSeleccion.IfSimple;
import java_cup.runtime.Symbol;
import java.util.*;

class MiParser;


action code {:
:};

parser code
{:
    public void syntax_error(Symbol s) {
        if (s.sym==40){
            concat_rules("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"+s.value+"' . Simbolo n° "+s.sym);
            try { throw new Exception((String) s.value);}
            catch (Exception e) {}}
        else{
        concat_rules("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"+s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );}}

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        if (s.sym == 40){
            throw  new Exception("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"+s.value+"' . Simbolo n° "+s.sym+ "" );}
        else{
        throw new Exception("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"+s.value+"' . Simbolo n° "+s.sym+ " no reconocido." ); }}

    public String reglas;

    public void concat_rules(String regla){
        reglas += regla + "\n\n";
    }

    public StringBuilder simbolos=new StringBuilder("");

    TreeMap<String, ArrayList<String>> tablaSimbolos2 = new TreeMap<String, ArrayList<String>>();

    public Tipo tipo_en_comun(Tipo t1,Tipo t2) throws java.lang.Exception
    {
    if (t1 == t2){
        return t1;
    }
    if (t1==Tipo.Float && t2==Tipo.Int) {
        return t1;
    }
    if (t1==Tipo.Int && t2==Tipo.Float) {
        return t2;
    }
    throw new Exception(String.format("No existe un tipo común entre %1$s y %2$s\n", t1, t2 ));
    }
    private static Expresion convertir_a_tipo(Expresion expresion, Tipo tipo_destino) throws java.lang.Exception{
        Tipo tipo_origen = expresion.getTipo();
        if(tipo_origen == tipo_destino){
            return expresion;
        }
        if(tipo_origen == Tipo.Int && tipo_destino == Tipo.Float){
            return new EnteroAFlotante(expresion);
        }
        throw new Exception(String.format("No existe un tipo común entre %1$s y %2$s\n", tipo_origen, tipo_destino ));
    }

    private static void tipo_bool(Tipo tipo) throws Exception{
        if (tipo == Tipo.Bool){
            throw new Exception("No se permiten tipos booleanos en operaciones arismeticas.");
        }
    }

    private static void tipo_bool_comp(Tipo tipo) throws Exception{
            if (tipo == Tipo.Bool){
                throw new Exception("No se permiten tipos booleanos en operaciones de comparación.");
            }
        }

    private static void checkTipoInt(Expresion p) throws Exception {
           if (!(p.getTipo()==Tipo.Int)){
               throw new Exception("No se aceptan tipos "+ p.getTipo().name() + " en funcion especial Cola.");
           }
        }
:};

terminal SUMA, RESTA, MULT, DIV, ASIGN, PARENTESISO, PARENTESISC, CORCHETEO, CORCHETEC, PUNTOCOMA,
COMA, DOSPUNTOS, DISPLAY, WHILE, DO, INPUT_INT, INPUT_FLOAT,INPUT_BOOL, IF, THEN, ELSE, END, AND, OR, NOT, MAYOR,MENOR,IGUAL,DISTINTO,MAYOR_IGUAL,MENOR_IGUAL, COLA,TIPO_INT, TIPO_FLOAT, TIPO_BOOL;
terminal String STRING_LITERAL,BOOL, INT,ERROR, FLOAT, IDENTIFIER,DECLARE_SECTION, ENDDECLARE_SECTION, PROGRAM_SECTION, ENDPROGRAM_SECTION;

nonterminal Nodo programa_general;
nonterminal Programa programa_main;
nonterminal Tipo tipo_de_dato;
nonterminal Sentencia sentencia, sentencia_if, sentencia_display;
nonterminal List<Sentencia> lista_sentencias;
nonterminal While sentencia_while;
nonterminal Asignacion sentencia_asignacion;
nonterminal IfSimple if_simple;
nonterminal IfElse if_else;
nonterminal Expresion expresion, factor, menos_unario, termino, comparacion, exp_or,exp_and,exp_not, funcion_especial,pivot;
nonterminal String ids, sector_declaraciones,lista_declaraciones, declaracion;
nonterminal List<Expresion> lista_expresiones;

start with programa_general;

programa_general ::= sector_declaraciones:sd programa_main:p //programa
    {:  concat_rules("REGLA 0: programa_general --> sector_declaraciones programa_main" + "\n\t --> " + sd + " " + p + " ");
    RESULT = p;
    :}
    |
    programa_main:p {:
    concat_rules("REGLA 0.1: programa_general --> programa_main " + "\n\t --> " + p );
    RESULT = p;
    :}
    |;
sector_declaraciones ::= DECLARE_SECTION lista_declaraciones:ld ENDDECLARE_SECTION
    {: concat_rules("REGLA 1: sector_declaraciones --> DECLARE_SECTION lista_declaraciones ENDDECLARE_SECTION " + "\n\t --> " + "declare.section" + " " + ld + " " + "enddeclare.section" );
       RESULT = "DECLARE_SECTION" + ld + "ENDDECLARE_SECTION"; :};

lista_declaraciones ::= declaracion:d {:
    concat_rules ( "REGLA 1.1: lista_declaraciones --> declaracion " + "\n\t --> " + d + " ");
    RESULT = d; :}
    |
    lista_declaraciones:ld declaracion:d {:
    concat_rules ("REGLA 1.2: lista_declaraciones --> lista_declaraciones declaracion " + "\n\t --> " + " " + ld + d );
    RESULT = ld + d ; :};

declaracion ::=
    tipo_de_dato:td DOSPUNTOS ids:i PUNTOCOMA {:
        concat_rules("REGLA 2: declaracion --> tipo_de_dato DOSPUNTOS ids PUNTOCOMA " + "\n\t --> " + td + ": " + i + "; ");
        RESULT = td + ":" + i + ";";
        if (i.contains(",")){
            String[] parts = i.split(",");
            for (String s : parts){
                if (tablaSimbolos2.containsKey(s)){
                    throw new Exception("Variable " + s + " ya declarada." );
                    }
                else{
                    ArrayList<String> hg = new ArrayList<String>(Arrays.asList("ID",td.name(),"_","_"));
                    tablaSimbolos2.put(s,hg);
                    simbolos.append(String.format("%20s%20s%20s%20s%20s%n", s, hg.get(0), hg.get(1), hg.get(2), hg.get(3)));}}}
        else{
            if (tablaSimbolos2.containsKey(i)){
                throw new Exception("Variable " + i + " ya declarada." );
            }
            else{
                ArrayList<String> hg = new ArrayList<String>(Arrays.asList("ID",td.name(),"_","_"));
                tablaSimbolos2.put(i,hg);
                simbolos.append(String.format("%20s%20s%20s%20s%20s%n", i, hg.get(0), hg.get(1), hg.get(2), hg.get(3)));}}
        :};

ids ::=
    IDENTIFIER:id {:
        concat_rules("REGLA 2.2: ids --> IDENTIFIER " + "\n\t --> " + id);
        RESULT = id; :}
    |
    ids:i COMA IDENTIFIER:id {:
        concat_rules("REGLA 2.2: ids --> ids IDENTIFIER " + "\n\t --> " + i + ", "+ id);
        RESULT = i + "," + id; :};

tipo_de_dato ::=
    TIPO_INT:ti {:
        concat_rules("REGLA 2.2.1: tipo_de_dato --> TIPO_INT " + "\n\t --> " + ti);
        RESULT = Tipo.Int; :}
    |
    TIPO_FLOAT:tf {:
        concat_rules("REGLA 2.2.2: tipo_de_dato --> TIPO_FLOAT " + "\n\t --> " + tf);
        RESULT = Tipo.Float; :}
    |
    TIPO_BOOL:tb {:
        concat_rules("REGLA 2.2.3: tipo_de_dato --> TIPO_BOOL " + "\n\t --> " + tb);
        RESULT = Tipo.Bool;:};

programa_main ::=
        PROGRAM_SECTION lista_sentencias:ls ENDPROGRAM_SECTION {:
            concat_rules("REGLA 3: programa --> PROGRAM_SECTION lista_sentencias ENDPROGRAM_SECTION " + "\n\t --> " + "program.section " + ls  + " endprogram.section");
            RESULT = new Programa("Programa", tablaSimbolos2, ls);

        :};

lista_sentencias ::=
        sentencia:s {:
            concat_rules("REGLA 3.1: lista_sentencias --> sentencia " + "\n\t --> " + s + " ");
            List<Sentencia> lista_sentencias = new ArrayList<>();
            lista_sentencias.add(s);
            RESULT = lista_sentencias; :}
        |
        lista_sentencias:ls sentencia:s {:
            concat_rules("REGLA 3.2: lista_sentencias --> lista_sentencias sentencia " + "\n\t --> " + ls + " " + s + " ");
            ls.add(s);
            RESULT = ls; :};

sentencia ::=
        sentencia_while:sw {:
            concat_rules("REGLA 3.1.1: sentencia --> sentencia_while " + "\n\t --> " + sw + " ");
            RESULT = sw; :}
        |
        sentencia_if:si {:
            concat_rules("REGLA 3.1.2: sentencia --> sentencia_if " + "\n\t --> " + si + " ");
            RESULT = si; :}
        |
        sentencia_display:sd {:
            concat_rules("REGLA 3.1.3: sentencia --> sentencia_display " + "\n\t --> " + sd + " ");
            RESULT = sd; :}
        |
        sentencia_asignacion:sa{:
            concat_rules("REGLA 3.1.5: sentencia --> sentencia_asignacion " + "\n\t --> " + sa + " ");
            RESULT = sa;
        :};

sentencia_while ::=
        WHILE PARENTESISO exp_or:c PARENTESISC DO lista_sentencias:ls END {:
            concat_rules("REGLA 4: sentencia_while --> WHILE PARENTESISO exp_or PARENTESISC DO lista_sentencias END " + "\n\t --> " + "while ( " + c + " ) do" + ls + "end" + " " );
            RESULT = new While("While",c,ls);
        :};

sentencia_if ::=
        if_simple:ifs {:
            concat_rules("REGLA 5: sentencia_if --> if_simple " + "\n\t --> " + ifs + " ");
            RESULT = ifs;
         :}
        |
        if_else:ie {:
            concat_rules("REGLA 5: sentencia_if --> if_else " + "\n\t --> " + ie + " ");
            RESULT = ie;
         :};

if_simple ::=
        IF PARENTESISO exp_or:cond PARENTESISC THEN lista_sentencias:ls END {:
            concat_rules("REGLA 5.1: if_simple --> IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias END " + "\n\t --> " + " if ( " + cond + " ) then " + ls + " end ");
            RESULT = new IfSimple("IfSimple", cond, ls);
        :};
if_else ::=
        IF PARENTESISO exp_or:cond PARENTESISC THEN lista_sentencias:ls ELSE lista_sentencias:ls2 END {:
            concat_rules("REGLA 5.2: if_else --> IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias ELSE lista_sentencias END " + "\n\t --> " + "if ( " + cond + " ) then " + ls + " else " + ls2 + "end ");
            RESULT = new IfElse("IfElse", cond, ls, ls2);
        :};

sentencia_display ::=
        DISPLAY PARENTESISO STRING_LITERAL:sl PARENTESISC {:
            concat_rules("REGLA 6: sentencia_display --> DISPLAY ( STRING_LITERAL ) " + "\n\t --> " + " display( " +sl+ " ) ");
            //RESULT = "display(" + sl + ")";
            ArrayList<String> hg = new ArrayList<String>(
                Arrays.asList("STRING_LITERAL",Tipo.CTE_STRING.name(),sl,String.valueOf(sl.length())));
            int id_str = tablaSimbolos2.size() +1;
            tablaSimbolos2.put("str" + id_str,hg);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n","str" + tablaSimbolos2.size(), hg.get(0), hg.get(1), hg.get(2), hg.get(3)));
            ConstanteString CC = new ConstanteString(sl, Tipo.CTE_STRING, "str" + tablaSimbolos2.size());
            RESULT = new DisplayCadenaCaracteres(CC);
        :}
        |
        DISPLAY PARENTESISO exp_or:c PARENTESISC {:
            concat_rules("REGLA 6: sentencia_display --> DISPLAY ( exp_or ) " + "\n\t --> " + " display( " + c + " ) ");
            RESULT = new DisplayExpresion("DisplayExpresion",c);
        :};

sentencia_asignacion ::=
    IDENTIFIER:id  ASIGN exp_or:eo {:
        concat_rules("REGLA 7: sentencia_asignacion --> IDENTIFIER ASIGN exp_or " + "\n\t --> " + id + " := " + eo);
        if (!tablaSimbolos2.containsKey(id)){
            throw new Exception("Variable " + id + " no declarada.");}
        else {
            ArrayList<String> a = tablaSimbolos2.get(id);
            if (Objects.equals(a.get(1), "Int")){
                if (eo.getTipo() == Tipo.Float){
                    throw new Exception("No se admiten Asignaciones con un Identificador Tipo INT y una Expresion Tipo FLOAT");}
            else{
                Expresion exp = convertir_a_tipo(eo, Tipo.Int);
                RESULT = new Asignacion(new Identificador(id, Tipo.Int),exp);}}
            if (Objects.equals(a.get(1), "Float")){
                Expresion exp = convertir_a_tipo(eo, Tipo.Float);
                RESULT = new Asignacion(new Identificador(id, Tipo.Float),exp);}
            if (Objects.equals(a.get(1), "Bool")){
                Tipo tipo_comun = tipo_en_comun(Tipo.Bool,eo.getTipo());
                Expresion exp = convertir_a_tipo(eo, tipo_comun);
                RESULT = new Asignacion(new Identificador(id, Tipo.Bool),exp);}
        }
        :};

exp_or ::=
    exp_or:e1 OR exp_and:e2 {:
        concat_rules("REGLA 7.1: exp_or --> exp_or OR exp_and " + "\n\t --> " + e1 + " OR "+ e2);
        RESULT = new OR("OR",Tipo.Bool,e1,e2);
    :}
    |
    exp_and:e {:
        concat_rules("REGLA 7.2: exp_or --> exp_and " + "\n\t --> " + e);
        RESULT = e ;
    :};

exp_and ::=
    exp_and:e1 AND exp_not:e2 {:
        concat_rules("REGLA 7.3: exp_and --> exp_and AND exp_not " + "\n\t --> " + e1+ " AND "+ e2);
        RESULT = new AND("AND",Tipo.Bool,e1,e2);
    :}
    |
    exp_not:e {:
        concat_rules("REGLA 7.4: exp_and --> exp_not " + "\n\t --> " +e);
        RESULT = e ;
    :};

exp_not ::=
    NOT exp_not:e1 {:
        concat_rules("REGLA 7.5: exp_not --> NOT exp_not " + "\n\t --> " + e1);
        RESULT = new NOT("NOT",e1,Tipo.Bool);
    :}
    |
    comparacion:c {:
        concat_rules("REGLA 7.6: exp_not --> comparacion " + "\n\t --> " + c);
        RESULT = c ;
    :};

comparacion ::=
    expresion:e1 MAYOR:m expresion:e2{:
        concat_rules("REGLA 7.6.1: comparacion --> expresion MAYOR expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
        Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
        tipo_bool_comp(tipo_comun);
        Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
        Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
        RESULT = new Mayor(">",Tipo.Bool,exp1,exp2);
    :}
    |
    expresion:e1 MENOR:m expresion:e2{:
            concat_rules("REGLA 7.6.1.1: comparacion --> expresion MENOR expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
            Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
            tipo_bool_comp(tipo_comun);
            Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
            Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
            RESULT = new Menor("<",Tipo.Bool,exp1,exp2);
        :}
    |
    expresion:e1 IGUAL:m expresion:e2{:
            concat_rules("REGLA 7.6.1: comparacion --> expresion IGUAL expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
            Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
            tipo_bool_comp(tipo_comun);
            Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
            Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
            RESULT = new Igual("==",Tipo.Bool,exp1,exp2);
        :}
    |
    expresion:e1 DISTINTO:m expresion:e2{:
            concat_rules("REGLA 7.6.1: comparacion --> expresion DISTINTO expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
            Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
            tipo_bool_comp(tipo_comun);
            Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
            Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
            RESULT = new Distinto("!=",Tipo.Bool,exp1,exp2);
        :}
    |
    expresion:e1 MAYOR_IGUAL:m expresion:e2{:
            concat_rules("REGLA 7.6.1: comparacion --> expresion MAYOR_IGUAL expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
            Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
            tipo_bool_comp(tipo_comun);
            Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
            Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
            RESULT = new MayorOIgual(">=",Tipo.Bool,exp1,exp2);
        :}
    |
    expresion:e1 MENOR_IGUAL:m expresion:e2{:
            concat_rules("REGLA 7.6.1: comparacion --> expresion MENOR_IGUAL expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
            Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
            tipo_bool_comp(tipo_comun);
            Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
            Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
            RESULT = new MenorOIgual("<=",Tipo.Bool,exp1,exp2);
        :}
    |
    expresion:e1 {:
        concat_rules("REGLA 7.6.2: comparacion --> expresion " + "\n\t --> " + e1);
        RESULT = e1 ;
    :};


expresion ::=
    expresion:e1 SUMA termino:e2 {:
        concat_rules("REGLA 7.7: expresion --> expresion SUMA termino " + "\n\t --> " + e1 +" + "+ e2);
        Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
        tipo_bool(tipo_comun);
        RESULT = new Suma("+",tipo_comun,convertir_a_tipo(e1,tipo_comun),convertir_a_tipo(e2,tipo_comun));
    :}
    |
    expresion:e1 RESTA termino:e2 {:
        concat_rules("REGLA 7.8: expresion --> expresion RESTA termino " + "\n\t --> " + e1 + " - " + e2);
        Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
        tipo_bool(tipo_comun);
        RESULT = new Resta("-",tipo_comun,convertir_a_tipo(e1,tipo_comun),convertir_a_tipo(e2,tipo_comun));
    :}
    |
    termino:t {:
        concat_rules("REGLA 7.9: expresion --> termino " + "\n\t --> " + t);
        RESULT = t ;
    :};

termino ::=
    termino:t MULT menos_unario:mu {:
        concat_rules("REGLA 7.9.1: termino --> termino MULT menor_unario " + "\n\t --> " + t + " * " + mu);
        Tipo tipo_comun = tipo_en_comun(t.getTipo(),mu.getTipo());
        tipo_bool(tipo_comun);
        RESULT = new Multiplicacion("*",tipo_comun,convertir_a_tipo(t,tipo_comun),convertir_a_tipo(mu,tipo_comun));
    :}
    |
    termino:t DIV menos_unario:mu {:
        concat_rules("REGLA 7.9.2: termino --> termino DIV menor_unario " + "\n\t --> " + t + " / " + mu);
        Tipo tipo_comun = tipo_en_comun(t.getTipo(),mu.getTipo());
        tipo_bool(tipo_comun);
        RESULT = new Division("/",tipo_comun,convertir_a_tipo(t,tipo_comun),convertir_a_tipo(mu,tipo_comun));
    :}
    |
    menos_unario:mu {:
        concat_rules("REGLA 7.9.3: termino --> menor_unario " + "\n\t --> " + mu);
        RESULT = mu;
    :};

menos_unario ::=
    RESTA menos_unario:mu {:
        concat_rules("REGLA 8.1: menos_unario --> - menor_unario " + "\n\t --> " + "- " +mu);
        tipo_bool(mu.getTipo());
        RESULT = new MenosUnario("MenosUnario", mu,mu.getTipo());
    :}
    |
    factor:f {: //superFenelchat
        concat_rules("REGLA 8.2: menos_unario --> factor " + "\n\t --> " + f);
        RESULT = f;
    :};

factor ::=
    INT:i {:
        concat_rules("REGLA 8.1: factor --> INT " + "\n\t --> " + i);
        RESULT = new ConstanteEntera(i, Tipo.Int, "Factor_Int");
    :}
    |
    FLOAT:f {:
        concat_rules("REGLA 8.2: factor --> FLOAT " + "\n\t --> " + f);
        RESULT = new ConstanteFloat(f, Tipo.Float, "Factor_Float");
    :}
    |
    BOOL:b {:
        concat_rules("REGLA 8.3: factor --> BOOL " + "\n\t --> " + b);
        RESULT = new ConstanteBool(b, Tipo.Bool, "Factor_Bool");
    :}
    |
    funcion_especial:fe {:
        concat_rules("REGLA 8.4: factor --> funcion_especial " + "\n\t --> " + fe);
        RESULT = fe;
    :}
    |
    PARENTESISO exp_or:eo PARENTESISC {:
        concat_rules("REGLA 8.5: factor --> PARENTESISO exp_or PARENTESISC " + "\n\t --> " + " ( " + eo + " ) ");
        RESULT = eo;
    :}
    |
    IDENTIFIER:id {:
        concat_rules("REGLA 8.6: factor --> IDENTIFIER " + "\n\t --> " + id + " ");
        if (!tablaSimbolos2.containsKey(id)){
            throw new Exception("Variable " + id + " no declarada.");}
        else {
            ArrayList<String> e = tablaSimbolos2.get(id);
            if (e.get(1)=="Int"){RESULT = new Identificador(id,Tipo.Int);}
            if (e.get(1)=="Float"){RESULT = new Identificador(id, Tipo.Float);}
            if (e.get(1)=="Bool"){RESULT = new Identificador(id, Tipo.Bool);}
        }
    :}
    |
    INPUT_BOOL:ib PARENTESISO PARENTESISC {:
        concat_rules("REGLA 8.7: factor --> INPUT_BOOL() " + "\n\t --> " + ib + "()");
        RESULT = new Input_Bool(Tipo.Bool,"INPUT_BOOL");
    :}
    |
    INPUT_INT:ii PARENTESISO PARENTESISC {:
        concat_rules("REGLA 8.8: factor --> INPUT_INT() " + "\n\t --> " + ii + "()");
        RESULT = new Input_Int("INPUT_INT", Tipo.Int);
    :}
    |
    INPUT_FLOAT:ifl PARENTESISO PARENTESISC {:
        concat_rules("REGLA 8.9: factor --> INPUT_FLOAT() " + "\n\t --> " + ifl + "()");
        RESULT = new Input_Float(Tipo.Float, "INPUT_FLOAT");
    :}    ;

funcion_especial ::=
    COLA PARENTESISO pivot:p PUNTOCOMA CORCHETEO lista_expresiones:le CORCHETEC PARENTESISC
    {:
        concat_rules("REGLA 9: funcion_especial --> COLA PARENTESISO pivot PUNTOCOMA CORCHETEO lista_expresiones CORCHETEC PARENTESISC " + "\n\t --> " + "cola ( " + p + " ;[ " + le + "])");
        //Listas
        List<Sentencia> sents = new ArrayList<>();
        List<Sentencia> sents_cola = new ArrayList<>();
        List<Sentencia> sentPrimerIf = new ArrayList<>();
        List<Sentencia> sentSegundoIf = new ArrayList<>();
        List<Sentencia> sentTercerIf = new ArrayList<>();
        List<Expresion> colas = new ArrayList<>();

        //Generamos el Pivot
        Identificador pivot = new Identificador("_Pivot"+CodeGeneratorHelper.getNewPivot(), Tipo.Int);
        Asignacion asig_pivot = new Asignacion("Asignacion",pivot,p);
        if(!tablaSimbolos2.containsKey("_Pivot"+CodeGeneratorHelper.getPivot())){
            ArrayList<String> contenidoPivot = new ArrayList<>(Arrays.asList("ID","Int","_","_"));
            tablaSimbolos2.put("_Pivot"+CodeGeneratorHelper.getPivot(),contenidoPivot);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "_Pivot"+ CodeGeneratorHelper.getPivot(), contenidoPivot.get(0), contenidoPivot.get(1), contenidoPivot.get(2), contenidoPivot.get(3)));
            }

        //Generamos el Acum
        Identificador acum = new Identificador("_Acum"+CodeGeneratorHelper.getNewAcum(), Tipo.Int);
        if(!tablaSimbolos2.containsKey("_Acum"+ CodeGeneratorHelper.getAcum())){
            ArrayList<String> contenidoAcum = new ArrayList<>(Arrays.asList("ID","Int","_","_"));
            tablaSimbolos2.put("_Acum"+ CodeGeneratorHelper.getAcum(),contenidoAcum);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "_Acum"+ CodeGeneratorHelper.getAcum(), contenidoAcum.get(0), contenidoAcum.get(1), contenidoAcum.get(2), contenidoAcum.get(3)));
            }

        //Generamos el AcumAux
        Identificador acumAux = new Identificador("_Acum"+CodeGeneratorHelper.getNewAcum(), Tipo.Int);
        if(!tablaSimbolos2.containsKey("_Acum"+ CodeGeneratorHelper.getAcum())){
            ArrayList<String> contenidoAcum = new ArrayList<>(Arrays.asList("ID","Int","_","_"));
            tablaSimbolos2.put("_Acum"+ CodeGeneratorHelper.getAcum(),contenidoAcum);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "_Acum"+ CodeGeneratorHelper.getAcum(), contenidoAcum.get(0), contenidoAcum.get(1), contenidoAcum.get(2), contenidoAcum.get(3)));
            }

        //Generamos el IdPos
        Identificador pos = new Identificador("_IdPos"+CodeGeneratorHelper.getNewPos(), Tipo.Int);
        if(!tablaSimbolos2.containsKey("_IdPos"+CodeGeneratorHelper.getPos())){
            ArrayList<String> contenidoPos = new ArrayList<>(Arrays.asList("ID","Int","_","_"));
            tablaSimbolos2.put("_IdPos"+CodeGeneratorHelper.getPos(),contenidoPos);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "_IdPos"+ CodeGeneratorHelper.getPos(), contenidoPos.get(0), contenidoPos.get(1), contenidoPos.get(2), contenidoPos.get(3)));
            }

        //Generamos los mensajes de error
        ConstanteString mensaje3 = new ConstanteString("La lista esta vacia", Tipo.CTE_STRING, "strmensaje3");
        if(!tablaSimbolos2.containsKey("strmensaje3")){
            ArrayList<String> contenido = new ArrayList<>(Arrays.asList("STRING_LITERAL","CTE_STRING","La lista esta vacia",String.valueOf(mensaje3.getValor().toString().length())));
            tablaSimbolos2.put("strmensaje3",contenido);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "strmensaje3", contenido.get(0), contenido.get(1), contenido.get(2), contenido.get(3)));
            }
            ConstanteString mensaje2 = new ConstanteString("La lista tiene menos elementos que el indicado", Tipo.CTE_STRING, "strmensaje2");
            if(!tablaSimbolos2.containsKey("strmensaje2")){
                ArrayList<String> contenido = new ArrayList<>(Arrays.asList("STRING_LITERAL","CTE_STRING","La lista tiene menos elementos que el indicado",String.valueOf(mensaje2.getValor().toString().length())));
                tablaSimbolos2.put("strmensaje2",contenido);
                simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "strmensaje2", contenido.get(0), contenido.get(1), contenido.get(2), contenido.get(3)));
                }
                ConstanteString mensaje1 = new ConstanteString("El valor debe ser >=1", Tipo.CTE_STRING, "strmensaje1");
                if(!tablaSimbolos2.containsKey("strmensaje1")){
                    ArrayList<String> contenido = new ArrayList<>(Arrays.asList("STRING_LITERAL","CTE_STRING","El valor debe ser >=1",String.valueOf(mensaje1.getValor().toString().length())));
                    tablaSimbolos2.put("strmensaje1",contenido);
                    simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "strmensaje1", contenido.get(0), contenido.get(1), contenido.get(2), contenido.get(3)));
                    }

        //Creamos la cola con lo que necesitamos para obtener su valor
        //Luego llamamos a la funcion colasInternas() para apilar las colas, y la invertimos
        Cola cola = new Cola("Cola",Tipo.Int,asig_pivot,colas,new IfElse(),acum,acumAux,le,p,pivot,pos);
        cola.colasInternas(le);
        Collections.reverse(cola.getColas());

        //Finalmente recorremos las expresiones de la cola original e instanciamos las clases necesarias para luego graficar y generar el codigo intermedio
        for (Expresion e : le) {
            checkTipoInt(e);
            if(e.getNombre() == "Cola"){
                Integer i = le.size();
                String a = i.toString();
                Cola nueva = (Cola) e;
                Igual ig = new Igual("==", Tipo.Bool, new Resta("-", Tipo.Int, new ConstanteEntera(a, Tipo.Int, "Factor_Int"), new Identificador("_Pivot"+CodeGeneratorHelper.getPivot(), Tipo.Int)), new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int));
                Asignacion asig1 = new Asignacion("Asignacion", new Identificador(acum.getNombre(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador(acum.getNombre(), Tipo.Int), new Identificador(nueva.getAcumAux().getNombre(),Tipo.Int)));
                Asignacion asig2 = new Asignacion("Asignacion", new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                Asignacion asig3 = new Asignacion("Asignacion", new Identificador("_Pivot" + CodeGeneratorHelper.getPivot(), Tipo.Int), new Resta("-", Tipo.Int, new Identificador("_Pivot"+ CodeGeneratorHelper.getPivot(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                List<Sentencia> sentencias1 = new ArrayList<>();
                sentencias1.add(asig1);
                sentencias1.add(asig2);
                sentencias1.add(asig3);
                Asignacion asig4 = new Asignacion("Asignacion", new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                List<Sentencia> sentencias2 = new ArrayList<>();
                sentencias2.add(asig4);
                IfElse ie = new IfElse("IFELSE", ig, sentencias1, sentencias2);
                sents.add(ie);
            }
            else {
                checkTipoInt(e);
                Integer i = le.size();
                String a = i.toString();
                Igual ig = new Igual("==", Tipo.Bool, new Resta("-", Tipo.Int, new ConstanteEntera(a, Tipo.Int, "Factor_Int"), new Identificador("_Pivot"+CodeGeneratorHelper.getPivot(), Tipo.Int)), new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int));
                Asignacion asig1 = new Asignacion("Asignacion", new Identificador(acum.getNombre(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador(acum.getNombre(), Tipo.Int), e));
                Asignacion asig2 = new Asignacion("Asignacion", new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                Asignacion asig3 = new Asignacion("Asignacion", new Identificador("_Pivot" + CodeGeneratorHelper.getPivot(), Tipo.Int), new Resta("-", Tipo.Int, new Identificador("_Pivot"+ CodeGeneratorHelper.getPivot(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                List<Sentencia> sentencias1 = new ArrayList<>();
                sentencias1.add(asig1);
                sentencias1.add(asig2);
                sentencias1.add(asig3);
                Asignacion asig4 = new Asignacion("Asignacion", new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                List<Sentencia> sentencias2 = new ArrayList<>();
                sentencias2.add(asig4);
                IfElse ie = new IfElse("IFELSE", ig, sentencias1, sentencias2);
                sents.add(ie);
            }
        }
        int longitud_lista = le.size();
        String long_lista = Integer.toString(longitud_lista);

        //La lista está vacía.
        Mayor valorListaNoCero = new Mayor(">", Tipo.Bool, new ConstanteEntera(long_lista, Tipo.Int, "Factor_Int"), new ConstanteEntera("0", Tipo.Int, "Factor_Int"));
        List<Sentencia> sentencia_mensaje3 = new ArrayList<>();
        sentencia_mensaje3.add(new DisplayCadenaCaracteres("strmensaje3", mensaje3));
        IfElse tercerIf = new IfElse("IfCondicionlongList>0", valorListaNoCero, sents, sentencia_mensaje3);
        sentTercerIf.add(tercerIf);

        //La lista tiene menos elementos que el indicado
        MayorOIgual lista_menos_elementos = new MayorOIgual(">=", Tipo.Bool, new ConstanteEntera(long_lista, Tipo.Int, "Factor_Int"), new Identificador("_Pivot"+ CodeGeneratorHelper.getPivot(),Tipo.Int));
        List<Sentencia> sentencia_mensaje2 = new ArrayList<>();
        sentencia_mensaje2.add(new DisplayCadenaCaracteres("strmensaje2", mensaje2));
        IfElse segundoIf = new IfElse("IfCondicionLongLista>=valorPivot", lista_menos_elementos, sentTercerIf, sentencia_mensaje2);
        sentSegundoIf.add(segundoIf);

        //El valor debe ser >=1
        MayorOIgual valor_mayor_o_igual_a_1 = new MayorOIgual(">=", Tipo.Bool, new Identificador("_Pivot"+CodeGeneratorHelper.getPivot(),Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int"));
        List<Sentencia> sentencia_mensaje1 = new ArrayList<>();
        sentencia_mensaje1.add(new DisplayCadenaCaracteres("strmensaje1", mensaje1));
        IfElse primerIf = new IfElse("IfCondicionPivot>=1", valor_mayor_o_igual_a_1, sentSegundoIf, sentencia_mensaje1);
        cola.setIfelse(primerIf);

        RESULT=cola;
    :};

pivot ::=
    IDENTIFIER:id {:
        concat_rules("REGLA 10: pivot --> IDENTIFIER " + "\n\t --> " + id);
        if(tablaSimbolos2.containsKey(id)){
                    if (Objects.equals(tablaSimbolos2.get(id).get(1), Tipo.Int.name())){RESULT = new Identificador(id,Tipo.Int);}
                    else {throw new Exception("Tipo " + tablaSimbolos2.get(id).get(1) + " no soportado en funcion especial Cola.");}}
                else{throw new Exception("Variable " + id  + " no declarada.");}
    :}
    |
    INT:i {:
        concat_rules("REGLA 10.1: pivot --> INT " + "\n\t --> " + i);
        RESULT = new ConstanteEntera(i,Tipo.Int,"_Pivot");
    :};

lista_expresiones ::=
    expresion:e {:
        concat_rules("REGLA 10.2: lista_expresiones --> expresion " + "\n\t --> " + e);
        List<Expresion> lista_expresiones = new ArrayList<>();
        lista_expresiones.add(e);
        RESULT = lista_expresiones;
    :}
    |
    lista_expresiones:le COMA expresion:e{:
        concat_rules("REGLA 10.3: lista_expresiones --> lista_expresiones COMA expresion " + "\n\t --> " + le + ", " + e);
        le.add(e);
        RESULT = le;
    :}
    |
    //puede ser vacía
    ;