// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Ejemplo JFlex/src/ejemplo/jflex/lexico.flex

/* JFlex example: partial Java language lexer specification */
package ejemplo.jflex;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.sym;
/**
 * This class is a simple example lexer.
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int Comment = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\4\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\12\20\1\21\1\22\1\23\1\24"+
    "\1\23\2\0\2\25\1\26\27\25\1\27\1\30\1\31"+
    "\1\0\1\32\1\0\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\25\1\44\1\45\1\46"+
    "\1\47\1\50\1\25\1\51\1\52\1\53\1\54\1\25"+
    "\1\55\1\25\1\56\1\25\1\57\1\0\1\60\7\0"+
    "\1\3\32\0\1\1\11\0\1\25\12\0\1\25\4\0"+
    "\1\25\5\0\27\25\1\0\37\25\1\0\u01ca\25\4\0"+
    "\14\25\16\0\5\25\7\0\1\25\1\0\1\25\21\0"+
    "\165\25\1\0\2\25\2\0\4\25\1\0\1\25\6\0"+
    "\1\25\1\0\3\25\1\0\1\25\1\0\24\25\1\0"+
    "\123\25\1\0\213\25\1\0\255\25\1\0\46\25\2\0"+
    "\1\25\6\0\51\25\10\0\55\25\1\0\1\25\1\0"+
    "\2\25\1\0\2\25\1\0\1\25\10\0\33\25\4\0"+
    "\4\25\35\0\13\25\5\0\100\25\12\20\4\0\146\25"+
    "\1\0\10\25\2\0\12\25\1\0\6\25\12\20\3\25"+
    "\2\0\1\25\20\0\73\25\2\0\145\25\16\0\12\20"+
    "\54\25\4\0\1\25\2\0\1\25\2\0\56\25\22\0"+
    "\34\25\4\0\13\25\65\0\25\25\1\0\10\25\25\0"+
    "\17\25\1\0\201\25\2\0\12\20\1\0\23\25\1\0"+
    "\10\25\2\0\2\25\2\0\26\25\1\0\7\25\1\0"+
    "\1\25\3\0\4\25\2\0\11\25\2\0\2\25\2\0"+
    "\4\25\10\0\1\25\4\0\2\25\1\0\5\25\2\0"+
    "\12\20\2\25\12\0\1\25\1\0\1\25\2\0\3\25"+
    "\1\0\6\25\4\0\2\25\2\0\26\25\1\0\7\25"+
    "\1\0\2\25\1\0\2\25\1\0\2\25\2\0\1\25"+
    "\1\0\5\25\4\0\2\25\2\0\3\25\3\0\1\25"+
    "\7\0\4\25\1\0\1\25\7\0\12\20\6\25\13\0"+
    "\3\25\1\0\11\25\1\0\3\25\1\0\26\25\1\0"+
    "\7\25\1\0\2\25\1\0\5\25\2\0\12\25\1\0"+
    "\3\25\1\0\3\25\2\0\1\25\17\0\4\25\2\0"+
    "\12\20\11\0\7\25\1\0\3\25\1\0\10\25\2\0"+
    "\2\25\2\0\26\25\1\0\7\25\1\0\2\25\1\0"+
    "\5\25\2\0\11\25\2\0\2\25\2\0\3\25\10\0"+
    "\2\25\4\0\2\25\1\0\5\25\2\0\12\20\1\0"+
    "\1\25\20\0\2\25\1\0\6\25\3\0\3\25\1\0"+
    "\4\25\3\0\2\25\1\0\1\25\1\0\2\25\3\0"+
    "\2\25\3\0\3\25\3\0\14\25\4\0\5\25\3\0"+
    "\3\25\1\0\4\25\2\0\1\25\6\0\1\25\16\0"+
    "\12\20\20\0\15\25\1\0\3\25\1\0\27\25\1\0"+
    "\20\25\3\0\10\25\1\0\3\25\1\0\4\25\7\0"+
    "\2\25\1\0\3\25\5\0\4\25\2\0\12\20\20\0"+
    "\4\25\1\0\10\25\1\0\3\25\1\0\27\25\1\0"+
    "\12\25\1\0\5\25\2\0\11\25\1\0\3\25\1\0"+
    "\4\25\7\0\2\25\7\0\1\25\1\0\4\25\2\0"+
    "\12\20\1\0\2\25\15\0\4\25\1\0\10\25\1\0"+
    "\3\25\1\0\63\25\1\0\3\25\1\0\5\25\5\0"+
    "\4\25\7\0\5\25\2\0\12\20\12\0\6\25\2\0"+
    "\2\25\1\0\22\25\3\0\30\25\1\0\11\25\1\0"+
    "\1\25\2\0\7\25\3\0\1\25\4\0\6\25\1\0"+
    "\1\25\1\0\10\25\6\0\12\20\2\0\2\25\15\0"+
    "\72\25\5\0\17\25\1\0\12\20\47\0\2\25\1\0"+
    "\1\25\1\0\5\25\1\0\30\25\1\0\1\25\1\0"+
    "\27\25\2\0\5\25\1\0\1\25\1\0\6\25\2\0"+
    "\12\20\2\0\4\25\40\0\1\25\27\0\2\25\6\0"+
    "\12\20\13\0\1\25\1\0\1\25\1\0\1\25\4\0"+
    "\12\25\1\0\44\25\4\0\24\25\1\0\22\25\1\0"+
    "\44\25\11\0\1\25\71\0\100\25\12\20\6\0\100\25"+
    "\12\20\4\25\2\0\46\25\1\0\1\25\5\0\1\25"+
    "\2\0\53\25\1\0\115\25\1\0\4\25\2\0\7\25"+
    "\1\0\1\25\1\0\4\25\2\0\51\25\1\0\4\25"+
    "\2\0\41\25\1\0\4\25\2\0\7\25\1\0\1\25"+
    "\1\0\4\25\2\0\17\25\1\0\71\25\1\0\4\25"+
    "\2\0\103\25\2\0\3\25\40\0\20\25\20\0\126\25"+
    "\2\0\6\25\3\0\u016c\25\2\0\21\25\1\1\32\25"+
    "\5\0\113\25\3\0\13\25\7\0\15\25\1\0\7\25"+
    "\13\0\25\25\13\0\24\25\14\0\15\25\1\0\3\25"+
    "\1\0\2\25\14\0\124\25\3\0\1\25\4\0\2\25"+
    "\2\0\12\20\41\0\3\25\2\0\12\20\6\0\131\25"+
    "\7\0\53\25\5\0\106\25\12\0\37\25\1\0\14\25"+
    "\4\0\14\25\12\0\12\20\36\25\2\0\5\25\13\0"+
    "\54\25\4\0\32\25\6\0\12\20\46\0\34\25\4\0"+
    "\77\25\1\0\35\25\2\0\1\25\12\20\6\0\12\20"+
    "\15\0\1\25\10\0\17\25\101\0\114\25\4\0\12\20"+
    "\21\0\11\25\14\0\60\25\12\20\72\25\14\0\70\25"+
    "\10\0\12\20\3\0\3\25\12\20\44\25\2\0\11\25"+
    "\7\0\53\25\2\0\3\25\20\0\3\25\1\0\47\25"+
    "\5\0\372\25\1\0\33\25\2\0\6\25\2\0\46\25"+
    "\2\0\6\25\2\0\10\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\37\25\2\0\65\25\1\0\7\25"+
    "\1\0\1\25\3\0\3\25\1\0\7\25\3\0\4\25"+
    "\2\0\6\25\4\0\15\25\5\0\3\25\1\0\7\25"+
    "\3\0\13\1\21\0\2\61\12\0\2\3\5\0\1\1"+
    "\17\0\2\25\23\0\1\25\12\0\1\1\21\0\1\25"+
    "\15\0\1\25\20\0\15\25\63\0\41\25\21\0\1\25"+
    "\4\0\1\25\2\0\12\25\1\0\1\25\3\0\5\25"+
    "\6\0\1\25\1\0\1\25\1\0\1\25\1\0\4\25"+
    "\1\0\13\25\2\0\4\25\5\0\5\25\4\0\1\25"+
    "\21\0\51\25\u022d\0\64\25\26\0\57\25\1\0\57\25"+
    "\1\0\205\25\6\0\11\25\14\0\46\25\1\0\1\25"+
    "\5\0\1\25\2\0\70\25\7\0\1\25\17\0\30\25"+
    "\11\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25"+
    "\1\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25"+
    "\1\0\40\25\57\0\1\25\320\0\1\1\4\0\3\25"+
    "\31\0\17\25\1\0\5\25\2\0\5\25\4\0\126\25"+
    "\2\0\2\25\2\0\3\25\1\0\132\25\1\0\4\25"+
    "\5\0\53\25\1\0\136\25\21\0\33\25\65\0\306\25"+
    "\112\0\360\25\20\0\215\25\103\0\56\25\2\0\15\25"+
    "\3\0\20\25\12\20\2\25\24\0\63\25\1\0\12\25"+
    "\1\0\163\25\45\0\11\25\2\0\147\25\2\0\65\25"+
    "\2\0\5\25\60\0\61\25\30\0\64\25\14\0\106\25"+
    "\12\0\12\20\6\0\30\25\3\0\1\25\1\0\3\25"+
    "\12\20\44\25\2\0\44\25\14\0\35\25\3\0\101\25"+
    "\16\0\1\25\12\20\6\0\20\25\12\20\5\25\1\0"+
    "\67\25\11\0\16\25\2\0\12\20\6\0\27\25\3\0"+
    "\111\25\30\0\3\25\2\0\20\25\2\0\5\25\12\0"+
    "\6\25\2\0\6\25\2\0\6\25\11\0\7\25\1\0"+
    "\7\25\1\0\53\25\1\0\14\25\10\0\173\25\1\0"+
    "\2\25\2\0\12\20\6\0\244\25\14\0\27\25\4\0"+
    "\61\25\4\0\u0100\62\156\25\2\0\152\25\46\0\7\25"+
    "\14\0\5\25\5\0\14\25\1\0\15\25\1\0\5\25"+
    "\1\0\1\25\1\0\2\25\1\0\2\25\1\0\154\25"+
    "\41\0\153\25\22\0\100\25\2\0\66\25\50\0\14\25"+
    "\4\0\20\25\20\0\20\25\3\0\2\25\30\0\3\25"+
    "\40\0\5\25\1\0\207\25\23\0\12\20\7\0\32\25"+
    "\4\0\1\25\1\0\32\25\13\0\131\25\3\0\6\25"+
    "\2\0\6\25\2\0\6\25\2\0\3\25\43\0\14\25"+
    "\1\0\32\25\1\0\23\25\1\0\2\25\1\0\17\25"+
    "\2\0\16\25\42\0\173\25\105\0\65\25\210\0\1\25"+
    "\202\0\35\25\3\0\61\25\17\0\1\25\37\0\40\25"+
    "\15\0\36\25\5\0\53\25\5\0\36\25\2\0\44\25"+
    "\4\0\10\25\1\0\5\25\52\0\236\25\2\0\12\20"+
    "\6\0\44\25\4\0\44\25\4\0\50\25\10\0\64\25"+
    "\234\0\67\25\11\0\26\25\12\0\10\25\230\0\6\25"+
    "\2\0\1\25\1\0\54\25\1\0\2\25\3\0\1\25"+
    "\2\0\27\25\12\0\27\25\11\0\37\25\101\0\23\25"+
    "\1\0\2\25\12\0\26\25\12\0\32\25\106\0\70\25"+
    "\6\0\2\25\100\0\4\25\1\0\2\25\5\0\10\25"+
    "\1\0\3\25\1\0\35\25\2\0\3\25\4\0\1\25"+
    "\40\0\35\25\3\0\35\25\43\0\10\25\1\0\36\25"+
    "\31\0\66\25\12\0\26\25\12\0\23\25\15\0\22\25"+
    "\156\0\111\25\67\0\63\25\15\0\63\25\15\0\50\25"+
    "\10\0\12\20\306\0\35\25\12\0\1\25\10\0\41\25"+
    "\217\0\27\25\11\0\107\25\37\0\12\20\17\0\74\25"+
    "\25\0\31\25\7\0\12\20\6\0\65\25\1\0\12\20"+
    "\4\0\3\25\11\0\44\25\2\0\1\25\11\0\105\25"+
    "\4\0\4\25\3\0\12\20\1\25\1\0\1\25\43\0"+
    "\22\25\1\0\45\25\6\0\1\25\101\0\7\25\1\0"+
    "\1\25\1\0\4\25\1\0\17\25\1\0\12\25\7\0"+
    "\73\25\5\0\12\20\6\0\4\25\1\0\10\25\2\0"+
    "\2\25\2\0\26\25\1\0\7\25\1\0\2\25\1\0"+
    "\5\25\1\0\12\25\2\0\2\25\2\0\3\25\2\0"+
    "\1\25\6\0\1\25\5\0\7\25\2\0\7\25\3\0"+
    "\5\25\213\0\113\25\5\0\12\20\4\0\2\25\40\0"+
    "\106\25\1\0\1\25\10\0\12\20\246\0\66\25\2\0"+
    "\11\25\27\0\6\25\42\0\101\25\3\0\1\25\13\0"+
    "\12\20\46\0\71\25\7\0\12\20\66\0\33\25\2\0"+
    "\17\25\4\0\12\20\306\0\73\25\145\0\100\25\12\20"+
    "\25\0\1\25\240\0\10\25\2\0\56\25\2\0\10\25"+
    "\1\0\2\25\33\0\77\25\10\0\1\25\10\0\112\25"+
    "\3\0\1\25\42\0\71\25\7\0\11\25\1\0\55\25"+
    "\1\0\11\25\17\0\12\20\30\0\36\25\2\0\26\25"+
    "\1\0\16\25\111\0\7\25\1\0\2\25\1\0\54\25"+
    "\3\0\1\25\1\0\2\25\1\0\11\25\10\0\12\20"+
    "\6\0\6\25\1\0\2\25\1\0\45\25\1\0\2\25"+
    "\1\0\6\25\7\0\12\20\u0136\0\27\25\11\0\232\25"+
    "\146\0\157\25\21\0\304\25\274\0\57\25\321\0\107\25"+
    "\271\0\71\25\7\0\37\25\1\0\12\20\146\0\36\25"+
    "\2\0\5\25\13\0\67\25\11\0\4\25\14\0\12\20"+
    "\11\0\25\25\5\0\23\25\260\0\100\25\200\0\113\25"+
    "\4\0\71\25\7\0\21\25\100\0\2\25\1\0\1\25"+
    "\34\0\370\25\10\0\363\25\15\0\37\25\61\0\3\25"+
    "\21\0\4\25\10\0\u018c\25\4\0\153\25\5\0\15\25"+
    "\3\0\11\25\7\0\12\25\3\0\2\25\306\0\5\25"+
    "\3\0\6\25\10\0\10\25\2\0\7\25\36\0\4\25"+
    "\224\0\3\25\273\0\125\25\1\0\107\25\1\0\2\25"+
    "\2\0\1\25\2\0\2\25\2\0\4\25\1\0\14\25"+
    "\1\0\1\25\1\0\7\25\1\0\101\25\1\0\4\25"+
    "\2\0\10\25\1\0\7\25\1\0\34\25\1\0\4\25"+
    "\1\0\5\25\1\0\1\25\3\0\7\25\1\0\u0154\25"+
    "\2\0\31\25\1\0\31\25\1\0\37\25\1\0\31\25"+
    "\1\0\37\25\1\0\31\25\1\0\37\25\1\0\31\25"+
    "\1\0\37\25\1\0\31\25\1\0\10\25\2\0\62\20"+
    "\67\25\4\0\62\25\10\0\1\25\16\0\1\25\26\0"+
    "\5\25\1\0\17\25\120\0\7\25\1\0\21\25\2\0"+
    "\7\25\1\0\2\25\1\0\5\25\325\0\55\25\3\0"+
    "\16\25\2\0\12\20\4\0\1\25\u0171\0\60\25\12\20"+
    "\6\0\305\25\13\0\7\25\51\0\114\25\4\0\12\20"+
    "\246\0\4\25\1\0\33\25\1\0\2\25\1\0\1\25"+
    "\2\0\1\25\1\0\12\25\1\0\4\25\1\0\1\25"+
    "\1\0\1\25\6\0\1\25\4\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\3\25\1\0\2\25\1\0\1\25"+
    "\2\0\1\25\1\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\0\1\25\2\0\4\25"+
    "\1\0\7\25\1\0\4\25\1\0\4\25\1\0\1\25"+
    "\1\0\12\25\1\0\21\25\5\0\3\25\1\0\5\25"+
    "\1\0\21\25\164\0\32\25\6\0\32\25\6\0\32\25"+
    "\166\0\327\25\51\0\65\25\13\0\336\25\2\0\u0182\25"+
    "\16\0\u0131\25\37\0\36\25\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\13\21\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\3\32\1\20\2\4\1\33"+
    "\1\34\1\35\1\36\5\21\1\37\4\21\1\40\2\21"+
    "\1\41\4\21\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\21\1\50\4\21\1\51\3\21\1\52\1\53\4\21"+
    "\1\54\1\55\2\21\1\56\5\21\1\57\1\60\5\21"+
    "\1\61\2\21\1\62\7\21\1\63\6\21\1\0\5\21"+
    "\2\0\4\21\1\64\2\0\2\21\1\65\1\21\4\0"+
    "\1\66\15\0\1\67\2\0\1\70\4\0\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\231\0\314\0\377\0\231"+
    "\0\u0132\0\u0165\0\231\0\u0198\0\231\0\231\0\231\0\u01cb"+
    "\0\231\0\u01fe\0\u0231\0\231\0\377\0\u0264\0\u0297\0\231"+
    "\0\231\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\231\0\231\0\231\0\u04fb"+
    "\0\231\0\u052e\0\231\0\u0561\0\u0594\0\231\0\231\0\u05c7"+
    "\0\231\0\231\0\u01cb\0\231\0\u05fa\0\u062d\0\u0660\0\u0693"+
    "\0\u06c6\0\u0264\0\u06f9\0\u072c\0\u075f\0\u0792\0\u0264\0\u07c5"+
    "\0\u07f8\0\u0264\0\u082b\0\u085e\0\u0891\0\u08c4\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\u08f7\0\u0264\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0264\0\u0264"+
    "\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0264\0\u0264\0\u0b8e\0\u0bc1"+
    "\0\u0264\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0264\0\u0264"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0264\0\u0df2\0\u0e25"+
    "\0\u0264\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0264\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef"+
    "\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u1320\0\u0264\0\u1353\0\u1386\0\u13b9\0\u13ec"+
    "\0\u0264\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u0264\0\u151e"+
    "\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u174f\0\u1782\0\231\0\u17b5\0\u17e8\0\231"+
    "\0\u181b\0\u184e\0\u1881\0\u18b4\0\231\0\231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\7\1\26\1\27\1\30\1\4\1\31"+
    "\1\4\1\32\1\33\1\27\1\34\1\35\1\36\2\26"+
    "\1\37\2\26\1\40\1\41\1\42\2\26\1\43\1\26"+
    "\1\44\1\26\1\45\1\46\1\47\1\4\2\50\1\4"+
    "\1\50\1\4\1\50\1\51\21\50\1\52\32\50\10\53"+
    "\1\54\1\53\1\55\50\53\65\0\1\5\104\0\1\56"+
    "\36\0\2\11\1\57\1\0\1\60\55\11\13\0\1\61"+
    "\61\0\1\62\71\0\1\63\60\0\1\63\1\0\1\22"+
    "\66\0\1\64\56\0\1\26\4\0\2\26\3\0\25\26"+
    "\24\0\1\26\4\0\2\26\3\0\15\26\1\65\7\26"+
    "\24\0\1\26\4\0\2\26\3\0\14\26\1\66\10\26"+
    "\24\0\1\26\4\0\2\26\3\0\15\26\1\67\7\26"+
    "\24\0\1\26\4\0\2\26\3\0\5\26\1\70\3\26"+
    "\1\71\3\26\1\72\7\26\24\0\1\26\4\0\2\26"+
    "\3\0\12\26\1\73\1\26\1\74\10\26\24\0\1\26"+
    "\4\0\2\26\3\0\1\26\1\75\10\26\1\76\12\26"+
    "\24\0\1\26\4\0\2\26\3\0\6\26\1\77\5\26"+
    "\1\100\10\26\24\0\1\26\4\0\2\26\3\0\15\26"+
    "\1\101\7\26\24\0\1\26\4\0\2\26\3\0\17\26"+
    "\1\102\5\26\24\0\1\26\4\0\2\26\3\0\17\26"+
    "\1\103\5\26\24\0\1\26\4\0\2\26\3\0\10\26"+
    "\1\104\6\26\1\105\5\26\24\0\1\26\4\0\2\26"+
    "\3\0\10\26\1\106\14\26\4\0\2\50\1\0\1\50"+
    "\1\0\1\50\1\0\21\50\1\0\32\50\6\0\1\107"+
    "\37\0\1\110\2\0\1\111\1\0\1\112\21\0\1\113"+
    "\61\0\1\114\53\0\1\57\100\0\1\26\4\0\2\26"+
    "\3\0\12\26\1\115\12\26\24\0\1\26\4\0\2\26"+
    "\3\0\4\26\1\116\20\26\24\0\1\26\4\0\2\26"+
    "\3\0\15\26\1\117\7\26\24\0\1\26\4\0\2\26"+
    "\3\0\3\26\1\120\21\26\24\0\1\26\4\0\2\26"+
    "\3\0\20\26\1\121\4\26\24\0\1\26\4\0\2\26"+
    "\3\0\20\26\1\122\4\26\24\0\1\26\4\0\2\26"+
    "\3\0\4\26\1\123\20\26\24\0\1\26\4\0\2\26"+
    "\3\0\12\26\1\124\12\26\24\0\1\26\4\0\2\26"+
    "\3\0\15\26\1\125\7\26\24\0\1\26\4\0\2\26"+
    "\3\0\16\26\1\126\2\26\1\127\3\26\24\0\1\26"+
    "\4\0\2\26\3\0\21\26\1\130\3\26\24\0\1\26"+
    "\4\0\2\26\3\0\15\26\1\131\7\26\24\0\1\26"+
    "\4\0\2\26\3\0\5\26\1\132\17\26\24\0\1\26"+
    "\4\0\2\26\3\0\22\26\1\133\2\26\24\0\1\26"+
    "\4\0\2\26\3\0\11\26\1\134\13\26\24\0\1\26"+
    "\4\0\2\26\3\0\1\26\1\135\23\26\24\0\1\26"+
    "\4\0\2\26\3\0\12\26\1\136\12\26\24\0\1\26"+
    "\4\0\2\26\3\0\12\26\1\137\12\26\24\0\1\26"+
    "\4\0\2\26\3\0\16\26\1\140\6\26\24\0\1\26"+
    "\4\0\2\26\3\0\5\26\1\141\17\26\24\0\1\26"+
    "\4\0\2\26\3\0\4\26\1\142\11\26\1\143\6\26"+
    "\24\0\1\26\4\0\2\26\3\0\20\26\1\133\4\26"+
    "\24\0\1\26\4\0\2\26\3\0\1\26\1\144\23\26"+
    "\24\0\1\26\4\0\2\26\3\0\22\26\1\145\2\26"+
    "\24\0\1\26\4\0\2\26\3\0\7\26\1\146\15\26"+
    "\24\0\1\26\4\0\2\26\3\0\14\26\1\147\10\26"+
    "\24\0\1\26\4\0\2\26\3\0\5\26\1\150\17\26"+
    "\24\0\1\26\4\0\2\26\3\0\12\26\1\151\12\26"+
    "\24\0\1\26\4\0\2\26\3\0\1\26\1\152\23\26"+
    "\24\0\1\26\4\0\2\26\3\0\12\26\1\153\12\26"+
    "\24\0\1\26\4\0\2\26\3\0\5\26\1\154\17\26"+
    "\24\0\1\26\4\0\2\26\3\0\17\26\1\155\5\26"+
    "\24\0\1\26\4\0\2\26\3\0\21\26\1\156\3\26"+
    "\24\0\1\26\4\0\2\26\3\0\21\26\1\157\3\26"+
    "\24\0\1\26\4\0\2\26\3\0\17\26\1\160\5\26"+
    "\24\0\1\26\4\0\2\26\3\0\5\26\1\161\17\26"+
    "\24\0\1\26\4\0\2\26\3\0\17\26\1\162\5\26"+
    "\24\0\1\26\4\0\2\26\3\0\1\26\1\163\23\26"+
    "\24\0\1\26\4\0\2\26\3\0\3\26\1\164\21\26"+
    "\24\0\1\26\4\0\2\26\3\0\15\26\1\165\7\26"+
    "\24\0\1\26\4\0\2\26\3\0\1\166\24\26\24\0"+
    "\1\26\4\0\2\26\3\0\1\26\1\167\23\26\24\0"+
    "\1\26\4\0\2\26\3\0\5\26\1\170\17\26\24\0"+
    "\1\26\4\0\2\26\3\0\24\26\1\171\24\0\1\26"+
    "\4\0\2\26\3\0\12\26\1\172\12\26\24\0\1\26"+
    "\4\0\2\26\3\0\7\26\1\173\15\26\24\0\1\26"+
    "\4\0\2\26\3\0\2\26\1\174\3\26\1\175\2\26"+
    "\1\176\13\26\24\0\1\26\4\0\2\26\3\0\13\26"+
    "\1\177\11\26\22\0\1\200\1\0\1\26\4\0\2\26"+
    "\3\0\25\26\24\0\1\26\4\0\2\26\3\0\1\26"+
    "\1\201\23\26\24\0\1\26\4\0\2\26\3\0\17\26"+
    "\1\202\5\26\24\0\1\26\4\0\2\26\3\0\15\26"+
    "\1\203\7\26\24\0\1\26\4\0\2\26\3\0\12\26"+
    "\1\204\12\26\24\0\1\26\4\0\2\26\3\0\14\26"+
    "\1\205\10\26\22\0\1\206\1\0\1\26\4\0\2\26"+
    "\3\0\25\26\56\0\1\207\30\0\1\26\4\0\2\26"+
    "\3\0\17\26\1\210\5\26\24\0\1\26\4\0\2\26"+
    "\3\0\1\26\1\211\23\26\24\0\1\26\4\0\2\26"+
    "\3\0\15\26\1\212\7\26\24\0\1\26\4\0\2\26"+
    "\3\0\15\26\1\213\7\26\24\0\1\26\4\0\2\26"+
    "\3\0\21\26\1\214\3\26\56\0\1\215\47\0\1\216"+
    "\43\0\1\26\4\0\2\26\3\0\5\26\1\217\17\26"+
    "\24\0\1\26\4\0\2\26\3\0\13\26\1\220\11\26"+
    "\24\0\1\26\4\0\2\26\3\0\12\26\1\221\12\26"+
    "\24\0\1\26\4\0\2\26\3\0\1\26\1\222\23\26"+
    "\43\0\1\223\60\0\1\224\43\0\1\225\1\0\1\26"+
    "\4\0\2\26\3\0\25\26\22\0\1\226\1\0\1\26"+
    "\4\0\2\26\3\0\25\26\24\0\1\26\4\0\2\26"+
    "\3\0\21\26\1\227\3\26\41\0\1\230\100\0\1\231"+
    "\61\0\1\232\62\0\1\233\63\0\1\234\52\0\1\235"+
    "\56\0\1\236\62\0\1\237\66\0\1\240\66\0\1\241"+
    "\50\0\1\242\62\0\1\243\74\0\1\244\61\0\1\245"+
    "\67\0\1\246\62\0\1\247\55\0\1\250\57\0\1\251"+
    "\62\0\1\252\66\0\1\253\62\0\1\254\61\0\1\255"+
    "\62\0\1\256\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6375];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\2\1\1\11\1\1\3\11"+
    "\1\1\1\11\2\1\1\11\3\1\2\11\13\1\3\11"+
    "\1\1\1\11\1\1\1\11\2\1\2\11\1\1\2\11"+
    "\1\1\1\11\22\1\6\11\63\1\1\0\5\1\2\0"+
    "\5\1\2\0\4\1\4\0\1\1\15\0\1\11\2\0"+
    "\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/

    int string_yyline = 0;
    int string_yycolumn = 0;
    int count_comment = 0;
    int cota_int = 20;
    int cota_float = 25;
    int cantMax_string = 100;


    StringBuffer string = new StringBuffer();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public MiToken next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case Comment: {
              return token("ERROR", "Error comentario no balanceado");
            }  // fall though
            case 175: break;
            default:
          { return null; }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token("ERROR", "Illegal character <"+yytext()+">");
            }
            // fall through
          case 59: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 60: break;
          case 3:
            { string.setLength(0);
          yybegin(STRING);
          string_yyline = this.yyline;
          string_yycolumn = this.yycolumn;
            }
            // fall through
          case 61: break;
          case 4:
            { 
            }
            // fall through
          case 62: break;
          case 5:
            { return token("PARENTESISO", yytext());
            }
            // fall through
          case 63: break;
          case 6:
            { return token("PARENTESISC", yytext());
            }
            // fall through
          case 64: break;
          case 7:
            { return token("MULT", yytext());
            }
            // fall through
          case 65: break;
          case 8:
            { return token("SUMA", yytext());
            }
            // fall through
          case 66: break;
          case 9:
            { return token("COMA", yytext());
            }
            // fall through
          case 67: break;
          case 10:
            { return token("RESTA", yytext());
            }
            // fall through
          case 68: break;
          case 11:
            { return token("PUNTO", yytext());
            }
            // fall through
          case 69: break;
          case 12:
            { return token("DIV", yytext());
            }
            // fall through
          case 70: break;
          case 13:
            { int a = yytext().length();
          //int a = Integer.parseInt(yytext());
                //System.out.println(a + "es de tipo" + ((Object)a).getClass().getSimpleName()); para saber si castea bien
                if ( a < cota_int ) {return token("INT", yytext());}
                        else{
                            return token("ERROR", "Error supera cantidad maxima de caracteres permitidos");
                            }
            }
            // fall through
          case 71: break;
          case 14:
            { return token("DOSPUNTOS", yytext());
            }
            // fall through
          case 72: break;
          case 15:
            { return token("PUNTOCOMA", yytext());
            }
            // fall through
          case 73: break;
          case 16:
            { return token("OPCOMP", yytext());
            }
            // fall through
          case 74: break;
          case 17:
            { return token("IDENTIFIER", yytext());
            }
            // fall through
          case 75: break;
          case 18:
            { return token("LLAVEO", yytext());
            }
            // fall through
          case 76: break;
          case 19:
            { return token("LLAVEc", yytext());
            }
            // fall through
          case 77: break;
          case 20:
            { return token("CORCHETEO", yytext());
            }
            // fall through
          case 78: break;
          case 21:
            { return token("CORCHETEC", yytext());
            }
            // fall through
          case 79: break;
          case 22:
            { return token("COMILLA", yytext());
            }
            // fall through
          case 80: break;
          case 23:
            { string.append( yytext() );
            }
            // fall through
          case 81: break;
          case 24:
            { yybegin(YYINITIAL);
                                    if (string.length() < cantMax_string) {return token("STRING_LITERAL", string_yyline, string_yycolumn, string.toString());}
                                        else{
                                            return token("ERROR", "Error supera cantidad maxima de caracteres permitidos");
                                        }
            }
            // fall through
          case 82: break;
          case 25:
            { string.append('\\');
            }
            // fall through
          case 83: break;
          case 26:
            { /*nada*/
            }
            // fall through
          case 84: break;
          case 27:
            { yybegin(Comment);
          count_comment+=1;
            }
            // fall through
          case 85: break;
          case 28:
            { return token("ERROR", "Error comentario no balanceado");
            }
            // fall through
          case 86: break;
          case 29:
            { int a = yytext().length();
          //float a = Float.parseFloat(yytext()); me equivoqué pense que pedían hasta que numero flotante, y era su cant de caracteres.
                              //System.out.println(a + "es de tipo" + ((Object)a).getClass().getSimpleName()); para saber si castea bien
                              if ( a < cota_float) {return token("FLOAT", yytext());}
                                      else{
                                          return token("ERROR", "Error supera cantidad maxima de caracteres permitidos");}
            }
            // fall through
          case 87: break;
          case 30:
            { return token("ASIGN", yytext());
            }
            // fall through
          case 88: break;
          case 31:
            { return token("DO", yytext());
            }
            // fall through
          case 89: break;
          case 32:
            { return token("IF", yytext());
            }
            // fall through
          case 90: break;
          case 33:
            { return token("OR", yytext());
            }
            // fall through
          case 91: break;
          case 34:
            { string.append('\"');
            }
            // fall through
          case 92: break;
          case 35:
            { string.append('\n');
            }
            // fall through
          case 93: break;
          case 36:
            { string.append('\r');
            }
            // fall through
          case 94: break;
          case 37:
            { string.append('\t');
            }
            // fall through
          case 95: break;
          case 38:
            { count_comment+=1;
            }
            // fall through
          case 96: break;
          case 39:
            { count_comment-=1;
      if (count_comment==0){
          yybegin(YYINITIAL);
      }
            }
            // fall through
          case 97: break;
          case 40:
            { return token("AND",yytext());
            }
            // fall through
          case 98: break;
          case 41:
            { return token("END", yytext());
            }
            // fall through
          case 99: break;
          case 42:
            { return token("TIPO_INT", yytext());
            }
            // fall through
          case 100: break;
          case 43:
            { return token("NOT", yytext());
            }
            // fall through
          case 101: break;
          case 44:
            { return token("COLA", yytext());
            }
            // fall through
          case 102: break;
          case 45:
            { return token("TIPO_BOOL", yytext());
            }
            // fall through
          case 103: break;
          case 46:
            { return token("ELSE", yytext());
            }
            // fall through
          case 104: break;
          case 47:
            { return token("THEN", yytext());
            }
            // fall through
          case 105: break;
          case 48:
            { return token("BOOL", yytext());
            }
            // fall through
          case 106: break;
          case 49:
            { return token("TIPO_FLOAT", yytext());
            }
            // fall through
          case 107: break;
          case 50:
            { return token("WHILE", yytext());
            }
            // fall through
          case 108: break;
          case 51:
            { return token("DISPLAY", yytext());
            }
            // fall through
          case 109: break;
          case 52:
            { return token("INPUT_INT", yytext());
            }
            // fall through
          case 110: break;
          case 53:
            { return token("INPUT_BOOL", yytext());
            }
            // fall through
          case 111: break;
          case 54:
            { return token("INPUT_FLOAT", yytext());
            }
            // fall through
          case 112: break;
          case 55:
            { return token("DECLARE_SECTION", yytext());
            }
            // fall through
          case 113: break;
          case 56:
            { return token("PROGRAM_SECTION", yytext());
            }
            // fall through
          case 114: break;
          case 57:
            { return token("ENDDECLARE_SECTION", yytext());
            }
            // fall through
          case 115: break;
          case 58:
            { return token("ENDPROGRAM_SECTION", yytext());
            }
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
