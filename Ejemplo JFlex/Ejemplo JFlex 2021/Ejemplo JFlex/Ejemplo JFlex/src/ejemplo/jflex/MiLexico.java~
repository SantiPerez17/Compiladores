// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Ejemplo JFlex 2021/Ejemplo JFlex/Ejemplo JFlex/src/ejemplo/jflex/lexico.flex

/* JFlex example: partial Java language lexer specification */
package ejemplo.jflex;

/**
 * This class is a simple example lexer.
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int comment = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\5\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\12\16\1\17\1\20\1\21\1\22"+
    "\1\21\2\0\32\23\1\24\1\25\1\26\1\0\1\27"+
    "\1\0\1\30\1\23\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\23\1\40\1\41\1\42\1\43\1\44"+
    "\1\23\1\45\1\46\1\47\1\50\1\23\1\51\1\23"+
    "\1\52\1\23\1\53\1\0\1\54\54\0\1\23\12\0"+
    "\1\23\4\0\1\23\5\0\27\23\1\0\37\23\1\0"+
    "\u01ca\23\4\0\14\23\16\0\5\23\7\0\1\23\1\0"+
    "\1\23\21\0\165\23\1\0\2\23\2\0\4\23\1\0"+
    "\1\23\6\0\1\23\1\0\3\23\1\0\1\23\1\0"+
    "\24\23\1\0\123\23\1\0\213\23\1\0\255\23\1\0"+
    "\46\23\2\0\1\23\6\0\51\23\10\0\55\23\1\0"+
    "\1\23\1\0\2\23\1\0\2\23\1\0\1\23\10\0"+
    "\33\23\4\0\4\23\35\0\13\23\5\0\100\23\12\16"+
    "\4\0\146\23\1\0\10\23\2\0\12\23\1\0\6\23"+
    "\12\16\3\23\2\0\1\23\20\0\73\23\2\0\145\23"+
    "\16\0\12\16\54\23\4\0\1\23\2\0\1\23\2\0"+
    "\56\23\22\0\34\23\4\0\13\23\65\0\25\23\1\0"+
    "\10\23\25\0\17\23\1\0\201\23\2\0\12\16\1\0"+
    "\23\23\1\0\10\23\2\0\2\23\2\0\26\23\1\0"+
    "\7\23\1\0\1\23\3\0\4\23\2\0\11\23\2\0"+
    "\2\23\2\0\4\23\10\0\1\23\4\0\2\23\1\0"+
    "\5\23\2\0\12\16\2\23\12\0\1\23\1\0\1\23"+
    "\2\0\3\23\1\0\6\23\4\0\2\23\2\0\26\23"+
    "\1\0\7\23\1\0\2\23\1\0\2\23\1\0\2\23"+
    "\2\0\1\23\1\0\5\23\4\0\2\23\2\0\3\23"+
    "\3\0\1\23\7\0\4\23\1\0\1\23\7\0\12\16"+
    "\6\23\13\0\3\23\1\0\11\23\1\0\3\23\1\0"+
    "\26\23\1\0\7\23\1\0\2\23\1\0\5\23\2\0"+
    "\12\23\1\0\3\23\1\0\3\23\2\0\1\23\17\0"+
    "\4\23\2\0\12\16\11\0\7\23\1\0\3\23\1\0"+
    "\10\23\2\0\2\23\2\0\26\23\1\0\7\23\1\0"+
    "\2\23\1\0\5\23\2\0\11\23\2\0\2\23\2\0"+
    "\3\23\10\0\2\23\4\0\2\23\1\0\5\23\2\0"+
    "\12\16\1\0\1\23\20\0\2\23\1\0\6\23\3\0"+
    "\3\23\1\0\4\23\3\0\2\23\1\0\1\23\1\0"+
    "\2\23\3\0\2\23\3\0\3\23\3\0\14\23\4\0"+
    "\5\23\3\0\3\23\1\0\4\23\2\0\1\23\6\0"+
    "\1\23\16\0\12\16\20\0\15\23\1\0\3\23\1\0"+
    "\27\23\1\0\20\23\3\0\10\23\1\0\3\23\1\0"+
    "\4\23\7\0\2\23\1\0\3\23\5\0\4\23\2\0"+
    "\12\16\20\0\4\23\1\0\10\23\1\0\3\23\1\0"+
    "\27\23\1\0\12\23\1\0\5\23\2\0\11\23\1\0"+
    "\3\23\1\0\4\23\7\0\2\23\7\0\1\23\1\0"+
    "\4\23\2\0\12\16\1\0\2\23\15\0\4\23\1\0"+
    "\10\23\1\0\3\23\1\0\63\23\1\0\3\23\1\0"+
    "\5\23\5\0\4\23\7\0\5\23\2\0\12\16\12\0"+
    "\6\23\2\0\2\23\1\0\22\23\3\0\30\23\1\0"+
    "\11\23\1\0\1\23\2\0\7\23\3\0\1\23\4\0"+
    "\6\23\1\0\1\23\1\0\10\23\6\0\12\16\2\0"+
    "\2\23\15\0\72\23\5\0\17\23\1\0\12\16\47\0"+
    "\2\23\1\0\1\23\1\0\5\23\1\0\30\23\1\0"+
    "\1\23\1\0\27\23\2\0\5\23\1\0\1\23\1\0"+
    "\6\23\2\0\12\16\2\0\4\23\40\0\1\23\27\0"+
    "\2\23\6\0\12\16\13\0\1\23\1\0\1\23\1\0"+
    "\1\23\4\0\12\23\1\0\44\23\4\0\24\23\1\0"+
    "\22\23\1\0\44\23\11\0\1\23\71\0\100\23\12\16"+
    "\6\0\100\23\12\16\4\23\2\0\46\23\1\0\1\23"+
    "\5\0\1\23\2\0\53\23\1\0\115\23\1\0\4\23"+
    "\2\0\7\23\1\0\1\23\1\0\4\23\2\0\51\23"+
    "\1\0\4\23\2\0\41\23\1\0\4\23\2\0\7\23"+
    "\1\0\1\23\1\0\4\23\2\0\17\23\1\0\71\23"+
    "\1\0\4\23\2\0\103\23\2\0\3\23\40\0\20\23"+
    "\20\0\126\23\2\0\6\23\3\0\u016c\23\2\0\21\23"+
    "\1\0\32\23\5\0\113\23\3\0\13\23\7\0\15\23"+
    "\1\0\7\23\13\0\25\23\13\0\24\23\14\0\15\23"+
    "\1\0\3\23\1\0\2\23\14\0\124\23\3\0\1\23"+
    "\4\0\2\23\2\0\12\16\41\0\3\23\2\0\12\16"+
    "\6\0\131\23\7\0\53\23\5\0\106\23\12\0\37\23"+
    "\1\0\14\23\4\0\14\23\12\0\12\16\36\23\2\0"+
    "\5\23\13\0\54\23\4\0\32\23\6\0\12\16\46\0"+
    "\34\23\4\0\77\23\1\0\35\23\2\0\1\23\12\16"+
    "\6\0\12\16\15\0\1\23\10\0\17\23\101\0\114\23"+
    "\4\0\12\16\21\0\11\23\14\0\60\23\12\16\72\23"+
    "\14\0\70\23\10\0\12\16\3\0\3\23\12\16\44\23"+
    "\2\0\11\23\7\0\53\23\2\0\3\23\20\0\3\23"+
    "\1\0\47\23\5\0\372\23\1\0\33\23\2\0\6\23"+
    "\2\0\46\23\2\0\6\23\2\0\10\23\1\0\1\23"+
    "\1\0\1\23\1\0\1\23\1\0\37\23\2\0\65\23"+
    "\1\0\7\23\1\0\1\23\3\0\3\23\1\0\7\23"+
    "\3\0\4\23\2\0\6\23\4\0\15\23\5\0\3\23"+
    "\1\0\7\23\37\0\2\55\41\0\2\23\23\0\1\23"+
    "\34\0\1\23\15\0\1\23\20\0\15\23\63\0\41\23"+
    "\21\0\1\23\4\0\1\23\2\0\12\23\1\0\1\23"+
    "\3\0\5\23\6\0\1\23\1\0\1\23\1\0\1\23"+
    "\1\0\4\23\1\0\13\23\2\0\4\23\5\0\5\23"+
    "\4\0\1\23\21\0\51\23\u022d\0\64\23\26\0\57\23"+
    "\1\0\57\23\1\0\205\23\6\0\11\23\14\0\46\23"+
    "\1\0\1\23\5\0\1\23\2\0\70\23\7\0\1\23"+
    "\17\0\30\23\11\0\7\23\1\0\7\23\1\0\7\23"+
    "\1\0\7\23\1\0\7\23\1\0\7\23\1\0\7\23"+
    "\1\0\7\23\1\0\40\23\57\0\1\23\325\0\3\23"+
    "\31\0\17\23\1\0\5\23\2\0\5\23\4\0\126\23"+
    "\2\0\2\23\2\0\3\23\1\0\132\23\1\0\4\23"+
    "\5\0\53\23\1\0\136\23\21\0\33\23\65\0\306\23"+
    "\112\0\360\23\20\0\215\23\103\0\56\23\2\0\15\23"+
    "\3\0\20\23\12\16\2\23\24\0\63\23\1\0\12\23"+
    "\1\0\163\23\45\0\11\23\2\0\147\23\2\0\65\23"+
    "\2\0\5\23\60\0\61\23\30\0\64\23\14\0\106\23"+
    "\12\0\12\16\6\0\30\23\3\0\1\23\1\0\3\23"+
    "\12\16\44\23\2\0\44\23\14\0\35\23\3\0\101\23"+
    "\16\0\1\23\12\16\6\0\20\23\12\16\5\23\1\0"+
    "\67\23\11\0\16\23\2\0\12\16\6\0\27\23\3\0"+
    "\111\23\30\0\3\23\2\0\20\23\2\0\5\23\12\0"+
    "\6\23\2\0\6\23\2\0\6\23\11\0\7\23\1\0"+
    "\7\23\1\0\53\23\1\0\14\23\10\0\173\23\1\0"+
    "\2\23\2\0\12\16\6\0\244\23\14\0\27\23\4\0"+
    "\61\23\4\0\156\23\2\0\152\23\46\0\7\23\14\0"+
    "\5\23\5\0\14\23\1\0\15\23\1\0\5\23\1\0"+
    "\1\23\1\0\2\23\1\0\2\23\1\0\154\23\41\0"+
    "\153\23\22\0\100\23\2\0\66\23\50\0\14\23\4\0"+
    "\20\23\20\0\20\23\3\0\2\23\30\0\3\23\40\0"+
    "\5\23\1\0\207\23\23\0\12\16\7\0\32\23\4\0"+
    "\1\23\1\0\32\23\13\0\131\23\3\0\6\23\2\0"+
    "\6\23\2\0\6\23\2\0\3\23\43\0\14\23\1\0"+
    "\32\23\1\0\23\23\1\0\2\23\1\0\17\23\2\0"+
    "\16\23\42\0\173\23\105\0\65\23\210\0\1\23\202\0"+
    "\35\23\3\0\61\23\17\0\1\23\37\0\40\23\15\0"+
    "\36\23\5\0\53\23\5\0\36\23\2\0\44\23\4\0"+
    "\10\23\1\0\5\23\52\0\236\23\2\0\12\16\6\0"+
    "\44\23\4\0\44\23\4\0\50\23\10\0\64\23\234\0"+
    "\67\23\11\0\26\23\12\0\10\23\230\0\6\23\2\0"+
    "\1\23\1\0\54\23\1\0\2\23\3\0\1\23\2\0"+
    "\27\23\12\0\27\23\11\0\37\23\101\0\23\23\1\0"+
    "\2\23\12\0\26\23\12\0\32\23\106\0\70\23\6\0"+
    "\2\23\100\0\4\23\1\0\2\23\5\0\10\23\1\0"+
    "\3\23\1\0\35\23\2\0\3\23\4\0\1\23\40\0"+
    "\35\23\3\0\35\23\43\0\10\23\1\0\36\23\31\0"+
    "\66\23\12\0\26\23\12\0\23\23\15\0\22\23\156\0"+
    "\111\23\67\0\63\23\15\0\63\23\15\0\50\23\10\0"+
    "\12\16\306\0\35\23\12\0\1\23\10\0\41\23\217\0"+
    "\27\23\11\0\107\23\37\0\12\16\17\0\74\23\25\0"+
    "\31\23\7\0\12\16\6\0\65\23\1\0\12\16\4\0"+
    "\3\23\11\0\44\23\2\0\1\23\11\0\105\23\4\0"+
    "\4\23\3\0\12\16\1\23\1\0\1\23\43\0\22\23"+
    "\1\0\45\23\6\0\1\23\101\0\7\23\1\0\1\23"+
    "\1\0\4\23\1\0\17\23\1\0\12\23\7\0\73\23"+
    "\5\0\12\16\6\0\4\23\1\0\10\23\2\0\2\23"+
    "\2\0\26\23\1\0\7\23\1\0\2\23\1\0\5\23"+
    "\1\0\12\23\2\0\2\23\2\0\3\23\2\0\1\23"+
    "\6\0\1\23\5\0\7\23\2\0\7\23\3\0\5\23"+
    "\213\0\113\23\5\0\12\16\4\0\2\23\40\0\106\23"+
    "\1\0\1\23\10\0\12\16\246\0\66\23\2\0\11\23"+
    "\27\0\6\23\42\0\101\23\3\0\1\23\13\0\12\16"+
    "\46\0\71\23\7\0\12\16\66\0\33\23\2\0\17\23"+
    "\4\0\12\16\306\0\73\23\145\0\100\23\12\16\25\0"+
    "\1\23\240\0\10\23\2\0\56\23\2\0\10\23\1\0"+
    "\2\23\33\0\77\23\10\0\1\23\10\0\112\23\3\0"+
    "\1\23\42\0\71\23\7\0\11\23\1\0\55\23\1\0"+
    "\11\23\17\0\12\16\30\0\36\23\2\0\26\23\1\0"+
    "\16\23\111\0\7\23\1\0\2\23\1\0\54\23\3\0"+
    "\1\23\1\0\2\23\1\0\11\23\10\0\12\16\6\0"+
    "\6\23\1\0\2\23\1\0\45\23\1\0\2\23\1\0"+
    "\6\23\7\0\12\16\u0136\0\27\23\11\0\232\23\146\0"+
    "\157\23\21\0\304\23\274\0\57\23\321\0\107\23\271\0"+
    "\71\23\7\0\37\23\1\0\12\16\146\0\36\23\2\0"+
    "\5\23\13\0\67\23\11\0\4\23\14\0\12\16\11\0"+
    "\25\23\5\0\23\23\260\0\100\23\200\0\113\23\4\0"+
    "\71\23\7\0\21\23\100\0\2\23\1\0\1\23\34\0"+
    "\370\23\10\0\363\23\15\0\37\23\61\0\3\23\21\0"+
    "\4\23\10\0\u018c\23\4\0\153\23\5\0\15\23\3\0"+
    "\11\23\7\0\12\23\3\0\2\23\306\0\5\23\3\0"+
    "\6\23\10\0\10\23\2\0\7\23\36\0\4\23\224\0"+
    "\3\23\273\0\125\23\1\0\107\23\1\0\2\23\2\0"+
    "\1\23\2\0\2\23\2\0\4\23\1\0\14\23\1\0"+
    "\1\23\1\0\7\23\1\0\101\23\1\0\4\23\2\0"+
    "\10\23\1\0\7\23\1\0\34\23\1\0\4\23\1\0"+
    "\5\23\1\0\1\23\3\0\7\23\1\0\u0154\23\2\0"+
    "\31\23\1\0\31\23\1\0\37\23\1\0\31\23\1\0"+
    "\37\23\1\0\31\23\1\0\37\23\1\0\31\23\1\0"+
    "\37\23\1\0\31\23\1\0\10\23\2\0\62\16\67\23"+
    "\4\0\62\23\10\0\1\23\16\0\1\23\26\0\5\23"+
    "\1\0\17\23\120\0\7\23\1\0\21\23\2\0\7\23"+
    "\1\0\2\23\1\0\5\23\325\0\55\23\3\0\16\23"+
    "\2\0\12\16\4\0\1\23\u0171\0\60\23\12\16\6\0"+
    "\305\23\13\0\7\23\51\0\114\23\4\0\12\16\246\0"+
    "\4\23\1\0\33\23\1\0\2\23\1\0\1\23\2\0"+
    "\1\23\1\0\12\23\1\0\4\23\1\0\1\23\1\0"+
    "\1\23\6\0\1\23\4\0\1\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\1\0\2\23\1\0\1\23\2\0"+
    "\1\23\1\0\1\23\1\0\1\23\1\0\1\23\1\0"+
    "\1\23\1\0\2\23\1\0\1\23\2\0\4\23\1\0"+
    "\7\23\1\0\4\23\1\0\4\23\1\0\1\23\1\0"+
    "\12\23\1\0\21\23\5\0\3\23\1\0\5\23\1\0"+
    "\21\23\164\0\32\23\6\0\32\23\6\0\32\23\166\0"+
    "\327\23\51\0\65\23\13\0\336\23\2\0\u0182\23\16\0"+
    "\u0131\23\37\0\36\23\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\1\1\20\1\21\12\1\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\2\30\1\17\1\32"+
    "\1\33\1\0\1\2\1\34\1\35\5\0\1\36\3\0"+
    "\1\37\1\0\1\40\4\0\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\3\0\1\47\3\0\1\50\1\0\1\51"+
    "\5\0\1\2\3\0\1\52\4\0\1\53\1\54\6\0"+
    "\1\54\1\0\1\55\10\0\1\56\47\0\1\57\2\0"+
    "\1\60\7\0\1\61\1\62\37\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\212\0\270\0\346\0\212"+
    "\0\u0114\0\212\0\u0142\0\212\0\212\0\212\0\u0170\0\u019e"+
    "\0\u01cc\0\u01fa\0\212\0\346\0\u0228\0\u0256\0\212\0\212"+
    "\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6"+
    "\0\u03f4\0\u0422\0\212\0\212\0\212\0\u0450\0\212\0\u047e"+
    "\0\212\0\212\0\u04ac\0\u04da\0\212\0\212\0\u0170\0\u0508"+
    "\0\u0536\0\212\0\212\0\u0256\0\u0564\0\u0592\0\u05c0\0\u05ee"+
    "\0\u0564\0\u061c\0\u064a\0\u0678\0\u0564\0\u06a6\0\u0564\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\u078c\0\u07ba\0\u07e8\0\u07e8\0\u0816\0\u0844\0\u0872"+
    "\0\u08a0\0\u08ce\0\u07e8\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4"+
    "\0\u078c\0\u09e2\0\u0a10\0\u0a3e\0\u09e2\0\u0a6c\0\u0a9a\0\u0ac8"+
    "\0\u0af6\0\u09e2\0\u09e2\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc"+
    "\0\u0c0a\0\u0b52\0\u0c38\0\u0b52\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0d7a\0\u0dd6\0\u0e04\0\u0e32"+
    "\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2"+
    "\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112"+
    "\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282"+
    "\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2"+
    "\0\u1420\0\u144e\0\u147c\0\u14aa\0\212\0\u14d8\0\u1506\0\212"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\212"+
    "\0\212\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a"+
    "\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa"+
    "\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a"+
    "\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda"+
    "\0\u1c08";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\4\1\30\1\4\1\31"+
    "\1\26\1\32\1\33\1\34\2\26\1\35\2\26\1\36"+
    "\1\37\1\40\2\26\1\41\1\26\1\42\1\26\1\43"+
    "\1\44\1\45\2\46\2\4\1\46\1\47\17\46\1\50"+
    "\30\46\2\51\1\52\3\51\1\53\1\51\1\54\45\51"+
    "\60\0\1\5\75\0\1\55\43\0\1\56\54\0\1\52"+
    "\64\0\1\57\47\0\1\60\4\0\1\61\54\0\1\57"+
    "\1\0\1\21\61\0\1\62\55\0\1\63\51\0\1\64"+
    "\4\0\1\65\3\0\1\64\23\65\21\0\1\64\4\0"+
    "\1\65\3\0\1\64\12\65\1\66\10\65\21\0\1\64"+
    "\4\0\1\65\3\0\1\64\3\65\1\67\3\65\1\70"+
    "\3\65\1\71\7\65\21\0\1\64\4\0\1\65\3\0"+
    "\1\64\10\65\1\72\1\65\1\73\10\65\21\0\1\64"+
    "\4\0\1\65\3\0\1\64\1\74\22\65\21\0\1\64"+
    "\4\0\1\65\3\0\1\64\4\65\1\75\16\65\21\0"+
    "\1\64\4\0\1\65\3\0\1\64\13\65\1\76\7\65"+
    "\21\0\1\64\4\0\1\65\3\0\1\64\15\65\1\77"+
    "\5\65\21\0\1\64\4\0\1\65\3\0\1\64\15\65"+
    "\1\100\5\65\21\0\1\64\4\0\1\65\3\0\1\64"+
    "\6\65\1\101\6\65\1\102\5\65\21\0\1\64\4\0"+
    "\1\65\3\0\1\64\6\65\1\103\14\65\3\0\2\46"+
    "\2\0\1\46\1\0\17\46\1\0\30\46\5\0\1\104"+
    "\34\0\1\105\2\0\1\106\1\0\1\107\16\0\1\110"+
    "\54\0\1\111\46\0\10\112\1\113\45\112\2\61\1\5"+
    "\1\6\52\61\16\0\1\65\4\0\1\114\3\0\1\65"+
    "\23\114\21\0\1\65\4\0\1\114\3\0\1\65\2\114"+
    "\1\115\20\114\21\0\1\65\4\0\1\114\3\0\1\65"+
    "\1\114\1\116\21\114\21\0\1\65\4\0\1\114\3\0"+
    "\1\65\16\114\1\117\4\114\21\0\1\65\4\0\1\114"+
    "\3\0\1\65\16\114\1\120\4\114\21\0\1\65\4\0"+
    "\1\114\3\0\1\65\2\114\1\121\20\114\21\0\1\65"+
    "\4\0\1\114\3\0\1\65\10\114\1\122\12\114\21\0"+
    "\1\65\4\0\1\114\3\0\1\65\17\114\1\123\3\114"+
    "\21\0\1\65\4\0\1\114\3\0\1\65\13\114\1\124"+
    "\7\114\21\0\1\65\4\0\1\114\3\0\1\65\3\114"+
    "\1\125\17\114\21\0\1\65\4\0\1\114\3\0\1\65"+
    "\20\114\1\126\2\114\21\0\1\65\4\0\1\114\3\0"+
    "\1\65\7\114\1\127\13\114\3\0\10\112\1\130\55\112"+
    "\1\130\4\112\1\131\40\112\16\0\1\114\4\0\1\132"+
    "\3\0\1\114\23\132\21\0\1\114\4\0\1\132\3\0"+
    "\1\114\10\132\1\133\12\132\21\0\1\114\4\0\1\132"+
    "\3\0\1\114\14\132\1\134\6\132\21\0\1\114\4\0"+
    "\1\132\3\0\1\114\3\132\1\135\17\132\21\0\1\114"+
    "\4\0\1\132\3\0\1\114\2\132\1\136\11\132\1\137"+
    "\6\132\21\0\1\114\4\0\1\132\3\0\1\114\16\132"+
    "\1\140\4\132\21\0\1\114\4\0\1\132\3\0\1\114"+
    "\5\132\1\141\15\132\21\0\1\114\4\0\1\132\3\0"+
    "\1\114\12\132\1\142\10\132\21\0\1\114\4\0\1\132"+
    "\3\0\1\114\3\132\1\143\17\132\21\0\1\114\4\0"+
    "\1\132\3\0\1\114\10\132\1\144\12\132\3\0\10\112"+
    "\1\130\4\112\1\5\40\112\16\0\1\132\4\0\1\145"+
    "\3\0\1\132\23\145\21\0\1\132\4\0\1\145\3\0"+
    "\1\132\1\146\22\145\21\0\1\132\4\0\1\145\3\0"+
    "\1\132\10\145\1\147\12\145\21\0\1\132\4\0\1\145"+
    "\3\0\1\132\3\145\1\150\17\145\21\0\1\132\4\0"+
    "\1\145\3\0\1\132\15\145\1\151\5\145\21\0\1\132"+
    "\4\0\1\145\3\0\1\132\3\145\1\152\17\145\21\0"+
    "\1\132\4\0\1\145\3\0\1\132\15\145\1\153\5\145"+
    "\21\0\1\132\4\0\1\145\3\0\1\132\3\145\1\154"+
    "\17\145\21\0\1\145\4\0\1\155\3\0\1\145\23\155"+
    "\21\0\1\145\4\0\1\155\3\0\1\145\15\155\1\156"+
    "\5\155\21\0\1\145\4\0\1\155\3\0\1\145\1\157"+
    "\22\155\21\0\1\145\4\0\1\155\3\0\1\145\1\155"+
    "\1\160\21\155\21\0\1\145\4\0\1\155\3\0\1\145"+
    "\13\155\1\161\7\155\21\0\1\145\4\0\1\155\3\0"+
    "\1\145\1\162\22\155\21\0\1\155\4\0\1\163\3\0"+
    "\1\155\23\163\21\0\1\155\4\0\1\163\3\0\1\155"+
    "\3\163\1\164\17\163\21\0\1\155\4\0\1\163\3\0"+
    "\1\155\22\163\1\165\21\0\1\155\4\0\1\163\3\0"+
    "\1\155\10\163\1\166\12\163\21\0\1\155\4\0\1\163"+
    "\3\0\1\155\5\163\1\167\15\163\21\0\1\155\4\0"+
    "\1\163\3\0\1\155\11\163\1\170\11\163\21\0\1\163"+
    "\4\0\1\171\3\0\1\163\23\171\17\0\1\172\1\0"+
    "\1\163\4\0\1\171\3\0\1\163\23\171\21\0\1\163"+
    "\4\0\1\171\3\0\1\163\1\173\22\171\21\0\1\163"+
    "\4\0\1\171\3\0\1\163\15\171\1\174\5\171\17\0"+
    "\1\175\1\0\1\163\4\0\1\171\3\0\1\163\23\171"+
    "\21\0\1\171\4\0\1\176\3\0\1\171\23\176\51\0"+
    "\1\177\25\0\1\171\4\0\1\176\3\0\1\171\15\176"+
    "\1\200\5\176\21\0\1\171\4\0\1\176\3\0\1\171"+
    "\1\201\22\176\51\0\1\202\25\0\1\176\4\0\1\203"+
    "\3\0\1\176\23\203\36\0\1\204\40\0\1\176\4\0"+
    "\1\203\3\0\1\176\3\203\1\205\17\203\21\0\1\176"+
    "\4\0\1\203\3\0\1\176\11\203\1\206\11\203\36\0"+
    "\1\207\40\0\1\203\4\0\1\210\3\0\1\203\23\210"+
    "\34\0\1\211\40\0\1\212\1\0\1\203\4\0\1\210"+
    "\3\0\1\203\23\210\17\0\1\213\1\0\1\203\4\0"+
    "\1\210\3\0\1\203\23\210\34\0\1\214\42\0\1\210"+
    "\4\0\1\215\3\0\1\210\23\215\52\0\1\216\54\0"+
    "\1\217\55\0\1\220\56\0\1\221\24\0\1\215\4\0"+
    "\1\222\3\0\1\215\23\222\42\0\1\223\51\0\1\224"+
    "\55\0\1\225\61\0\1\226\34\0\1\222\4\0\1\227"+
    "\3\0\1\222\23\227\46\0\1\230\43\0\1\231\55\0"+
    "\1\232\67\0\1\233\30\0\1\227\4\0\1\234\3\0"+
    "\1\227\23\234\45\0\1\235\62\0\1\236\55\0\1\237"+
    "\50\0\1\240\31\0\1\234\4\0\1\241\3\0\1\234"+
    "\23\241\42\0\1\242\55\0\1\243\34\0\1\241\4\0"+
    "\1\244\3\0\1\241\23\244\46\0\1\245\55\0\1\246"+
    "\30\0\1\244\4\0\1\247\3\0\1\244\23\247\45\0"+
    "\1\250\55\0\1\251\31\0\1\247\4\0\1\252\3\0"+
    "\1\247\23\252\21\0\1\252\4\0\1\253\3\0\1\252"+
    "\23\253\21\0\1\253\4\0\1\254\3\0\1\253\23\254"+
    "\21\0\1\254\4\0\1\255\3\0\1\254\23\255\21\0"+
    "\1\255\4\0\1\256\3\0\1\255\23\256\21\0\1\256"+
    "\4\0\1\257\3\0\1\256\23\257\21\0\1\257\4\0"+
    "\1\260\3\0\1\257\23\260\21\0\1\260\4\0\1\261"+
    "\3\0\1\260\23\261\21\0\1\261\4\0\1\262\3\0"+
    "\1\261\23\262\21\0\1\262\4\0\1\263\3\0\1\262"+
    "\23\263\21\0\1\263\4\0\1\264\3\0\1\263\23\264"+
    "\21\0\1\264\4\0\1\265\3\0\1\264\23\265\21\0"+
    "\1\265\4\0\1\266\3\0\1\265\23\266\21\0\1\266"+
    "\4\0\1\267\3\0\1\266\23\267\21\0\1\267\4\0"+
    "\1\270\3\0\1\267\23\270\21\0\1\270\4\0\1\271"+
    "\3\0\1\270\23\271\21\0\1\271\4\0\1\272\3\0"+
    "\1\271\23\272\21\0\1\272\4\0\1\273\3\0\1\272"+
    "\23\273\21\0\1\273\4\0\1\274\3\0\1\273\23\274"+
    "\21\0\1\274\4\0\1\275\3\0\1\274\23\275\21\0"+
    "\1\275\4\0\1\276\3\0\1\275\23\276\21\0\1\276"+
    "\4\0\1\277\3\0\1\276\23\277\21\0\1\277\4\0"+
    "\1\300\3\0\1\277\23\300\21\0\1\300\4\0\1\301"+
    "\3\0\1\300\23\301\21\0\1\301\4\0\1\302\3\0"+
    "\1\301\23\302\21\0\1\302\4\0\1\303\3\0\1\302"+
    "\23\303\21\0\1\303\4\0\1\304\3\0\1\303\23\304"+
    "\21\0\1\304\4\0\1\305\3\0\1\304\23\305\21\0"+
    "\1\305\4\0\1\306\3\0\1\305\23\306\21\0\1\306"+
    "\4\0\1\307\3\0\1\306\23\307\21\0\1\307\4\0"+
    "\1\310\3\0\1\307\23\310\21\0\1\310\4\0\1\311"+
    "\3\0\1\310\23\311\21\0\1\311\4\0\1\311\3\0"+
    "\24\311\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7222];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\1\1\1\11\1\1\3\11"+
    "\4\1\1\11\3\1\2\11\12\1\3\11\1\1\1\11"+
    "\1\1\2\11\2\1\2\11\1\1\1\0\1\1\2\11"+
    "\5\0\1\1\3\0\1\1\1\0\1\1\4\0\6\11"+
    "\3\0\1\1\3\0\1\1\1\0\1\1\5\0\1\1"+
    "\3\0\1\1\4\0\2\1\6\0\1\1\1\0\1\1"+
    "\10\0\1\1\47\0\1\11\2\0\1\11\7\0\2\11"+
    "\37\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/

    int string_yyline = 0;
    int string_yycolumn = 0;
    int count_comment = 0;


    StringBuffer string = new StringBuffer();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public MiToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case comment: {
              throw new Error ("Error no comentario balanceado" );
            }  // fall though
            case 202: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <"+yytext()+">");
            }
            // fall through
          case 52: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 53: break;
          case 3:
            { string.setLength(0);
                                    yybegin(STRING); 
                                    string_yyline = this.yyline;
                                    string_yycolumn = this.yycolumn;
            }
            // fall through
          case 54: break;
          case 4:
            { return token("PARENTESISO", yytext());
            }
            // fall through
          case 55: break;
          case 5:
            { return token("PARENTESISC", yytext());
            }
            // fall through
          case 56: break;
          case 6:
            { return token("MULT", yytext());
            }
            // fall through
          case 57: break;
          case 7:
            { return token("SUMA", yytext());
            }
            // fall through
          case 58: break;
          case 8:
            { return token("COMA", yytext());
            }
            // fall through
          case 59: break;
          case 9:
            { return token("RESTA", yytext());
            }
            // fall through
          case 60: break;
          case 10:
            { return token("PUNTO", yytext());
            }
            // fall through
          case 61: break;
          case 11:
            { return token("DIV", yytext());
            }
            // fall through
          case 62: break;
          case 12:
            { return token("INT", yytext());
            }
            // fall through
          case 63: break;
          case 13:
            { return token("DOSPUNTOS", yytext());
            }
            // fall through
          case 64: break;
          case 14:
            { return token("PUNTOCOMA", yytext());
            }
            // fall through
          case 65: break;
          case 15:
            { return token("OPCOMP", yytext());
            }
            // fall through
          case 66: break;
          case 16:
            { return token("LLAVEO", yytext());
            }
            // fall through
          case 67: break;
          case 17:
            { return token("LLAVEc", yytext());
            }
            // fall through
          case 68: break;
          case 18:
            { return token("CORCHETEO", yytext());
            }
            // fall through
          case 69: break;
          case 19:
            { return token("CORCHETEC", yytext());
            }
            // fall through
          case 70: break;
          case 20:
            { return token("COMILLA", yytext());
            }
            // fall through
          case 71: break;
          case 21:
            { string.append( yytext() );
            }
            // fall through
          case 72: break;
          case 22:
            { yybegin(YYINITIAL);
                                   return token("STRING_LITERAL", string_yyline, string_yycolumn, string.toString());
            }
            // fall through
          case 73: break;
          case 23:
            { string.append('\\');
            }
            // fall through
          case 74: break;
          case 24:
            { /*nada*/
            }
            // fall through
          case 75: break;
          case 25:
            { throw new Error ("Error no comentario balanceado" );
            }
            // fall through
          case 76: break;
          case 26:
            { yybegin(comment);
          count_comment+=1;
            }
            // fall through
          case 77: break;
          case 27:
            { return token("FLOAT", yytext());
            }
            // fall through
          case 78: break;
          case 28:
            { return token("ASIGN", yytext());
            }
            // fall through
          case 79: break;
          case 29:
            { return token("IGUAL", yytext());
            }
            // fall through
          case 80: break;
          case 30:
            { return token("DO", yytext());
            }
            // fall through
          case 81: break;
          case 31:
            { return token("IF", yytext());
            }
            // fall through
          case 82: break;
          case 32:
            { return token("OR", yytext());
            }
            // fall through
          case 83: break;
          case 33:
            { string.append('\"');
            }
            // fall through
          case 84: break;
          case 34:
            { string.append('\n');
            }
            // fall through
          case 85: break;
          case 35:
            { string.append('\r');
            }
            // fall through
          case 86: break;
          case 36:
            { string.append('\t');
            }
            // fall through
          case 87: break;
          case 37:
            { count_comment+=1;
            }
            // fall through
          case 88: break;
          case 38:
            { count_comment-=1;
      if (count_comment==0){
          yybegin(YYINITIAL);
      }
            }
            // fall through
          case 89: break;
          case 39:
            { return token("AND",yytext());
            }
            // fall through
          case 90: break;
          case 40:
            { return token("END", yytext());
            }
            // fall through
          case 91: break;
          case 41:
            { return token("not", yytext());
            }
            // fall through
          case 92: break;
          case 42:
            { return token("ELSE", yytext());
            }
            // fall through
          case 93: break;
          case 43:
            { return token("THEN", yytext());
            }
            // fall through
          case 94: break;
          case 44:
            { return token("BOOL", yytext());
            }
            // fall through
          case 95: break;
          case 45:
            { return token("WHILE", yytext());
            }
            // fall through
          case 96: break;
          case 46:
            { return token("DISPLAY", yytext());
            }
            // fall through
          case 97: break;
          case 47:
            { return token("DECLARE.SECTION", yytext());
            }
            // fall through
          case 98: break;
          case 48:
            { return token("program.SECTION", yytext());
            }
            // fall through
          case 99: break;
          case 49:
            { return token("ENDDECLARE.SECTION", yytext());
            }
            // fall through
          case 100: break;
          case 50:
            { return token("ENDPROGRAM.SECTION", yytext());
            }
            // fall through
          case 101: break;
          case 51:
            { return token("IDENTIFIER", yytext());
            }
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
