
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package archivos.sintactico;

import archivos.CodeGeneratorHelper;
import archivos.ast.Base.Constantes.ConstanteBool;
import archivos.ast.Base.Constantes.ConstanteEntera;
import archivos.ast.Base.Constantes.ConstanteFloat;
import archivos.ast.Base.Constantes.ConstanteString;
import archivos.ast.Base.Expresiones.Expresion;
import archivos.ast.Base.Expresiones.FuncionEspecial.Cola;
import archivos.ast.Base.Expresiones.Inputs.Input_Bool;
import archivos.ast.Base.Expresiones.Inputs.Input_Float;
import archivos.ast.Base.Expresiones.Inputs.Input_Int;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Division;
import archivos.ast.Base.Expresiones.Operaciones.binarias.OperacionBinaria;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Multiplicacion;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Resta;
import archivos.ast.Base.Expresiones.Operaciones.binarias.arismeticos.Suma;
import archivos.ast.Base.Expresiones.Operaciones.binarias.comparaciones.*;
import archivos.ast.Base.Expresiones.Operaciones.binarias.logicas.AND;
import archivos.ast.Base.Expresiones.Operaciones.binarias.logicas.OR;
import archivos.ast.Base.Expresiones.Operaciones.unarias.OperacionUnaria;
import archivos.ast.Base.Expresiones.Operaciones.unarias.MenosUnario;
import archivos.ast.Base.Expresiones.Operaciones.unarias.NOT;
import archivos.ast.Base.Expresiones.Operaciones.unarias.conversiones.EnteroAFlotante;
import archivos.ast.Base.Identificador;
import archivos.ast.Base.Nodo;
import archivos.ast.Base.Programa;
import archivos.ast.Base.Tipo;
import archivos.ast.Sentencias.Asignacion;
import archivos.ast.Sentencias.Displays.DisplayCadenaCaracteres;
import archivos.ast.Sentencias.Displays.DisplayExpresion;
import archivos.ast.Sentencias.Sentencia;
import archivos.ast.Sentencias.SentenciaInteraciones.While;
import archivos.ast.Sentencias.SentenciaSeleccion.IfElse;
import archivos.ast.Sentencias.SentenciaSeleccion.IfSimple;
import java_cup.runtime.Symbol;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\030\005\000\002\031\003" +
    "\000\002\031\004\000\002\032\006\000\002\027\003\000" +
    "\002\027\005\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\003\005\000\002\010\003\000\002\010" +
    "\004\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\011\011\000\002\006\003\000" +
    "\002\006\003\000\002\013\011\000\002\014\013\000\002" +
    "\007\006\000\002\007\006\000\002\012\005\000\002\022" +
    "\005\000\002\022\003\000\002\023\005\000\002\023\003" +
    "\000\002\024\004\000\002\024\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\017\004\000" +
    "\002\017\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\005\000\002\016" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\025\012\000\002\026\003\000\002\026\003\000" +
    "\002\033\003\000\002\033\005\000\002\033\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\010\002\ufffe\055\010\057\007\001\002\000" +
    "\004\002\175\001\002\000\004\057\007\001\002\000\004" +
    "\002\uffff\001\002\000\012\020\032\021\027\026\035\054" +
    "\037\001\002\000\010\044\016\045\013\046\011\001\002" +
    "\000\004\017\ufff5\001\002\000\004\017\021\001\002\000" +
    "\004\017\ufff6\001\002\000\012\044\ufffc\045\ufffc\046\ufffc" +
    "\056\ufffc\001\002\000\012\044\016\045\013\046\011\056" +
    "\017\001\002\000\004\017\ufff7\001\002\000\004\057\ufffd" +
    "\001\002\000\012\044\ufffb\045\ufffb\046\ufffb\056\ufffb\001" +
    "\002\000\004\054\023\001\002\000\006\015\025\016\024" +
    "\001\002\000\006\015\ufff9\016\ufff9\001\002\000\004\054" +
    "\026\001\002\000\012\044\ufffa\045\ufffa\046\ufffa\056\ufffa" +
    "\001\002\000\006\015\ufff8\016\ufff8\001\002\000\004\011" +
    "\166\001\002\000\020\020\ufff1\021\ufff1\026\ufff1\030\ufff1" +
    "\031\ufff1\054\ufff1\060\ufff1\001\002\000\020\020\ufff3\021" +
    "\ufff3\026\ufff3\030\ufff3\031\ufff3\054\ufff3\060\ufff3\001\002" +
    "\000\004\011\161\001\002\000\020\020\uffee\021\uffee\026" +
    "\uffee\030\uffee\031\uffee\054\uffee\060\uffee\001\002\000\020" +
    "\020\uffef\021\uffef\026\uffef\030\uffef\031\uffef\054\uffef\060" +
    "\uffef\001\002\000\004\011\150\001\002\000\020\020\uffeb" +
    "\021\uffeb\026\uffeb\030\uffeb\031\uffeb\054\uffeb\060\uffeb\001" +
    "\002\000\004\010\045\001\002\000\020\020\uffec\021\uffec" +
    "\026\uffec\030\uffec\031\uffec\054\uffec\060\uffec\001\002\000" +
    "\020\020\ufff0\021\ufff0\026\ufff0\030\ufff0\031\ufff0\054\ufff0" +
    "\060\ufff0\001\002\000\014\020\032\021\027\026\035\054" +
    "\037\060\043\001\002\000\004\002\ufff4\001\002\000\020" +
    "\020\ufff2\021\ufff2\026\ufff2\030\ufff2\031\ufff2\054\ufff2\060" +
    "\ufff2\001\002\000\030\005\071\011\061\023\053\024\065" +
    "\025\070\034\051\043\047\050\064\051\046\053\056\054" +
    "\052\001\002\000\056\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\012\uffd0\014\uffd0\016\uffd0\020\uffd0\021\uffd0\026\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\054\uffd0\060\uffd0\001\002\000" +
    "\004\011\134\001\002\000\046\004\116\005\114\012\uffd9" +
    "\020\uffd9\021\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\035\122\036\120\037\115\040\117\041\123\042\121" +
    "\054\uffd9\060\uffd9\001\002\000\030\005\071\011\061\023" +
    "\053\024\065\025\070\034\051\043\047\050\064\051\046" +
    "\053\056\054\052\001\002\000\056\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\012\uffcb\014\uffcb\016\uffcb\020\uffcb\021\uffcb" +
    "\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\054\uffcb\060\uffcb" +
    "\001\002\000\004\011\111\001\002\000\026\012\uffe4\020" +
    "\uffe4\021\uffe4\026\uffe4\030\uffe4\031\uffe4\032\077\033\uffe4" +
    "\054\uffe4\060\uffe4\001\002\000\056\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\012\uffd3\014\uffd3\016\uffd3\020\uffd3\021\uffd3" +
    "\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\054\uffd3\060\uffd3" +
    "\001\002\000\056\004\uffcf\005\uffcf\006\uffcf\007\uffcf\012" +
    "\uffcf\014\uffcf\016\uffcf\020\uffcf\021\uffcf\026\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\054\uffcf\060\uffcf\001\002\000\056" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\012\uffd1\014\uffd1\016" +
    "\uffd1\020\uffd1\021\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\054\uffd1\060\uffd1\001\002\000\056\004\uffd6\005\uffd6" +
    "\006\105\007\106\012\uffd6\014\uffd6\016\uffd6\020\uffd6\021" +
    "\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\054\uffd6\060" +
    "\uffd6\001\002\000\030\005\071\011\061\023\053\024\065" +
    "\025\070\034\051\043\047\050\064\051\046\053\056\054" +
    "\052\001\002\000\026\012\uffe2\020\uffe2\021\uffe2\026\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\054\uffe2\060\uffe2\001" +
    "\002\000\026\012\uffe0\020\uffe0\021\uffe0\026\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\054\uffe0\060\uffe0\001\002\000" +
    "\056\004\uffce\005\uffce\006\uffce\007\uffce\012\uffce\014\uffce" +
    "\016\uffce\020\uffce\021\uffce\026\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\054\uffce\060\uffce\001\002\000\004\011\101\001" +
    "\002\000\056\004\uffcd\005\uffcd\006\uffcd\007\uffcd\012\uffcd" +
    "\014\uffcd\016\uffcd\020\uffcd\021\uffcd\026\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\054\uffcd\060\uffcd\001\002\000\022\020" +
    "\uffe6\021\uffe6\026\uffe6\030\uffe6\031\uffe6\033\075\054\uffe6" +
    "\060\uffe6\001\002\000\004\011\073\001\002\000\026\005" +
    "\071\011\061\023\053\024\065\025\070\043\047\050\064" +
    "\051\046\053\056\054\052\001\002\000\056\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\012\uffd2\014\uffd2\016\uffd2\020\uffd2" +
    "\021\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\054\uffd2" +
    "\060\uffd2\001\002\000\004\012\074\001\002\000\056\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\012\uffca\014\uffca\016\uffca" +
    "\020\uffca\021\uffca\026\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\054\uffca\060\uffca\001\002\000\030\005\071\011\061\023" +
    "\053\024\065\025\070\034\051\043\047\050\064\051\046" +
    "\053\056\054\052\001\002\000\026\012\uffe5\020\uffe5\021" +
    "\uffe5\026\uffe5\030\uffe5\031\uffe5\032\077\033\uffe5\054\uffe5" +
    "\060\uffe5\001\002\000\030\005\071\011\061\023\053\024" +
    "\065\025\070\034\051\043\047\050\064\051\046\053\056" +
    "\054\052\001\002\000\026\012\uffe3\020\uffe3\021\uffe3\026" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\054\uffe3\060\uffe3" +
    "\001\002\000\004\012\102\001\002\000\056\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\012\uffc8\014\uffc8\016\uffc8\020\uffc8" +
    "\021\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\054\uffc8" +
    "\060\uffc8\001\002\000\006\012\104\033\075\001\002\000" +
    "\056\004\uffcc\005\uffcc\006\uffcc\007\uffcc\012\uffcc\014\uffcc" +
    "\016\uffcc\020\uffcc\021\uffcc\026\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\054\uffcc\060\uffcc\001\002\000\026\005\071\011" +
    "\061\023\053\024\065\025\070\043\047\050\064\051\046" +
    "\053\056\054\052\001\002\000\026\005\071\011\061\023" +
    "\053\024\065\025\070\043\047\050\064\051\046\053\056" +
    "\054\052\001\002\000\056\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\012\uffd4\014\uffd4\016\uffd4\020\uffd4\021\uffd4\026\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\054\uffd4\060\uffd4\001\002" +
    "\000\056\004\uffd5\005\uffd5\006\uffd5\007\uffd5\012\uffd5\014" +
    "\uffd5\016\uffd5\020\uffd5\021\uffd5\026\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\054\uffd5\060\uffd5\001\002\000\004\012\112" +
    "\001\002\000\056\004\uffc9\005\uffc9\006\uffc9\007\uffc9\012" +
    "\uffc9\014\uffc9\016\uffc9\020\uffc9\021\uffc9\026\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\054\uffc9\060\uffc9\001\002\000\026" +
    "\012\uffe1\020\uffe1\021\uffe1\026\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\054\uffe1\060\uffe1\001\002\000\026\005\071" +
    "\011\061\023\053\024\065\025\070\043\047\050\064\051" +
    "\046\053\056\054\052\001\002\000\026\005\071\011\061" +
    "\023\053\024\065\025\070\043\047\050\064\051\046\053" +
    "\056\054\052\001\002\000\026\005\071\011\061\023\053" +
    "\024\065\025\070\043\047\050\064\051\046\053\056\054" +
    "\052\001\002\000\026\005\071\011\061\023\053\024\065" +
    "\025\070\043\047\050\064\051\046\053\056\054\052\001" +
    "\002\000\026\005\071\011\061\023\053\024\065\025\070" +
    "\043\047\050\064\051\046\053\056\054\052\001\002\000" +
    "\026\005\071\011\061\023\053\024\065\025\070\043\047" +
    "\050\064\051\046\053\056\054\052\001\002\000\026\005" +
    "\071\011\061\023\053\024\065\025\070\043\047\050\064" +
    "\051\046\053\056\054\052\001\002\000\026\005\071\011" +
    "\061\023\053\024\065\025\070\043\047\050\064\051\046" +
    "\053\056\054\052\001\002\000\032\004\116\005\114\012" +
    "\uffdb\020\uffdb\021\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\054\uffdb\060\uffdb\001\002\000\032\004\116\005" +
    "\114\012\uffdf\020\uffdf\021\uffdf\026\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\054\uffdf\060\uffdf\001\002\000\032\004" +
    "\116\005\114\012\uffda\020\uffda\021\uffda\026\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\054\uffda\060\uffda\001\002\000" +
    "\032\004\116\005\114\012\uffde\020\uffde\021\uffde\026\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\054\uffde\060\uffde\001" +
    "\002\000\032\004\116\005\114\012\uffdc\020\uffdc\021\uffdc" +
    "\026\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\054\uffdc\060" +
    "\uffdc\001\002\000\056\004\uffd8\005\uffd8\006\105\007\106" +
    "\012\uffd8\014\uffd8\016\uffd8\020\uffd8\021\uffd8\026\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\054\uffd8\060\uffd8\001\002\000" +
    "\032\004\116\005\114\012\uffdd\020\uffdd\021\uffdd\026\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\054\uffdd\060\uffdd\001" +
    "\002\000\056\004\uffd7\005\uffd7\006\105\007\106\012\uffd7" +
    "\014\uffd7\016\uffd7\020\uffd7\021\uffd7\026\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\054\uffd7\060\uffd7\001\002\000\006\051" +
    "\137\054\136\001\002\000\004\015\140\001\002\000\004" +
    "\015\uffc6\001\002\000\004\015\uffc5\001\002\000\004\013" +
    "\141\001\002\000\032\005\071\011\061\014\uffc2\016\uffc2" +
    "\023\053\024\065\025\070\043\047\050\064\051\046\053" +
    "\056\054\052\001\002\000\012\004\116\005\114\014\uffc4" +
    "\016\uffc4\001\002\000\006\014\145\016\144\001\002\000" +
    "\026\005\071\011\061\023\053\024\065\025\070\043\047" +
    "\050\064\051\046\053\056\054\052\001\002\000\004\012" +
    "\146\001\002\000\056\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\012\uffc7\014\uffc7\016\uffc7\020\uffc7\021\uffc7\026\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\054\uffc7\060\uffc7\001\002\000" +
    "\012\004\116\005\114\014\uffc3\016\uffc3\001\002\000\030" +
    "\005\071\011\061\023\053\024\065\025\070\034\051\043" +
    "\047\050\064\051\046\053\056\054\052\001\002\000\006" +
    "\012\152\033\075\001\002\000\004\027\153\001\002\000" +
    "\012\020\032\021\027\026\035\054\037\001\002\000\016" +
    "\020\032\021\027\026\035\030\155\031\156\054\037\001" +
    "\002\000\012\020\032\021\027\026\035\054\037\001\002" +
    "\000\020\020\uffea\021\uffea\026\uffea\030\uffea\031\uffea\054" +
    "\uffea\060\uffea\001\002\000\014\020\032\021\027\026\035" +
    "\031\160\054\037\001\002\000\020\020\uffe9\021\uffe9\026" +
    "\uffe9\030\uffe9\031\uffe9\054\uffe9\060\uffe9\001\002\000\032" +
    "\005\071\011\061\023\053\024\065\025\070\034\051\043" +
    "\047\047\162\050\064\051\046\053\056\054\052\001\002" +
    "\000\004\012\165\001\002\000\006\012\164\033\075\001" +
    "\002\000\020\020\uffe7\021\uffe7\026\uffe7\030\uffe7\031\uffe7" +
    "\054\uffe7\060\uffe7\001\002\000\020\020\uffe8\021\uffe8\026" +
    "\uffe8\030\uffe8\031\uffe8\054\uffe8\060\uffe8\001\002\000\030" +
    "\005\071\011\061\023\053\024\065\025\070\034\051\043" +
    "\047\050\064\051\046\053\056\054\052\001\002\000\006" +
    "\012\170\033\075\001\002\000\004\022\171\001\002\000" +
    "\012\020\032\021\027\026\035\054\037\001\002\000\014" +
    "\020\032\021\027\026\035\031\173\054\037\001\002\000" +
    "\020\020\uffed\021\uffed\026\uffed\030\uffed\031\uffed\054\uffed" +
    "\060\uffed\001\002\000\004\002\000\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\010\002\003\003\005\030\004\001\001\000" +
    "\002\001\001\000\004\003\173\001\001\000\002\001\001" +
    "\000\022\005\030\006\040\007\033\010\041\011\027\012" +
    "\032\013\037\014\035\001\001\000\010\004\011\031\014" +
    "\032\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\011\032\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\043\006\040\007" +
    "\033\011\027\012\032\013\037\014\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\015\047\016\056\017" +
    "\054\020\057\021\062\022\066\023\053\024\061\025\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\047\016\056\017\054\020\057\021\062" +
    "\024\112\025\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\015\047\016" +
    "\056\017\054\020\057\021\062\022\102\023\053\024\061" +
    "\025\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\056\017\071\025" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\047\016\056\017\054\020\057\021" +
    "\062\023\075\024\061\025\065\001\001\000\002\001\001" +
    "\000\020\015\047\016\056\017\054\020\057\021\062\024" +
    "\077\025\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\056\017\107\025\065\001\001\000\010\016\056" +
    "\017\106\025\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\056\017\054\020\132\025\065\001\001\000" +
    "\014\015\131\016\056\017\054\020\057\025\065\001\001" +
    "\000\012\016\056\017\054\020\130\025\065\001\001\000" +
    "\014\015\127\016\056\017\054\020\057\025\065\001\001" +
    "\000\014\015\126\016\056\017\054\020\057\025\065\001" +
    "\001\000\014\015\125\016\056\017\054\020\057\025\065" +
    "\001\001\000\014\015\124\016\056\017\054\020\057\025" +
    "\065\001\001\000\014\015\123\016\056\017\054\020\057" +
    "\025\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\141\016\056\017" +
    "\054\020\057\025\065\033\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\146\016\056\017\054\020" +
    "\057\025\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\015\047\016\056\017\054\020" +
    "\057\021\062\022\150\023\053\024\061\025\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\030\006" +
    "\040\007\033\010\153\011\027\012\032\013\037\014\035" +
    "\001\001\000\020\005\043\006\040\007\033\011\027\012" +
    "\032\013\037\014\035\001\001\000\022\005\030\006\040" +
    "\007\033\010\156\011\027\012\032\013\037\014\035\001" +
    "\001\000\002\001\001\000\020\005\043\006\040\007\033" +
    "\011\027\012\032\013\037\014\035\001\001\000\002\001" +
    "\001\000\024\015\047\016\056\017\054\020\057\021\062" +
    "\022\162\023\053\024\061\025\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\015\047\016\056\017\054\020\057\021\062\022" +
    "\166\023\053\024\061\025\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\030\006\040\007\033\010" +
    "\171\011\027\012\032\013\037\014\035\001\001\000\020" +
    "\005\043\006\040\007\033\011\027\012\032\013\037\014" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        if (s.sym==40){
            concat_rules("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"+s.value+"' . Simbolo n° "+s.sym);
            try { throw new Exception((String) s.value);}
            catch (Exception e) {}}
        else{
        concat_rules("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"+s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );}}

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        if (s.sym == 40){
            throw  new Exception("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"+s.value+"' . Simbolo n° "+s.sym+ "" );}
        else{
        throw new Exception("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"+s.value+"' . Simbolo n° "+s.sym+ " no reconocido." ); }}

    public String reglas;

    public void concat_rules(String regla){
        reglas += regla + "\n\n";
    }

    public StringBuilder simbolos=new StringBuilder("");

    TreeMap<String, ArrayList<String>> tablaSimbolos2 = new TreeMap<String, ArrayList<String>>();

    public Tipo tipo_en_comun(Tipo t1,Tipo t2) throws java.lang.Exception
    {
    if (t1 == t2){
        return t1;
    }
    if (t1==Tipo.Float && t2==Tipo.Int) {
        return t1;
    }
    if (t1==Tipo.Int && t2==Tipo.Float) {
        return t2;
    }
    throw new Exception(String.format("No existe un tipo común entre %1$s y %2$s\n", t1, t2 ));
    }
    private static Expresion convertir_a_tipo(Expresion expresion, Tipo tipo_destino) throws java.lang.Exception{
        Tipo tipo_origen = expresion.getTipo();
        if(tipo_origen == tipo_destino){
            return expresion;
        }
        if(tipo_origen == Tipo.Int && tipo_destino == Tipo.Float){
            return new EnteroAFlotante(expresion);
        }
        throw new Exception(String.format("No existe un tipo común entre %1$s y %2$s\n", tipo_origen, tipo_destino ));
    }

    private static void tipo_bool(Tipo tipo) throws Exception{
        if (tipo == Tipo.Bool){
            throw new Exception("No se permiten tipos booleanos en operaciones arismeticas.");
        }
    }

    private static void tipo_bool_comp(Tipo tipo) throws Exception{
            if (tipo == Tipo.Bool){
                throw new Exception("No se permiten tipos booleanos en operaciones de comparación.");
            }
        }

    private static void checkTipoInt(Expresion p) throws Exception {
           if (!(p.getTipo()==Tipo.Int)){
               throw new Exception("No se aceptan tipos "+ p.getTipo().name() + " en funcion especial Cola.");
           }
        }

    private static void checkTipoCond(Expresion cond) throws Exception {
                if (!(cond.getTipo() == Tipo.Bool)){
                    throw new Exception("No se aceptan tipos " + cond.getTipo().name()  + " en condiciones de estructuras de control o iteración.");
                }
            }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {



  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa_general EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa_general ::= sector_declaraciones programa_main 
            {
              Nodo RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String sd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		  concat_rules("REGLA 0: programa_general --> sector_declaraciones programa_main" + "\n\t --> " + sd + " " + p + " ");
    RESULT = p;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa_general",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa_general ::= programa_main 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    concat_rules("REGLA 0.1: programa_general --> programa_main " + "\n\t --> " + p );
    RESULT = p;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa_general",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa_general ::= 
            {
              Nodo RESULT =null;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa_general",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sector_declaraciones ::= DECLARE_SECTION lista_declaraciones ENDDECLARE_SECTION 
            {
              String RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 concat_rules("REGLA 1: sector_declaraciones --> DECLARE_SECTION lista_declaraciones ENDDECLARE_SECTION " + "\n\t --> " + "declare.section" + " " + ld + " " + "enddeclare.section" );
       RESULT = "DECLARE_SECTION" + ld + "ENDDECLARE_SECTION"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sector_declaraciones",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= declaracion 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    concat_rules ( "REGLA 1.1: lista_declaraciones --> declaracion " + "\n\t --> " + d + " ");
    RESULT = d; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= lista_declaraciones declaracion 
            {
              String RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    concat_rules ("REGLA 1.2: lista_declaraciones --> lista_declaraciones declaracion " + "\n\t --> " + " " + ld + d );
    RESULT = ld + d ; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= tipo_de_dato DOSPUNTOS ids PUNTOCOMA 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Tipo td = (Tipo)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        concat_rules("REGLA 2: declaracion --> tipo_de_dato DOSPUNTOS ids PUNTOCOMA " + "\n\t --> " + td + ": " + i + "; ");
        RESULT = td + ":" + i + ";";
        if (i.contains(",")){
            String[] parts = i.split(",");
            for (String s : parts){
                if (tablaSimbolos2.containsKey(s)){
                    throw new Exception("Variable " + s + " ya declarada." );
                    }
                else{
                    ArrayList<String> hg = new ArrayList<String>(Arrays.asList("ID",td.name(),"_","_"));
                    tablaSimbolos2.put(s,hg);
                    simbolos.append(String.format("%20s%20s%20s%20s%20s%n", s, hg.get(0), hg.get(1), hg.get(2), hg.get(3)));}}}
        else{
            if (tablaSimbolos2.containsKey(i)){
                throw new Exception("Variable " + i + " ya declarada." );
            }
            else{
                ArrayList<String> hg = new ArrayList<String>(Arrays.asList("ID",td.name(),"_","_"));
                tablaSimbolos2.put(i,hg);
                simbolos.append(String.format("%20s%20s%20s%20s%20s%n", i, hg.get(0), hg.get(1), hg.get(2), hg.get(3)));}}
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ids ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2: ids --> IDENTIFIER " + "\n\t --> " + id);
        RESULT = id; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ids ::= ids COMA IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2: ids --> ids IDENTIFIER " + "\n\t --> " + i + ", "+ id);
        RESULT = i + "," + id; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_de_dato ::= TIPO_INT 
            {
              Tipo RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2.1: tipo_de_dato --> TIPO_INT " + "\n\t --> " + ti);
        RESULT = Tipo.Int; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_de_dato ::= TIPO_FLOAT 
            {
              Tipo RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2.2: tipo_de_dato --> TIPO_FLOAT " + "\n\t --> " + tf);
        RESULT = Tipo.Float; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_de_dato ::= TIPO_BOOL 
            {
              Tipo RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2.3: tipo_de_dato --> TIPO_BOOL " + "\n\t --> " + tb);
        RESULT = Tipo.Bool;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // programa_main ::= PROGRAM_SECTION lista_sentencias ENDPROGRAM_SECTION 
            {
              Programa RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Sentencia> ls = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 3: programa --> PROGRAM_SECTION lista_sentencias ENDPROGRAM_SECTION " + "\n\t --> " + "program.section " + ls  + " endprogram.section");
            RESULT = new Programa("Programa", tablaSimbolos2, ls);

        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa_main",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_sentencias ::= sentencia 
            {
              List<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1: lista_sentencias --> sentencia " + "\n\t --> " + s + " ");
            List<Sentencia> lista_sentencias = new ArrayList<>();
            lista_sentencias.add(s);
            RESULT = lista_sentencias; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_sentencias ::= lista_sentencias sentencia 
            {
              List<Sentencia> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Sentencia> ls = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.2: lista_sentencias --> lista_sentencias sentencia " + "\n\t --> " + ls + " " + s + " ");
            ls.add(s);
            RESULT = ls; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia_while 
            {
              Sentencia RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		While sw = (While)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.1: sentencia --> sentencia_while " + "\n\t --> " + sw + " ");
            RESULT = sw; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentencia_if 
            {
              Sentencia RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia si = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.2: sentencia --> sentencia_if " + "\n\t --> " + si + " ");
            RESULT = si; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentencia_display 
            {
              Sentencia RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia sd = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.3: sentencia --> sentencia_display " + "\n\t --> " + sd + " ");
            RESULT = sd; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= sentencia_asignacion 
            {
              Sentencia RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Asignacion sa = (Asignacion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.5: sentencia --> sentencia_asignacion " + "\n\t --> " + sa + " ");
            RESULT = sa;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_while ::= WHILE PARENTESISO exp_or PARENTESISC DO lista_sentencias END 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Sentencia> ls = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 4: sentencia_while --> WHILE PARENTESISO exp_or PARENTESISC DO lista_sentencias END " + "\n\t --> " + "while ( " + c + " ) do" + ls + "end" + " " );
            checkTipoCond(c);
            RESULT = new While("While",c,ls);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_while",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_if ::= if_simple 
            {
              Sentencia RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		IfSimple ifs = (IfSimple)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 5: sentencia_if --> if_simple " + "\n\t --> " + ifs + " ");
            RESULT = ifs;
         
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_if ::= if_else 
            {
              Sentencia RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		IfElse ie = (IfElse)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 5: sentencia_if --> if_else " + "\n\t --> " + ie + " ");
            RESULT = ie;
         
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_simple ::= IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias END 
            {
              IfSimple RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Sentencia> ls = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 5.1: if_simple --> IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias END " + "\n\t --> " + " if ( " + cond + " ) then " + ls + " end ");
            checkTipoCond(cond);
            RESULT = new IfSimple("IfSimple", cond, ls);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if_simple",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_else ::= IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias ELSE lista_sentencias END 
            {
              IfElse RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		List<Sentencia> ls = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int ls2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ls2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Sentencia> ls2 = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 5.2: if_else --> IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias ELSE lista_sentencias END " + "\n\t --> " + "if ( " + cond + " ) then " + ls + " else " + ls2 + "end ");
            checkTipoCond(cond);
            RESULT = new IfElse("IfElse", cond, ls, ls2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if_else",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-8)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_display ::= DISPLAY PARENTESISO STRING_LITERAL PARENTESISC 
            {
              Sentencia RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 6: sentencia_display --> DISPLAY ( STRING_LITERAL ) " + "\n\t --> " + " display( " +sl+ " ) ");
            //RESULT = "display(" + sl + ")";
            ArrayList<String> hg = new ArrayList<String>(
                Arrays.asList("STRING_LITERAL",Tipo.CTE_STRING.name(),sl,String.valueOf(sl.length())));
            int id_str = tablaSimbolos2.size() +1;
            tablaSimbolos2.put("str" + id_str,hg);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n","str" + tablaSimbolos2.size(), hg.get(0), hg.get(1), hg.get(2), hg.get(3)));
            ConstanteString CC = new ConstanteString(sl, Tipo.CTE_STRING, "str" + tablaSimbolos2.size());
            RESULT = new DisplayCadenaCaracteres("DisplayCadCaracteres",CC);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_display ::= DISPLAY PARENTESISO exp_or PARENTESISC 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 6: sentencia_display --> DISPLAY ( exp_or ) " + "\n\t --> " + " display( " + c + " ) ");
            RESULT = new DisplayExpresion("DisplayExpresion",c);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia_asignacion ::= IDENTIFIER ASIGN exp_or 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7: sentencia_asignacion --> IDENTIFIER ASIGN exp_or " + "\n\t --> " + id + " := " + eo);
        if (!tablaSimbolos2.containsKey(id)){
            throw new Exception("Variable " + id + " no declarada.");}
        else {
            ArrayList<String> a = tablaSimbolos2.get(id);
            if (Objects.equals(a.get(1), "Int")){
                if (eo.getTipo() == Tipo.Float){
                    throw new Exception("No se admiten Asignaciones con un Identificador Tipo INT y una Expresion Tipo FLOAT");}
            else{
                Expresion exp = convertir_a_tipo(eo, Tipo.Int);
                RESULT = new Asignacion("Asignacion",new Identificador(id, Tipo.Int),exp);}}
            if (Objects.equals(a.get(1), "Float")){
                Expresion exp = convertir_a_tipo(eo, Tipo.Float);
                RESULT = new Asignacion("Asignacion",new Identificador(id, Tipo.Float),exp);}
            if (Objects.equals(a.get(1), "Bool")){
                Tipo tipo_comun = tipo_en_comun(Tipo.Bool,eo.getTipo());
                Expresion exp = convertir_a_tipo(eo, tipo_comun);
                RESULT = new Asignacion("Asignacion",new Identificador(id, Tipo.Bool),exp);}
        }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_or ::= exp_or OR exp_and 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.1: exp_or --> exp_or OR exp_and " + "\n\t --> " + e1 + " OR "+ e2);
        RESULT = new OR("OR",Tipo.Bool,e1,e2);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_or",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_or ::= exp_and 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.2: exp_or --> exp_and " + "\n\t --> " + e);
        RESULT = e ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_or",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_and ::= exp_and AND exp_not 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.3: exp_and --> exp_and AND exp_not " + "\n\t --> " + e1+ " AND "+ e2);
        RESULT = new AND("AND",Tipo.Bool,e1,e2);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_and",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_and ::= exp_not 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.4: exp_and --> exp_not " + "\n\t --> " +e);
        RESULT = e ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_and",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_not ::= NOT exp_not 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.5: exp_not --> NOT exp_not " + "\n\t --> " + e1);
        RESULT = new NOT("NOT",e1,Tipo.Bool);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_not",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_not ::= comparacion 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.6: exp_not --> comparacion " + "\n\t --> " + c);
        RESULT = c ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_not",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparacion ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.6.1: comparacion --> expresion MAYOR expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
        Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
        tipo_bool_comp(tipo_comun);
        Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
        Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
        RESULT = new Mayor(">",Tipo.Bool,exp1,exp2);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparacion ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 7.6.1.1: comparacion --> expresion MENOR expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
            Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
            tipo_bool_comp(tipo_comun);
            Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
            Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
            RESULT = new Menor("<",Tipo.Bool,exp1,exp2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparacion ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 7.6.1: comparacion --> expresion IGUAL expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
            Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
            tipo_bool_comp(tipo_comun);
            Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
            Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
            RESULT = new Igual("==",Tipo.Bool,exp1,exp2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparacion ::= expresion DISTINTO expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 7.6.1: comparacion --> expresion DISTINTO expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
            Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
            tipo_bool_comp(tipo_comun);
            Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
            Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
            RESULT = new Distinto("!=",Tipo.Bool,exp1,exp2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 7.6.1: comparacion --> expresion MAYOR_IGUAL expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
            Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
            tipo_bool_comp(tipo_comun);
            Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
            Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
            RESULT = new MayorOIgual(">=",Tipo.Bool,exp1,exp2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 7.6.1: comparacion --> expresion MENOR_IGUAL expresion " + "\n\t --> " + e1 + " " + m + " " + e2);
            Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
            tipo_bool_comp(tipo_comun);
            Expresion exp1 = convertir_a_tipo(e1, tipo_comun);
            Expresion exp2 = convertir_a_tipo(e2, tipo_comun);
            RESULT = new MenorOIgual("<=",Tipo.Bool,exp1,exp2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparacion ::= expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.6.2: comparacion --> expresion " + "\n\t --> " + e1);
        RESULT = e1 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion SUMA termino 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.7: expresion --> expresion SUMA termino " + "\n\t --> " + e1 +" + "+ e2);
        Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
        tipo_bool(tipo_comun);
        RESULT = new Suma("+",tipo_comun,convertir_a_tipo(e1,tipo_comun),convertir_a_tipo(e2,tipo_comun));
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion RESTA termino 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.8: expresion --> expresion RESTA termino " + "\n\t --> " + e1 + " - " + e2);
        Tipo tipo_comun = tipo_en_comun(e1.getTipo(),e2.getTipo());
        tipo_bool(tipo_comun);
        RESULT = new Resta("-",tipo_comun,convertir_a_tipo(e1,tipo_comun),convertir_a_tipo(e2,tipo_comun));
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9: expresion --> termino " + "\n\t --> " + t);
        RESULT = t ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino ::= termino MULT menos_unario 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9.1: termino --> termino MULT menor_unario " + "\n\t --> " + t + " * " + mu);
        Tipo tipo_comun = tipo_en_comun(t.getTipo(),mu.getTipo());
        tipo_bool(tipo_comun);
        RESULT = new Multiplicacion("*",tipo_comun,convertir_a_tipo(t,tipo_comun),convertir_a_tipo(mu,tipo_comun));
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termino ::= termino DIV menos_unario 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9.2: termino --> termino DIV menor_unario " + "\n\t --> " + t + " / " + mu);
        Tipo tipo_comun = tipo_en_comun(t.getTipo(),mu.getTipo());
        tipo_bool(tipo_comun);
        RESULT = new Division("/",tipo_comun,convertir_a_tipo(t,tipo_comun),convertir_a_tipo(mu,tipo_comun));
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // termino ::= menos_unario 
            {
              Expresion RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9.3: termino --> menor_unario " + "\n\t --> " + mu);
        RESULT = mu;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // menos_unario ::= RESTA menos_unario 
            {
              Expresion RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.1: menos_unario --> - menor_unario " + "\n\t --> " + "- " +mu);
        tipo_bool(mu.getTipo());
        RESULT = new MenosUnario("MenosUnario", mu,mu.getTipo());
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // menos_unario ::= factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 //superFenelchat
        concat_rules("REGLA 8.2: menos_unario --> factor " + "\n\t --> " + f);
        RESULT = f;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= INT 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.1: factor --> INT " + "\n\t --> " + i);
        RESULT = new ConstanteEntera(i, Tipo.Int, "Factor_Int");
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= FLOAT 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.2: factor --> FLOAT " + "\n\t --> " + f);
        RESULT = new ConstanteFloat(f, Tipo.Float, "Factor_Float");
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= BOOL 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.3: factor --> BOOL " + "\n\t --> " + b);
        RESULT = new ConstanteBool(b, Tipo.Bool, "Factor_Bool");
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= funcion_especial 
            {
              Expresion RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion fe = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.4: factor --> funcion_especial " + "\n\t --> " + fe);
        RESULT = fe;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= PARENTESISO exp_or PARENTESISC 
            {
              Expresion RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expresion eo = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        concat_rules("REGLA 8.5: factor --> PARENTESISO exp_or PARENTESISC " + "\n\t --> " + " ( " + eo + " ) ");
        RESULT = eo;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= IDENTIFIER 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.6: factor --> IDENTIFIER " + "\n\t --> " + id + " ");
        if (!tablaSimbolos2.containsKey(id)){
            throw new Exception("Variable " + id + " no declarada.");}
        else {
            ArrayList<String> e = tablaSimbolos2.get(id);
            if (e.get(1)=="Int"){RESULT = new Identificador(id,Tipo.Int);}
            if (e.get(1)=="Float"){RESULT = new Identificador(id, Tipo.Float);}
            if (e.get(1)=="Bool"){RESULT = new Identificador(id, Tipo.Bool);}
        }
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= INPUT_BOOL PARENTESISO PARENTESISC 
            {
              Expresion RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ib = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 8.7: factor --> INPUT_BOOL() " + "\n\t --> " + ib + "()");
        RESULT = new Input_Bool("INPUT_BOOL", Tipo.Bool);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= INPUT_INT PARENTESISO PARENTESISC 
            {
              Expresion RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ii = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 8.8: factor --> INPUT_INT() " + "\n\t --> " + ii + "()");
        RESULT = new Input_Int("INPUT_INT", Tipo.Int);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= INPUT_FLOAT PARENTESISO PARENTESISC 
            {
              Expresion RESULT =null;
		int iflleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iflright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ifl = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 8.9: factor --> INPUT_FLOAT() " + "\n\t --> " + ifl + "()");
        RESULT = new Input_Float("INPUT_FLOAT", Tipo.Float);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcion_especial ::= COLA PARENTESISO pivot PUNTOCOMA CORCHETEO lista_expresiones CORCHETEC PARENTESISC 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		List<Expresion> le = (List<Expresion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 9: funcion_especial --> COLA PARENTESISO pivot PUNTOCOMA CORCHETEO lista_expresiones CORCHETEC PARENTESISC " + "\n\t --> " + "cola ( " + p + " ;[ " + le + "])");
        //Listas
        List<Sentencia> sents = new ArrayList<>();
        List<Sentencia> sents_cola = new ArrayList<>();
        List<Sentencia> sentPrimerIf = new ArrayList<>();
        List<Sentencia> sentSegundoIf = new ArrayList<>();
        List<Sentencia> sentTercerIf = new ArrayList<>();
        List<Expresion> colas = new ArrayList<>();

        //Generamos el Pivot
        Identificador pivot = new Identificador("_Pivot"+CodeGeneratorHelper.getNewPivot(), Tipo.Int);
        Asignacion asig_pivot = new Asignacion("Asignacion",pivot,p);
        if(!tablaSimbolos2.containsKey("_Pivot"+CodeGeneratorHelper.getPivot())){
            ArrayList<String> contenidoPivot = new ArrayList<>(Arrays.asList("ID","Int","_","_"));
            tablaSimbolos2.put("_Pivot"+CodeGeneratorHelper.getPivot(),contenidoPivot);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "_Pivot"+ CodeGeneratorHelper.getPivot(), contenidoPivot.get(0), contenidoPivot.get(1), contenidoPivot.get(2), contenidoPivot.get(3)));
            }

        //Generamos el Acum
        Identificador acum = new Identificador("_Acum"+CodeGeneratorHelper.getNewAcum(), Tipo.Int);
        if(!tablaSimbolos2.containsKey("_Acum"+ CodeGeneratorHelper.getAcum())){
            ArrayList<String> contenidoAcum = new ArrayList<>(Arrays.asList("ID","Int","_","_"));
            tablaSimbolos2.put("_Acum"+ CodeGeneratorHelper.getAcum(),contenidoAcum);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "_Acum"+ CodeGeneratorHelper.getAcum(), contenidoAcum.get(0), contenidoAcum.get(1), contenidoAcum.get(2), contenidoAcum.get(3)));
            }

        //Generamos el AcumAux
        Identificador acumAux = new Identificador("_Acum"+CodeGeneratorHelper.getNewAcum(), Tipo.Int);
        if(!tablaSimbolos2.containsKey("_Acum"+ CodeGeneratorHelper.getAcum())){
            ArrayList<String> contenidoAcum = new ArrayList<>(Arrays.asList("ID","Int","_","_"));
            tablaSimbolos2.put("_Acum"+ CodeGeneratorHelper.getAcum(),contenidoAcum);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "_Acum"+ CodeGeneratorHelper.getAcum(), contenidoAcum.get(0), contenidoAcum.get(1), contenidoAcum.get(2), contenidoAcum.get(3)));
            }

        //Generamos el IdPos
        Identificador pos = new Identificador("_IdPos"+CodeGeneratorHelper.getNewPos(), Tipo.Int);
        if(!tablaSimbolos2.containsKey("_IdPos"+CodeGeneratorHelper.getPos())){
            ArrayList<String> contenidoPos = new ArrayList<>(Arrays.asList("ID","Int","_","_"));
            tablaSimbolos2.put("_IdPos"+CodeGeneratorHelper.getPos(),contenidoPos);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "_IdPos"+ CodeGeneratorHelper.getPos(), contenidoPos.get(0), contenidoPos.get(1), contenidoPos.get(2), contenidoPos.get(3)));
            }

        //Generamos los mensajes de error
        ConstanteString mensaje3 = new ConstanteString("La lista esta vacia", Tipo.CTE_STRING, "strmensaje3");
        if(!tablaSimbolos2.containsKey("strmensaje3")){
            ArrayList<String> contenido = new ArrayList<>(Arrays.asList("STRING_LITERAL","CTE_STRING","La lista esta vacia",String.valueOf(mensaje3.getValor().toString().length())));
            tablaSimbolos2.put("strmensaje3",contenido);
            simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "strmensaje3", contenido.get(0), contenido.get(1), contenido.get(2), contenido.get(3)));
            }
            ConstanteString mensaje2 = new ConstanteString("La lista tiene menos elementos que el indicado", Tipo.CTE_STRING, "strmensaje2");
            if(!tablaSimbolos2.containsKey("strmensaje2")){
                ArrayList<String> contenido = new ArrayList<>(Arrays.asList("STRING_LITERAL","CTE_STRING","La lista tiene menos elementos que el indicado",String.valueOf(mensaje2.getValor().toString().length())));
                tablaSimbolos2.put("strmensaje2",contenido);
                simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "strmensaje2", contenido.get(0), contenido.get(1), contenido.get(2), contenido.get(3)));
                }
                ConstanteString mensaje1 = new ConstanteString("El valor debe ser >=1", Tipo.CTE_STRING, "strmensaje1");
                if(!tablaSimbolos2.containsKey("strmensaje1")){
                    ArrayList<String> contenido = new ArrayList<>(Arrays.asList("STRING_LITERAL","CTE_STRING","El valor debe ser >=1",String.valueOf(mensaje1.getValor().toString().length())));
                    tablaSimbolos2.put("strmensaje1",contenido);
                    simbolos.append(String.format("%20s%20s%20s%20s%20s%n", "strmensaje1", contenido.get(0), contenido.get(1), contenido.get(2), contenido.get(3)));
                    }

        //Creamos la cola con lo que necesitamos para obtener su valor
        //Luego llamamos a la funcion colasInternas() para apilar las colas, y la invertimos
        Cola cola = new Cola("Cola",Tipo.Int,asig_pivot,colas,new IfElse(),acum,acumAux,le,p,pivot,pos);
        cola.colasInternas(le);
        Collections.reverse(cola.getColas());

        //Finalmente recorremos las expresiones de la cola original e instanciamos las clases necesarias para luego graficar y generar el codigo intermedio
        for (Expresion e : le) {
            checkTipoInt(e);
            if(e.getNombre() == "Cola"){
                Integer i = le.size();
                String a = i.toString();
                Cola nueva = (Cola) e;
                Igual ig = new Igual("==", Tipo.Bool, new Resta("-", Tipo.Int, new ConstanteEntera(a, Tipo.Int, "Factor_Int"), new Identificador("_Pivot"+CodeGeneratorHelper.getPivot(), Tipo.Int)), new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int));
                Asignacion asig1 = new Asignacion("Asignacion", new Identificador(acum.getNombre(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador(acum.getNombre(), Tipo.Int), new Identificador(nueva.getAcumAux().getNombre(),Tipo.Int)));
                Asignacion asig2 = new Asignacion("Asignacion", new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                Asignacion asig3 = new Asignacion("Asignacion", new Identificador("_Pivot" + CodeGeneratorHelper.getPivot(), Tipo.Int), new Resta("-", Tipo.Int, new Identificador("_Pivot"+ CodeGeneratorHelper.getPivot(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                List<Sentencia> sentencias1 = new ArrayList<>();
                sentencias1.add(asig1);
                sentencias1.add(asig2);
                sentencias1.add(asig3);
                Asignacion asig4 = new Asignacion("Asignacion", new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                List<Sentencia> sentencias2 = new ArrayList<>();
                sentencias2.add(asig4);
                IfElse ie = new IfElse("IFELSE", ig, sentencias1, sentencias2);
                sents.add(ie);
            }
            else {
                checkTipoInt(e);
                Integer i = le.size();
                String a = i.toString();
                Igual ig = new Igual("==", Tipo.Bool, new Resta("-", Tipo.Int, new ConstanteEntera(a, Tipo.Int, "Factor_Int"), new Identificador("_Pivot"+CodeGeneratorHelper.getPivot(), Tipo.Int)), new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int));
                Asignacion asig1 = new Asignacion("Asignacion", new Identificador(acum.getNombre(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador(acum.getNombre(), Tipo.Int), e));
                Asignacion asig2 = new Asignacion("Asignacion", new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                Asignacion asig3 = new Asignacion("Asignacion", new Identificador("_Pivot" + CodeGeneratorHelper.getPivot(), Tipo.Int), new Resta("-", Tipo.Int, new Identificador("_Pivot"+ CodeGeneratorHelper.getPivot(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                List<Sentencia> sentencias1 = new ArrayList<>();
                sentencias1.add(asig1);
                sentencias1.add(asig2);
                sentencias1.add(asig3);
                Asignacion asig4 = new Asignacion("Asignacion", new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new Suma("+", Tipo.Int, new Identificador("_IdPos"+CodeGeneratorHelper.getPos(), Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int")));
                List<Sentencia> sentencias2 = new ArrayList<>();
                sentencias2.add(asig4);
                IfElse ie = new IfElse("IFELSE", ig, sentencias1, sentencias2);
                sents.add(ie);
            }
        }
        int longitud_lista = le.size();
        String long_lista = Integer.toString(longitud_lista);

        //La lista está vacía.
        Mayor valorListaNoCero = new Mayor(">", Tipo.Bool, new ConstanteEntera(long_lista, Tipo.Int, "Factor_Int"), new ConstanteEntera("0", Tipo.Int, "Factor_Int"));
        List<Sentencia> sentencia_mensaje3 = new ArrayList<>();
        sentencia_mensaje3.add(new DisplayCadenaCaracteres("strmensaje3", mensaje3));
        IfElse tercerIf = new IfElse("IfCondicionlongList>0", valorListaNoCero, sents, sentencia_mensaje3);
        sentTercerIf.add(tercerIf);

        //La lista tiene menos elementos que el indicado
        MayorOIgual lista_menos_elementos = new MayorOIgual(">=", Tipo.Bool, new ConstanteEntera(long_lista, Tipo.Int, "Factor_Int"), new Identificador("_Pivot"+ CodeGeneratorHelper.getPivot(),Tipo.Int));
        List<Sentencia> sentencia_mensaje2 = new ArrayList<>();
        sentencia_mensaje2.add(new DisplayCadenaCaracteres("strmensaje2", mensaje2));
        IfElse segundoIf = new IfElse("IfCondicionLongLista>=valorPivot", lista_menos_elementos, sentTercerIf, sentencia_mensaje2);
        sentSegundoIf.add(segundoIf);

        //El valor debe ser >=1
        MayorOIgual valor_mayor_o_igual_a_1 = new MayorOIgual(">=", Tipo.Bool, new Identificador("_Pivot"+CodeGeneratorHelper.getPivot(),Tipo.Int), new ConstanteEntera("1", Tipo.Int, "Factor_Int"));
        List<Sentencia> sentencia_mensaje1 = new ArrayList<>();
        sentencia_mensaje1.add(new DisplayCadenaCaracteres("strmensaje1", mensaje1));
        IfElse primerIf = new IfElse("IfCondicionPivot>=1", valor_mayor_o_igual_a_1, sentSegundoIf, sentencia_mensaje1);
        cola.setIfelse(primerIf);

        RESULT=cola;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_especial",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // pivot ::= IDENTIFIER 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10: pivot --> IDENTIFIER " + "\n\t --> " + id);
        if(tablaSimbolos2.containsKey(id)){
                    if (Objects.equals(tablaSimbolos2.get(id).get(1), Tipo.Int.name())){RESULT = new Identificador(id,Tipo.Int);}
                    else {throw new Exception("Tipo " + tablaSimbolos2.get(id).get(1) + " no soportado en funcion especial Cola.");}}
                else{throw new Exception("Variable " + id  + " no declarada.");}
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("pivot",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pivot ::= INT 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10.1: pivot --> INT " + "\n\t --> " + i);
        RESULT = new ConstanteEntera(i,Tipo.Int,"_Pivot");
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("pivot",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_expresiones ::= expresion 
            {
              List<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10.2: lista_expresiones --> expresion " + "\n\t --> " + e);
        List<Expresion> lista_expresiones = new ArrayList<>();
        lista_expresiones.add(e);
        RESULT = lista_expresiones;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              List<Expresion> RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		List<Expresion> le = (List<Expresion>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10.3: lista_expresiones --> lista_expresiones COMA expresion " + "\n\t --> " + le + ", " + e);
        le.add(e);
        RESULT = le;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_expresiones ::= 
            {
              List<Expresion> RESULT =null;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
