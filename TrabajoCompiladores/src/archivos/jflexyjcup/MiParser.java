
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package archivos.jflexyjcup;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\005\005\000\002\007\003\000\002\007\004" +
    "\000\002\010\006\000\002\002\003\000\002\002\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\004\005\000\002\013\003\000\002\013\004\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\014\011\000\002\016\003\000" +
    "\002\016\003\000\002\017\011\000\002\020\013\000\002" +
    "\021\006\000\002\021\006\000\002\023\005\000\002\023" +
    "\003\000\002\015\005\000\002\034\005\000\002\034\003" +
    "\000\002\033\005\000\002\033\003\000\002\032\004\000" +
    "\002\032\003\000\002\031\005\000\002\031\003\000\002" +
    "\030\005\000\002\030\005\000\002\030\003\000\002\027" +
    "\005\000\002\027\005\000\002\027\003\000\002\026\004" +
    "\000\002\026\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\012\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\036\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\006\052\010\054\006\001\002\000\004\054" +
    "\006\001\002\000\004\002\155\001\002\000\012\011\032" +
    "\027\027\031\035\046\040\001\002\000\004\002\uffff\001" +
    "\002\000\010\042\016\043\014\044\011\001\002\000\004" +
    "\026\ufff6\001\002\000\004\026\021\001\002\000\012\042" +
    "\ufffd\043\ufffd\044\ufffd\053\ufffd\001\002\000\004\026\ufff7" +
    "\001\002\000\012\042\016\043\014\044\011\053\017\001" +
    "\002\000\004\026\ufff8\001\002\000\004\054\ufffe\001\002" +
    "\000\012\042\ufffc\043\ufffc\044\ufffc\053\ufffc\001\002\000" +
    "\004\046\023\001\002\000\006\023\025\025\024\001\002" +
    "\000\006\023\ufffa\025\ufffa\001\002\000\004\046\026\001" +
    "\002\000\012\042\ufffb\043\ufffb\044\ufffb\053\ufffb\001\002" +
    "\000\006\023\ufff9\025\ufff9\001\002\000\004\015\147\001" +
    "\002\000\020\011\ufff2\027\ufff2\031\ufff2\033\ufff2\034\ufff2" +
    "\046\ufff2\055\ufff2\001\002\000\020\011\ufff4\027\ufff4\031" +
    "\ufff4\033\ufff4\034\ufff4\046\ufff4\055\ufff4\001\002\000\004" +
    "\015\142\001\002\000\020\011\uffef\027\uffef\031\uffef\033" +
    "\uffef\034\uffef\046\uffef\055\uffef\001\002\000\020\011\uffee" +
    "\027\uffee\031\uffee\033\uffee\034\uffee\046\uffee\055\uffee\001" +
    "\002\000\004\015\126\001\002\000\020\011\ufff0\027\ufff0" +
    "\031\ufff0\033\ufff0\034\ufff0\046\ufff0\055\ufff0\001\002\000" +
    "\020\011\uffeb\027\uffeb\031\uffeb\033\uffeb\034\uffeb\046\uffeb" +
    "\055\uffeb\001\002\000\004\010\046\001\002\000\020\011" +
    "\uffec\027\uffec\031\uffec\033\uffec\034\uffec\046\uffec\055\uffec" +
    "\001\002\000\020\011\ufff1\027\ufff1\031\ufff1\033\ufff1\034" +
    "\ufff1\046\ufff1\055\ufff1\001\002\000\014\011\032\027\027" +
    "\031\035\046\040\055\044\001\002\000\004\002\ufff5\001" +
    "\002\000\020\011\ufff3\027\ufff3\031\ufff3\033\ufff3\034\ufff3" +
    "\046\ufff3\055\ufff3\001\002\000\022\005\066\015\065\040" +
    "\064\045\054\046\063\047\047\050\067\051\050\001\002" +
    "\000\044\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\016" +
    "\uffd3\022\uffd3\025\uffd3\027\uffd3\031\uffd3\033\uffd3\034\uffd3" +
    "\036\uffd3\037\uffd3\041\uffd3\046\uffd3\055\uffd3\001\002\000" +
    "\044\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\016\uffd1" +
    "\022\uffd1\025\uffd1\027\uffd1\031\uffd1\033\uffd1\034\uffd1\036" +
    "\uffd1\037\uffd1\041\uffd1\046\uffd1\055\uffd1\001\002\000\044" +
    "\004\uffd9\005\uffd9\006\104\007\105\011\uffd9\016\uffd9\022" +
    "\uffd9\025\uffd9\027\uffd9\031\uffd9\033\uffd9\034\uffd9\036\uffd9" +
    "\037\uffd9\041\uffd9\046\uffd9\055\uffd9\001\002\000\044\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\016\uffd0\022\uffd0" +
    "\025\uffd0\027\uffd0\031\uffd0\033\uffd0\034\uffd0\036\uffd0\037" +
    "\uffd0\041\uffd0\046\uffd0\055\uffd0\001\002\000\030\011\uffe0" +
    "\016\uffe0\027\uffe0\031\uffe0\033\uffe0\034\uffe0\036\uffe0\037" +
    "\uffe0\041\uffe0\046\uffe0\055\uffe0\001\002\000\004\015\112" +
    "\001\002\000\022\011\uffe4\027\uffe4\031\uffe4\033\uffe4\034" +
    "\uffe4\037\073\046\uffe4\055\uffe4\001\002\000\030\011\uffde" +
    "\016\uffde\027\uffde\031\uffde\033\uffde\034\uffde\036\uffde\037" +
    "\uffde\041\uffde\046\uffde\055\uffde\001\002\000\044\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\011\uffd6\016\uffd6\022\uffd6\025" +
    "\uffd6\027\uffd6\031\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6" +
    "\041\uffd6\046\uffd6\055\uffd6\001\002\000\030\011\uffe2\016" +
    "\uffe2\027\uffe2\031\uffe2\033\uffe2\034\uffe2\036\075\037\uffe2" +
    "\041\uffe2\046\uffe2\055\uffe2\001\002\000\034\004\102\005" +
    "\100\011\uffdc\016\uffdc\027\uffdc\031\uffdc\033\uffdc\034\uffdc" +
    "\036\uffdc\037\uffdc\041\101\046\uffdc\055\uffdc\001\002\000" +
    "\044\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\016\uffd4" +
    "\022\uffd4\025\uffd4\027\uffd4\031\uffd4\033\uffd4\034\uffd4\036" +
    "\uffd4\037\uffd4\041\uffd4\046\uffd4\055\uffd4\001\002\000\044" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\011\uffce\016\uffce\022" +
    "\uffce\025\uffce\027\uffce\031\uffce\033\uffce\034\uffce\036\uffce" +
    "\037\uffce\041\uffce\046\uffce\055\uffce\001\002\000\022\005" +
    "\066\015\065\040\064\045\054\046\063\047\047\050\067" +
    "\051\050\001\002\000\022\005\066\015\065\040\064\045" +
    "\054\046\063\047\047\050\067\051\050\001\002\000\020" +
    "\005\066\015\065\045\054\046\063\047\047\050\067\051" +
    "\050\001\002\000\044\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\011\uffd2\016\uffd2\022\uffd2\025\uffd2\027\uffd2\031\uffd2\033" +
    "\uffd2\034\uffd2\036\uffd2\037\uffd2\041\uffd2\046\uffd2\055\uffd2" +
    "\001\002\000\044\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011" +
    "\uffd5\016\uffd5\022\uffd5\025\uffd5\027\uffd5\031\uffd5\033\uffd5" +
    "\034\uffd5\036\uffd5\037\uffd5\041\uffd5\046\uffd5\055\uffd5\001" +
    "\002\000\006\016\072\037\073\001\002\000\044\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\011\uffcf\016\uffcf\022\uffcf\025" +
    "\uffcf\027\uffcf\031\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf" +
    "\041\uffcf\046\uffcf\055\uffcf\001\002\000\022\005\066\015" +
    "\065\040\064\045\054\046\063\047\047\050\067\051\050" +
    "\001\002\000\030\011\uffe3\016\uffe3\027\uffe3\031\uffe3\033" +
    "\uffe3\034\uffe3\036\075\037\uffe3\041\uffe3\046\uffe3\055\uffe3" +
    "\001\002\000\022\005\066\015\065\040\064\045\054\046" +
    "\063\047\047\050\067\051\050\001\002\000\030\011\uffe1" +
    "\016\uffe1\027\uffe1\031\uffe1\033\uffe1\034\uffe1\036\uffe1\037" +
    "\uffe1\041\uffe1\046\uffe1\055\uffe1\001\002\000\030\011\uffdf" +
    "\016\uffdf\027\uffdf\031\uffdf\033\uffdf\034\uffdf\036\uffdf\037" +
    "\uffdf\041\uffdf\046\uffdf\055\uffdf\001\002\000\020\005\066" +
    "\015\065\045\054\046\063\047\047\050\067\051\050\001" +
    "\002\000\020\005\066\015\065\045\054\046\063\047\047" +
    "\050\067\051\050\001\002\000\020\005\066\015\065\045" +
    "\054\046\063\047\047\050\067\051\050\001\002\000\044" +
    "\004\uffdb\005\uffdb\006\104\007\105\011\uffdb\016\uffdb\022" +
    "\uffdb\025\uffdb\027\uffdb\031\uffdb\033\uffdb\034\uffdb\036\uffdb" +
    "\037\uffdb\041\uffdb\046\uffdb\055\uffdb\001\002\000\020\005" +
    "\066\015\065\045\054\046\063\047\047\050\067\051\050" +
    "\001\002\000\020\005\066\015\065\045\054\046\063\047" +
    "\047\050\067\051\050\001\002\000\044\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\011\uffd7\016\uffd7\022\uffd7\025\uffd7\027" +
    "\uffd7\031\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\041\uffd7" +
    "\046\uffd7\055\uffd7\001\002\000\044\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\011\uffd8\016\uffd8\022\uffd8\025\uffd8\027\uffd8" +
    "\031\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\041\uffd8\046" +
    "\uffd8\055\uffd8\001\002\000\034\004\102\005\100\011\uffdd" +
    "\016\uffdd\027\uffdd\031\uffdd\033\uffdd\034\uffdd\036\uffdd\037" +
    "\uffdd\041\uffdd\046\uffdd\055\uffdd\001\002\000\044\004\uffda" +
    "\005\uffda\006\104\007\105\011\uffda\016\uffda\022\uffda\025" +
    "\uffda\027\uffda\031\uffda\033\uffda\034\uffda\036\uffda\037\uffda" +
    "\041\uffda\046\uffda\055\uffda\001\002\000\006\046\114\047" +
    "\115\001\002\000\004\023\116\001\002\000\004\023\uffcc" +
    "\001\002\000\004\023\uffcb\001\002\000\004\017\117\001" +
    "\002\000\020\005\066\015\065\045\054\046\063\047\047" +
    "\050\067\051\050\001\002\000\012\004\102\005\100\022" +
    "\uffca\025\uffca\001\002\000\006\022\123\025\122\001\002" +
    "\000\020\005\066\015\065\045\054\046\063\047\047\050" +
    "\067\051\050\001\002\000\004\016\124\001\002\000\044" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\016\uffcd\022" +
    "\uffcd\025\uffcd\027\uffcd\031\uffcd\033\uffcd\034\uffcd\036\uffcd" +
    "\037\uffcd\041\uffcd\046\uffcd\055\uffcd\001\002\000\012\004" +
    "\102\005\100\022\uffc9\025\uffc9\001\002\000\022\005\066" +
    "\015\065\040\064\045\054\046\063\047\047\050\067\051" +
    "\050\001\002\000\004\016\133\001\002\000\010\016\uffe5" +
    "\037\073\041\131\001\002\000\022\005\066\015\065\040" +
    "\064\045\054\046\063\047\047\050\067\051\050\001\002" +
    "\000\006\016\uffe6\037\073\001\002\000\004\032\134\001" +
    "\002\000\012\011\032\027\027\031\035\046\040\001\002" +
    "\000\016\011\032\027\027\031\035\033\136\034\137\046" +
    "\040\001\002\000\012\011\032\027\027\031\035\046\040" +
    "\001\002\000\020\011\uffea\027\uffea\031\uffea\033\uffea\034" +
    "\uffea\046\uffea\055\uffea\001\002\000\014\011\032\027\027" +
    "\031\035\034\141\046\040\001\002\000\020\011\uffe9\027" +
    "\uffe9\031\uffe9\033\uffe9\034\uffe9\046\uffe9\055\uffe9\001\002" +
    "\000\022\005\066\015\065\045\054\046\063\047\047\050" +
    "\067\051\050\056\144\001\002\000\004\016\146\001\002" +
    "\000\004\016\145\001\002\000\020\011\uffe8\027\uffe8\031" +
    "\uffe8\033\uffe8\034\uffe8\046\uffe8\055\uffe8\001\002\000\020" +
    "\011\uffe7\027\uffe7\031\uffe7\033\uffe7\034\uffe7\046\uffe7\055" +
    "\uffe7\001\002\000\022\005\066\015\065\040\064\045\054" +
    "\046\063\047\047\050\067\051\050\001\002\000\004\016" +
    "\151\001\002\000\004\030\152\001\002\000\012\011\032" +
    "\027\027\031\035\046\040\001\002\000\014\011\032\027" +
    "\027\031\035\034\154\046\040\001\002\000\020\011\uffed" +
    "\027\uffed\031\uffed\033\uffed\034\uffed\046\uffed\055\uffed\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\010\003\004\004\006\005\003\001\001\000" +
    "\004\004\155\001\001\000\002\001\001\000\024\012\030" +
    "\013\042\014\027\015\033\016\041\017\040\020\036\021" +
    "\035\022\032\001\001\000\002\001\001\000\010\007\014" +
    "\010\012\011\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\017" +
    "\011\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\044\014\027\015\033\016\041\017\040\020\036" +
    "\021\035\022\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\024\061\025\051\026\056\027\050\030\060" +
    "\031\055\032\052\033\057\034\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\024" +
    "\061\025\051\026\056\027\050\030\060\031\055\032\076" +
    "\001\001\000\024\024\061\025\051\026\056\027\050\030" +
    "\060\031\055\032\052\033\057\034\070\001\001\000\010" +
    "\024\061\025\051\026\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\024\061\025\051\026\056\027\050\030\060\031\055\032" +
    "\052\033\073\001\001\000\002\001\001\000\020\024\061" +
    "\025\051\026\056\027\050\030\060\031\055\032\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\061" +
    "\025\051\026\056\027\110\001\001\000\014\024\061\025" +
    "\051\026\056\027\050\030\107\001\001\000\012\024\061" +
    "\025\051\026\056\027\102\001\001\000\002\001\001\000" +
    "\010\024\061\025\051\026\106\001\001\000\010\024\061" +
    "\025\051\026\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\024\061\025\051\026\056" +
    "\027\050\030\117\036\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\061\025\051\026\056\027\050" +
    "\030\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\023\126\024\061\025\051\026\056" +
    "\027\050\030\060\031\055\032\052\033\057\034\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\024\061" +
    "\025\051\026\056\027\050\030\060\031\055\032\052\033" +
    "\057\034\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\012\030\013\134\014\027\015\033\016\041\017" +
    "\040\020\036\021\035\022\032\001\001\000\022\012\044" +
    "\014\027\015\033\016\041\017\040\020\036\021\035\022" +
    "\032\001\001\000\024\012\030\013\137\014\027\015\033" +
    "\016\041\017\040\020\036\021\035\022\032\001\001\000" +
    "\002\001\001\000\022\012\044\014\027\015\033\016\041" +
    "\017\040\020\036\021\035\022\032\001\001\000\002\001" +
    "\001\000\016\024\061\025\051\026\056\027\050\030\060" +
    "\031\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\023\147\024\061" +
    "\025\051\026\056\027\050\030\060\031\055\032\052\033" +
    "\057\034\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\012\030\013\152\014\027\015\033\016\041\017" +
    "\040\020\036\021\035\022\032\001\001\000\022\012\044" +
    "\014\027\015\033\016\041\017\040\020\036\021\035\022" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {
  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= sector_declaraciones programa 
            {
              String RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String sd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		  System.out.println("Regla 0: program --> sector_declaraciones programa");
    RESULT= sd + p ;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= programa 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    System.out.println("Regla 0.1: program --> " + p );
    RESULT= p;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sector_declaraciones ::= DECLARE_SECTION lista_declaraciones ENDDECLARE_SECTION 
            {
              String RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 System.out.println("Regla 1: sector_declaraciones --> DECLARE_SECTION lista_declaraciones ENDDECLARE.SECTION");
       RESULT = "DECLARE_SECTION" + ld + "ENDDECLARE_SECTION"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sector_declaraciones",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_declaraciones ::= declaracion 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    System.out.println ( "Regla 1.1: lista_declaraciones --> declaracion");
    RESULT = d; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= lista_declaraciones declaracion 
            {
              String RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    System.out.println ("Regla 1.2: lista_declaraciones --> lista_declaraciones declaracion");
    RESULT = ld + d ; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= tipo_de_dato DOSPUNTOS ids PUNTOCOMA 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        System.out.println("Regla 2: declaracion --> tipo_de_dato DOSPUNTOS ids PUNTOCOMA");
        System.out.println("Regla 2: declaraciones -->" + td + ": " + i + ";");
        RESULT = td + ":" + i + ";";
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ids ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("Regla 2.2: ids --> IDENTIFIER");
        System.out.println("Regla 2.1: ids -->" + id);
        RESULT = id; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ids ::= ids COMA IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("Regla 2.2: ids --> ids IDENTIFIER");
        System.out.println("Regla 2.1: ids --> "+ i + id );
        RESULT = i + "," + id; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_de_dato ::= TIPO_INT 
            {
              String RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("Regla 2.2.1: tipo_de_dato --> TIPO_INT");
        System.out.println("Regla 2.2.1: tipo_de_dato -->" + ti );
        RESULT = "int"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_de_dato ::= TIPO_FLOAT 
            {
              String RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("Regla 2.2.2: tipo_de_dato --> TIPO_FLOAT");
        System.out.println("Regla 2.2.2: tipo_de_dato -->" + tf );
        RESULT = "float"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_de_dato ::= TIPO_BOOL 
            {
              String RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("Regla 2.2.3: tipo_de_dato --> TIPO_BOOL");
        System.out.println("Regla 2.2.3: tipo_de_dato --> "+ tb);
        RESULT = "bool";
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // programa ::= PROGRAM_SECTION lista_sentencias ENDPROGRAM_SECTION 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            System.out.println("Regla 3: programa --> PROGRAM_SECTION lista_sentencias ENDPROGRAM_SECTION");
            System.out.println("Regla 3: programa --> program.section " + ls  + " endprogram.section");
            RESULT = "PROGRAM_SECTION" + ls + "ENDPROGRAM_SECTION";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_sentencias ::= sentencia 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Regla 3.1: lista_sentencias --> sentencia");
            System.out.println("Regla 3.1: lista_sentencias --> "  + s);
            RESULT = s; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_sentencias ::= lista_sentencias sentencia 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Regla 3.2: lista_sentencias --> lista_sentencias sentencia");
            System.out.println("Regla 3.2: lista_sentencias --> " + ls + s);
            RESULT = ls + s; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sentencia_while 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Regla 3.1.1: sentencia --> sentencia_while");
            System.out.println("Regla 3.1.1: sentencia --> " + sw);
            RESULT = sw; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia_if 
            {
              String RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Regla 3.1.2: sentencia --> sentencia_if");
            System.out.println("Regla 3.1.2: sentencia --> " + si);
            RESULT = si; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentencia_display 
            {
              String RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String sd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Regla 3.1.3: sentencia --> sentencia_display");
            System.out.println("Regla 3.1.3: sentencia --> " + sd);
            RESULT = sd; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentencia_input 
            {
              String RESULT =null;
		int sinputleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sinputright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String sinput = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Regla 3.1.4: sentencia --> sentencia_input");
            System.out.println("Regla 3.1.4: sentencia --> " + sinput);
            RESULT = sinput;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= sentencia_asignacion 
            {
              String RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String sa = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Regla 3.1.5: sentencia --> sentencia_asignacion");
            System.out.println("Regla 3.1.5: sentencia --> " + sa);
            RESULT = sa;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_while ::= WHILE PARENTESISO condicion PARENTESISC DO lista_sentencias END 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            System.out.println("Regla 4: sentencia_while --> WHILE PARENTESISO condicion PARENTESISC DO lista_sentencias END");
            System.out.println("Regla 4: sentencia_while --> while (" + c + ") do" + ls + "end" );
            RESULT = "while" + "(" + c + ")" + "do" + ls + "end";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_while",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_if ::= if_simple 
            {
              String RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String ifs = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Regla 5: sentencia_if --> if_simple");
            System.out.println("Regla 5: sentencia_if --> " + ifs );
            RESULT = ifs;
         
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_if ::= if_else 
            {
              String RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String ie = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Regla 5: sentencia_if --> if_else");
            System.out.println("Regla 5: sentencia_if --> " + ie );
            RESULT = ie;
         
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_simple ::= IF PARENTESISO condicion PARENTESISC THEN lista_sentencias END 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            System.out.println("Regla 5.1: if_simple --> IF PARENTESISO condicion PARENTESISC THEN lista_sentencias END");
            System.out.println("Regla 5.1: if_simple --> IF (" + cond + ") THEN " + ls + " END"  );
            RESULT = "if " + " ( " + cond + " ) " +  " then " + ls + " end";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if_simple",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_else ::= IF PARENTESISO condicion PARENTESISC THEN lista_sentencias ELSE lista_sentencias END 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int ls2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ls2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ls2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            System.out.println("Regla 5.2: if_else --> IF PARENTESISO condicion PARENTESISC THEN lista_sentencias ELSE lista_sentencias END");
            System.out.println("Regla 5.2: if_else --> IF (" + cond + ") THEN" + ls + "ELSE" + ls2 + "END"  );
            RESULT = "if" + "(" + cond + ")" +  "then" + ls + "else" + ls2 + "end";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if_else",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-8)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_display ::= DISPLAY PARENTESISO STRING_LITERAL PARENTESISC 
            {
              String RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            System.out.println("Regla 6: sentencia_display --> DISPLAY ( STRING_LITERAL )");
            System.out.println("Regla 6: sentencia_display --> "+ "display( " +sl+ " )");
            RESULT = "display(" + sl + ")";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_display ::= DISPLAY PARENTESISO comparacion PARENTESISC 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            System.out.println("Regla 6: sentencia_display --> DISPLAY ( comparacion )");
            System.out.println("Regla 6: sentencia_display --> "+ "display( " + c + " )");
            RESULT = "display(" + c + ")";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= exp_or OPCOMP exp_or 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("Regla 6.1: condicion --> exp_or OPCOMP exp_or");
        System.out.println("Regla 6.1: condicion -->" + e1 + op + e2 );
        RESULT = e1 + op + e2;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= exp_or 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("Regla 6.2: condicion --> exp_or");
        System.out.println("Regla 6.2: condicion -->" + e1 );
        RESULT = e1; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_asignacion ::= IDENTIFIER ASIGN exp_or 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7: sentencia_asignacion --> IDENTIFIER ASIGN FLOAT");
        System.out.println("REGLA 7: sentencia_asignacion --> "+ id + " := " + eo);
        RESULT = id + " := " + eo ;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_or ::= exp_or OR exp_and 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.1: exp_or --> exp_or OR exp_and");
        System.out.println("REGLA 7.1: exp_or --> "+e1+ " OR "+ e2 );
        RESULT = e1+" OR "+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_or",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_or ::= exp_and 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.2: exp_or --> exp_and");
        System.out.println("REGLA 7.2: exp_or --> "+e );
        RESULT = e ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_or",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_and ::= exp_and AND exp_not 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.3: exp_and --> exp_and AND exp_not");
        System.out.println("REGLA 7.3: exp_and--> "+e1+ " AND "+ e2 );
        RESULT = e1+" AND "+e2 ;

    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_and",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_and ::= exp_not 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.4: exp_and --> exp_not");
        System.out.println("REGLA 7.4: exp_or --> "+e );
        RESULT = e ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_and",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp_not ::= NOT exp_not 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.5: exp_not --> NOT exp_not");
        System.out.println("REGLA 7.5: exp_not --> "+e1 );
        RESULT = e1 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_not",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp_not ::= comparacion 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.6: exp_not --> comparacion");
        System.out.println("REGLA 7.6: exp_not --> "+c );
        RESULT = c ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_not",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparacion ::= expresion OPCOMP expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object oc = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.6.1: comparacion --> expresion OPCOMP expresion");
        System.out.println("REGLA 7.6.1: comparacion --> "+e1+" "+ oc +" "+ e2  );
        RESULT = e1+oc+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparacion ::= expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.6.2: comparacion --> expresion");
        System.out.println("REGLA 7.6.2: comparacion --> "+e1);
        RESULT = e1 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion SUMA termino 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.7: expresion --> expresion SUMA termino");
        System.out.println("REGLA 7.7: expresion --> "+e1+" + "+e2);
        RESULT = e1+" + "+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion RESTA termino 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.8: expresion --> expresion RESTA termino");
        System.out.println("REGLA 7.8: expresion --> "+e1+" - "+e2);
        RESULT = e1+" - "+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= termino 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.9: expresion --> termino");
        System.out.println("REGLA 7.9: expresion --> "+ t );
        RESULT = t ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termino ::= termino MULT menos_unario 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.9.1: termino --> termino MULT menor_unario");
        System.out.println("REGLA 7.9.1: termino --> " + t + " * " + mu );
        RESULT = t+" * "+ mu ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // termino ::= termino DIV menos_unario 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.9.2: termino --> termino DIV menor_unario");
        System.out.println("REGLA 7.9.2: termino --> " + t + " / " + mu );
        RESULT = t+" / "+ mu ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termino ::= menos_unario 
            {
              String RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 7.9.3: termino --> menor_unario");
        System.out.println("REGLA 7.9.3: termino --> " + mu );
        RESULT = mu;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // menos_unario ::= RESTA menos_unario 
            {
              String RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 8.1: menos_unario --> - menor_unario");
        System.out.println("REGLA 8.1: menos_unario --> -" + mu );
        RESULT = "-"+ mu;

    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // menos_unario ::= factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 //superFenelchat
        System.out.println("REGLA 8.2: menos_unario --> factor");
        System.out.println("REGLA 8.2: menos_unario --> " + f );
        RESULT = f;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 8.1: factor --> INT");
        System.out.println("REGLA 8.1: factor --> " + i );
        RESULT = i;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= FLOAT 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 8.2: factor --> FLOAT");
        System.out.println("REGLA 8.2: factor --> " + f );
        RESULT = f;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= BOOL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 8.3: factor --> BOOL");
        System.out.println("REGLA 8.3: factor --> " + b );
        RESULT = b;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= funcion_especial 
            {
              String RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 8.4: factor --> funcion_especial");
        System.out.println("REGLA 8.4: factor --> " + fe );
        RESULT = fe;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= PARENTESISO exp_or PARENTESISC 
            {
              String RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        System.out.println("REGLA 8.5: factor --> PARENTESISO exp_or PARENTESISC");
        System.out.println("REGLA 8.5: factor --> " + "(" + eo + ")" );
        RESULT = "(" + eo + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 8.6: factor --> IDENTIFIER");
        System.out.println("REGLA 8.6: factor --> " + id );
        RESULT = id;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funcion_especial ::= COLA PARENTESISO pivot PUNTOCOMA LLAVEO lista_expresiones LLAVEc PARENTESISC 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        System.out.println("REGLA 9: funcion_especial --> COLA PARENTESISO pivot PUNTOCOMA LLAVEO lista_expresiones LLAVEc PARENTESISC");
        System.out.println("REGLA 9: factor --> " + "cola( " + p + " ;[ " + le + "])"   );
        RESULT = "cola( "+p+";["+le+"])"  ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_especial",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // pivot ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 10: pivot --> IDENTIFIER");
        System.out.println("REGLA 10: pivot --> " + id );
        RESULT = id;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("pivot",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pivot ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 10.1: pivot --> INT");
        System.out.println("REGLA 10.1: pivot --> " + i );
        RESULT = i;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("pivot",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista_expresiones ::= expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 10.2: lista_expresiones --> expresion");
        System.out.println("REGLA 10.1: lista_expresiones --> " + e );
        RESULT = e;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",28, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              String RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("REGLA 10.3: lista_expresiones --> lista_expresiones COMA expresion");
        System.out.println("REGLA 10.3: lista_expresiones --> " +le+ ", " + e );
        RESULT = le+", " + e;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",28, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
