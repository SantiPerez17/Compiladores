
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package archivos.jflexyjcup;

import archivos.jflexyjcup.ast.Base.*;
import com.google.common.collect.ArrayListMultimap;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import com.google.common.collect.Multimap;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\005\005\000\002\006\003" +
    "\000\002\006\004\000\002\007\006\000\002\003\003\000" +
    "\002\003\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\004\005\000\002\012\003\000\002\012" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\013\011\000\002\015\003\000" +
    "\002\015\003\000\002\016\011\000\002\017\013\000\002" +
    "\020\006\000\002\020\006\000\002\014\005\000\002\022" +
    "\005\000\002\022\003\000\002\032\005\000\002\032\003" +
    "\000\002\031\004\000\002\031\003\000\002\030\005\000" +
    "\002\030\003\000\002\027\005\000\002\027\005\000\002" +
    "\027\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\025\004\000\002\025\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\005\000\002\023\003\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\024\012\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\005" +
    "\000\002\034\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\010\002\ufffe\047\010\051\007\001\002\000" +
    "\004\051\007\001\002\000\004\002\162\001\002\000\004" +
    "\002\uffff\001\002\000\012\011\032\024\027\026\035\043" +
    "\037\001\002\000\010\036\016\037\013\040\011\001\002" +
    "\000\004\023\ufff5\001\002\000\004\023\021\001\002\000" +
    "\004\023\ufff6\001\002\000\012\036\ufffc\037\ufffc\040\ufffc" +
    "\050\ufffc\001\002\000\012\036\016\037\013\040\011\050" +
    "\017\001\002\000\004\023\ufff7\001\002\000\004\051\ufffd" +
    "\001\002\000\012\036\ufffb\037\ufffb\040\ufffb\050\ufffb\001" +
    "\002\000\004\043\023\001\002\000\006\021\025\022\024" +
    "\001\002\000\006\021\ufff9\022\ufff9\001\002\000\004\043" +
    "\026\001\002\000\012\036\ufffa\037\ufffa\040\ufffa\050\ufffa" +
    "\001\002\000\006\021\ufff8\022\ufff8\001\002\000\004\015" +
    "\154\001\002\000\020\011\ufff1\024\ufff1\026\ufff1\030\ufff1" +
    "\031\ufff1\043\ufff1\052\ufff1\001\002\000\020\011\ufff3\024" +
    "\ufff3\026\ufff3\030\ufff3\031\ufff3\043\ufff3\052\ufff3\001\002" +
    "\000\004\015\147\001\002\000\020\011\uffee\024\uffee\026" +
    "\uffee\030\uffee\031\uffee\043\uffee\052\uffee\001\002\000\020" +
    "\011\uffef\024\uffef\026\uffef\030\uffef\031\uffef\043\uffef\052" +
    "\uffef\001\002\000\004\015\136\001\002\000\020\011\uffeb" +
    "\024\uffeb\026\uffeb\030\uffeb\031\uffeb\043\uffeb\052\uffeb\001" +
    "\002\000\004\010\045\001\002\000\020\011\uffec\024\uffec" +
    "\026\uffec\030\uffec\031\uffec\043\uffec\052\uffec\001\002\000" +
    "\020\011\ufff0\024\ufff0\026\ufff0\030\ufff0\031\ufff0\043\ufff0" +
    "\052\ufff0\001\002\000\014\011\032\024\027\026\035\043" +
    "\037\052\043\001\002\000\004\002\ufff4\001\002\000\020" +
    "\011\ufff2\024\ufff2\026\ufff2\030\ufff2\031\ufff2\043\ufff2\052" +
    "\ufff2\001\002\000\030\005\071\012\053\013\070\014\065" +
    "\015\061\034\051\041\047\043\052\044\046\045\056\046" +
    "\064\001\002\000\044\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\011\uffd5\016\uffd5\020\uffd5\022\uffd5\024\uffd5\026\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\043\uffd5\052\uffd5" +
    "\001\002\000\004\015\122\001\002\000\034\004\116\005" +
    "\114\011\uffde\016\uffde\024\uffde\026\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\035\115\043\uffde\052\uffde\001\002\000" +
    "\030\005\071\012\053\013\070\014\065\015\061\034\051" +
    "\041\047\043\052\044\046\045\056\046\064\001\002\000" +
    "\044\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\016\uffd0" +
    "\020\uffd0\022\uffd0\024\uffd0\026\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\035\uffd0\043\uffd0\052\uffd0\001\002\000\004" +
    "\015\111\001\002\000\026\011\uffe4\016\uffe4\024\uffe4\026" +
    "\uffe4\030\uffe4\031\uffe4\032\077\033\uffe4\043\uffe4\052\uffe4" +
    "\001\002\000\044\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011" +
    "\uffd8\016\uffd8\020\uffd8\022\uffd8\024\uffd8\026\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\035\uffd8\043\uffd8\052\uffd8\001" +
    "\002\000\044\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4" +
    "\016\uffd4\020\uffd4\022\uffd4\024\uffd4\026\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\035\uffd4\043\uffd4\052\uffd4\001\002" +
    "\000\044\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\016" +
    "\uffd6\020\uffd6\022\uffd6\024\uffd6\026\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\035\uffd6\043\uffd6\052\uffd6\001\002\000" +
    "\044\004\uffdb\005\uffdb\006\105\007\106\011\uffdb\016\uffdb" +
    "\020\uffdb\022\uffdb\024\uffdb\026\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\035\uffdb\043\uffdb\052\uffdb\001\002\000\030" +
    "\005\071\012\053\013\070\014\065\015\061\034\051\041" +
    "\047\043\052\044\046\045\056\046\064\001\002\000\026" +
    "\011\uffe2\016\uffe2\024\uffe2\026\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\043\uffe2\052\uffe2\001\002\000\026\011\uffe0" +
    "\016\uffe0\024\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\043\uffe0\052\uffe0\001\002\000\044\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\011\uffd3\016\uffd3\020\uffd3\022\uffd3\024" +
    "\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3" +
    "\043\uffd3\052\uffd3\001\002\000\004\015\101\001\002\000" +
    "\044\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\016\uffd2" +
    "\020\uffd2\022\uffd2\024\uffd2\026\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\035\uffd2\043\uffd2\052\uffd2\001\002\000\022" +
    "\011\uffe6\024\uffe6\026\uffe6\030\uffe6\031\uffe6\033\075\043" +
    "\uffe6\052\uffe6\001\002\000\004\015\073\001\002\000\026" +
    "\005\071\012\053\013\070\014\065\015\061\041\047\043" +
    "\052\044\046\045\056\046\064\001\002\000\044\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\011\uffd7\016\uffd7\020\uffd7\022" +
    "\uffd7\024\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\035\uffd7\043\uffd7\052\uffd7\001\002\000\004\016\074\001" +
    "\002\000\044\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf" +
    "\016\uffcf\020\uffcf\022\uffcf\024\uffcf\026\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\035\uffcf\043\uffcf\052\uffcf\001\002" +
    "\000\030\005\071\012\053\013\070\014\065\015\061\034" +
    "\051\041\047\043\052\044\046\045\056\046\064\001\002" +
    "\000\026\011\uffe5\016\uffe5\024\uffe5\026\uffe5\030\uffe5\031" +
    "\uffe5\032\077\033\uffe5\043\uffe5\052\uffe5\001\002\000\030" +
    "\005\071\012\053\013\070\014\065\015\061\034\051\041" +
    "\047\043\052\044\046\045\056\046\064\001\002\000\026" +
    "\011\uffe3\016\uffe3\024\uffe3\026\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\043\uffe3\052\uffe3\001\002\000\004\016\102" +
    "\001\002\000\044\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011" +
    "\uffcd\016\uffcd\020\uffcd\022\uffcd\024\uffcd\026\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\035\uffcd\043\uffcd\052\uffcd\001" +
    "\002\000\006\016\104\033\075\001\002\000\044\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\011\uffd1\016\uffd1\020\uffd1\022" +
    "\uffd1\024\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\035\uffd1\043\uffd1\052\uffd1\001\002\000\026\005\071\012" +
    "\053\013\070\014\065\015\061\041\047\043\052\044\046" +
    "\045\056\046\064\001\002\000\026\005\071\012\053\013" +
    "\070\014\065\015\061\041\047\043\052\044\046\045\056" +
    "\046\064\001\002\000\044\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\011\uffd9\016\uffd9\020\uffd9\022\uffd9\024\uffd9\026\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\043\uffd9\052" +
    "\uffd9\001\002\000\044\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\011\uffda\016\uffda\020\uffda\022\uffda\024\uffda\026\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\035\uffda\043\uffda\052\uffda" +
    "\001\002\000\004\016\112\001\002\000\044\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\011\uffce\016\uffce\020\uffce\022\uffce" +
    "\024\uffce\026\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035" +
    "\uffce\043\uffce\052\uffce\001\002\000\026\011\uffe1\016\uffe1" +
    "\024\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\043" +
    "\uffe1\052\uffe1\001\002\000\026\005\071\012\053\013\070" +
    "\014\065\015\061\041\047\043\052\044\046\045\056\046" +
    "\064\001\002\000\026\005\071\012\053\013\070\014\065" +
    "\015\061\041\047\043\052\044\046\045\056\046\064\001" +
    "\002\000\026\005\071\012\053\013\070\014\065\015\061" +
    "\041\047\043\052\044\046\045\056\046\064\001\002\000" +
    "\044\004\uffdd\005\uffdd\006\105\007\106\011\uffdd\016\uffdd" +
    "\020\uffdd\022\uffdd\024\uffdd\026\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\035\uffdd\043\uffdd\052\uffdd\001\002\000\032" +
    "\004\116\005\114\011\uffdf\016\uffdf\024\uffdf\026\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\043\uffdf\052\uffdf\001\002" +
    "\000\044\004\uffdc\005\uffdc\006\105\007\106\011\uffdc\016" +
    "\uffdc\020\uffdc\022\uffdc\024\uffdc\026\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\035\uffdc\043\uffdc\052\uffdc\001\002\000" +
    "\006\043\124\044\125\001\002\000\004\021\126\001\002" +
    "\000\004\021\uffcb\001\002\000\004\021\uffca\001\002\000" +
    "\004\017\127\001\002\000\032\005\071\012\053\013\070" +
    "\014\065\015\061\020\uffc7\022\uffc7\041\047\043\052\044" +
    "\046\045\056\046\064\001\002\000\012\004\116\005\114" +
    "\020\uffc9\022\uffc9\001\002\000\006\020\133\022\132\001" +
    "\002\000\026\005\071\012\053\013\070\014\065\015\061" +
    "\041\047\043\052\044\046\045\056\046\064\001\002\000" +
    "\004\016\134\001\002\000\044\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\011\uffcc\016\uffcc\020\uffcc\022\uffcc\024\uffcc\026" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\043\uffcc" +
    "\052\uffcc\001\002\000\012\004\116\005\114\020\uffc8\022" +
    "\uffc8\001\002\000\030\005\071\012\053\013\070\014\065" +
    "\015\061\034\051\041\047\043\052\044\046\045\056\046" +
    "\064\001\002\000\006\016\140\033\075\001\002\000\004" +
    "\027\141\001\002\000\012\011\032\024\027\026\035\043" +
    "\037\001\002\000\016\011\032\024\027\026\035\030\143" +
    "\031\144\043\037\001\002\000\012\011\032\024\027\026" +
    "\035\043\037\001\002\000\020\011\uffea\024\uffea\026\uffea" +
    "\030\uffea\031\uffea\043\uffea\052\uffea\001\002\000\014\011" +
    "\032\024\027\026\035\031\146\043\037\001\002\000\020" +
    "\011\uffe9\024\uffe9\026\uffe9\030\uffe9\031\uffe9\043\uffe9\052" +
    "\uffe9\001\002\000\032\005\071\012\053\013\070\014\065" +
    "\015\061\034\051\041\047\043\052\044\046\045\056\046" +
    "\064\053\150\001\002\000\004\016\153\001\002\000\006" +
    "\016\152\033\075\001\002\000\020\011\uffe7\024\uffe7\026" +
    "\uffe7\030\uffe7\031\uffe7\043\uffe7\052\uffe7\001\002\000\020" +
    "\011\uffe8\024\uffe8\026\uffe8\030\uffe8\031\uffe8\043\uffe8\052" +
    "\uffe8\001\002\000\030\005\071\012\053\013\070\014\065" +
    "\015\061\034\051\041\047\043\052\044\046\045\056\046" +
    "\064\001\002\000\006\016\156\033\075\001\002\000\004" +
    "\025\157\001\002\000\012\011\032\024\027\026\035\043" +
    "\037\001\002\000\014\011\032\024\027\026\035\031\161" +
    "\043\037\001\002\000\020\011\uffed\024\uffed\026\uffed\030" +
    "\uffed\031\uffed\043\uffed\052\uffed\001\002\000\004\002\001" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\010\002\004\004\005\005\003\001\001\000" +
    "\004\004\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\011\030\012\041\013\027\014\032\015\040\016" +
    "\037\017\035\020\033\001\001\000\010\006\014\007\013" +
    "\010\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\017\010\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\043\013\027\014" +
    "\032\015\040\016\037\017\035\020\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\022\066\023\056\024" +
    "\065\025\054\026\057\027\047\030\062\031\061\032\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\023\056\024\065\025\054\026\057\027\047" +
    "\030\062\031\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\022\102\023" +
    "\056\024\065\025\054\026\057\027\047\030\062\031\061" +
    "\032\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\056\024\065\025" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\023\056\024\065\025\054\026\057\027" +
    "\047\030\062\031\061\032\075\001\001\000\002\001\001" +
    "\000\020\023\056\024\065\025\054\026\057\027\047\030" +
    "\062\031\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\056\024\065\025\107\001\001\000\010\023\056" +
    "\024\065\025\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\056\024\065\025\054\026\120\001\001\000" +
    "\014\023\056\024\065\025\054\026\057\027\117\001\001" +
    "\000\012\023\056\024\065\025\054\026\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\023\056\024\065" +
    "\025\054\026\057\027\127\034\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\023\056\024\065\025\054" +
    "\026\057\027\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\022\136\023\056\024\065" +
    "\025\054\026\057\027\047\030\062\031\061\032\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\011\030" +
    "\012\141\013\027\014\032\015\040\016\037\017\035\020" +
    "\033\001\001\000\020\011\043\013\027\014\032\015\040" +
    "\016\037\017\035\020\033\001\001\000\022\011\030\012" +
    "\144\013\027\014\032\015\040\016\037\017\035\020\033" +
    "\001\001\000\002\001\001\000\020\011\043\013\027\014" +
    "\032\015\040\016\037\017\035\020\033\001\001\000\002" +
    "\001\001\000\024\022\150\023\056\024\065\025\054\026" +
    "\057\027\047\030\062\031\061\032\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\022\154\023\056\024\065\025\054\026\057" +
    "\027\047\030\062\031\061\032\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\011\030\012\157\013\027" +
    "\014\032\015\040\016\037\017\035\020\033\001\001\000" +
    "\020\011\043\013\027\014\032\015\040\016\037\017\035" +
    "\020\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
                    if (s.sym==32){
                                concat_rules("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
                                        +s.value+"' . Simbolo n° "+s.sym);
                        try {
                            throw new Exception((String) s.value);
                        } catch (Exception e) {

                        }
                    }
                            else
                            {concat_rules("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
                                    +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );}
            }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        if (s.sym == 32){
            throw  new Exception("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
                    +s.value+"' . Simbolo n° "+s.sym+ "" );
        }
        else
                                    {throw new Exception("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
                                            +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." ); }
    }

    public String reglas;

    public void concat_rules(String regla){
        reglas += regla + "\n\n";
    }

    public String simbolos;

    Multimap<String, String> tablaSimbolos2 = ArrayListMultimap.create();
    public Multimap getTabladeSimbolos(){
                return tablaSimbolos2;
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {


    Hashtable tablaSimbolo = new Hashtable();
    //Multimap<String, String> tablaSimbolos2 = ArrayListMultimap.create();
    //public Multimap getTabladeSimbolos(){
     //       return tablaSimbolos2;
   // }


    //public String simbolos;


  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= sector_declaraciones programa 
            {
              Programa RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String sd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		  concat_rules("REGLA 0: program --> sector_declaraciones programa" + "\n\t --> " + sd + " " + p + " ");
    RESULT = new Programa(tablaSimbolos2);
    //RESULT= sd + p ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= programa 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    concat_rules("REGLA 0.1: program --> programa " + "\n\t --> " + p );
    RESULT=p ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= 
            {
              Programa RESULT =null;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sector_declaraciones ::= DECLARE_SECTION lista_declaraciones ENDDECLARE_SECTION 
            {
              String RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 concat_rules("REGLA 1: sector_declaraciones --> DECLARE_SECTION lista_declaraciones ENDDECLARE_SECTION " + "\n\t --> " + "declare.section" + " " + ld + " " + "enddeclare.section" );
       RESULT = "DECLARE_SECTION" + ld + "ENDDECLARE_SECTION"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sector_declaraciones",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= declaracion 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    concat_rules ( "REGLA 1.1: lista_declaraciones --> declaracion " + "\n\t --> " + d + " ");
    RESULT = d; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= lista_declaraciones declaracion 
            {
              String RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    concat_rules ("REGLA 1.2: lista_declaraciones --> lista_declaraciones declaracion " + "\n\t --> " + " " + ld + d );
    RESULT = ld + d ; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= tipo_de_dato DOSPUNTOS ids PUNTOCOMA 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        concat_rules("REGLA 2: declaracion --> tipo_de_dato DOSPUNTOS ids PUNTOCOMA " + "\n\t --> " + td + ": " + i + "; ");
        RESULT = td + ":" + i + ";";
        if (i.contains(",")){
                    String[] parts = i.split(",");
                    for (String s : parts){
                        tablaSimbolos2.put(s,td);
                }}
                else{
                        tablaSimbolos2.put(i, td);
                    }
        simbolos = tablaSimbolos2.toString() + "\n\n";
        //RESULT = new DeclaracionVariable( id, td) ; PREGUNTAR ESO
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ids ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2: ids --> IDENTIFIER " + "\n\t --> " + id);
        RESULT = id; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ids ::= ids COMA IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2: ids --> ids IDENTIFIER " + "\n\t --> " + i + ", "+ id);
        RESULT = i + "," + id; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_de_dato ::= TIPO_INT 
            {
              String RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2.1: tipo_de_dato --> TIPO_INT " + "\n\t --> " + ti);
        //concat_rules("Regla 2.2.1: tipo_de_dato -->" + ti );
        RESULT = "int"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_de_dato ::= TIPO_FLOAT 
            {
              String RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2.2: tipo_de_dato --> TIPO_FLOAT " + "\n\t --> " + tf);
        //concat_rules("Regla 2.2.2: tipo_de_dato -->" + tf );
        RESULT = "float"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_de_dato ::= TIPO_BOOL 
            {
              String RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2.3: tipo_de_dato --> TIPO_BOOL " + "\n\t --> " + tb);
        //concat_rules("Regla 2.2.3: tipo_de_dato --> "+ tb);
        RESULT = "bool";
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // programa ::= PROGRAM_SECTION lista_sentencias ENDPROGRAM_SECTION 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 3: programa --> PROGRAM_SECTION lista_sentencias ENDPROGRAM_SECTION " + "\n\t --> " + "program.section " + ls  + " endprogram.section");
            //concat_rules("Regla 3: programa --> program.section " + ls  + " endprogram.section");
            RESULT = "PROGRAM_SECTION" + ls + "ENDPROGRAM_SECTION";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_sentencias ::= sentencia 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1: lista_sentencias --> sentencia " + "\n\t --> " + s + " ");
            //concat_rules("Regla 3.1: lista_sentencias --> "  + s);
            RESULT = s; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_sentencias ::= lista_sentencias sentencia 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.2: lista_sentencias --> lista_sentencias sentencia " + "\n\t --> " + ls + " " + s + " ");
            //concat_rules("Regla 3.2: lista_sentencias --> " + ls + s);
            RESULT = ls + s; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia_while 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.1: sentencia --> sentencia_while " + "\n\t --> " + sw + " ");
            //concat_rules("Regla 3.1.1: sentencia --> " + sw);
            RESULT = sw; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentencia_if 
            {
              String RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.2: sentencia --> sentencia_if " + "\n\t --> " + si + " ");
            //concat_rules("Regla 3.1.2: sentencia --> " + si);
            RESULT = si; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentencia_display 
            {
              String RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String sd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.3: sentencia --> sentencia_display " + "\n\t --> " + sd + " ");
            //concat_rules("Regla 3.1.3: sentencia --> " + sd);
            RESULT = sd; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= sentencia_asignacion 
            {
              String RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String sa = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.5: sentencia --> sentencia_asignacion " + "\n\t --> " + sa + " ");
            //concat_rules("Regla 3.1.5: sentencia --> " + sa);
            RESULT = sa;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_while ::= WHILE PARENTESISO exp_or PARENTESISC DO lista_sentencias END 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 4: sentencia_while --> WHILE PARENTESISO exp_or PARENTESISC DO lista_sentencias END " + "\n\t --> " + "while ( " + c + " ) do" + ls + "end" + " " );
            //concat_rules("Regla 4: sentencia_while --> while (" + c + ") do" + ls + "end" );
            RESULT = "while" + "(" + c + ")" + "do" + ls + "end";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_while",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_if ::= if_simple 
            {
              String RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String ifs = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 5: sentencia_if --> if_simple " + "\n\t --> " + ifs + " ");
            //concat_rules("Regla 5: sentencia_if --> " + ifs );
            RESULT = ifs;
         
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_if ::= if_else 
            {
              String RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String ie = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 5: sentencia_if --> if_else " + "\n\t --> " + ie + " ");
            //concat_rules("Regla 5: sentencia_if --> " + ie );
            RESULT = ie;
         
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_simple ::= IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias END 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 5.1: if_simple --> IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias END " + "\n\t --> " + " if ( " + cond + " ) then " + ls + " end ");
            //concat_rules("Regla 5.1: if_simple --> if (" + cond + ") then " + ls + " end"  );
            RESULT = "if " + " ( " + cond + " ) " +  " then " + ls + " end";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if_simple",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_else ::= IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias ELSE lista_sentencias END 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int ls2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ls2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ls2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 5.2: if_else --> IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias ELSE lista_sentencias END " + "\n\t --> " + "if ( " + cond + " ) then " + ls + " else " + ls2 + "end ");
            //concat_rules("Regla 5.2: if_else --> if (" + cond + ") then" + ls + "else" + ls2 + "end"  );
            RESULT = "if" + "(" + cond + ")" +  "then" + ls + "else" + ls2 + "end";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if_else",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-8)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_display ::= DISPLAY PARENTESISO STRING_LITERAL PARENTESISC 
            {
              String RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 6: sentencia_display --> DISPLAY ( STRING_LITERAL ) " + "\n\t --> " + " display( " +sl+ " ) ");
            //concat_rules("Regla 6: sentencia_display --> "+ "display( " +sl+ " )");
            RESULT = "display(" + sl + ")";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_display ::= DISPLAY PARENTESISO exp_or PARENTESISC 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 6: sentencia_display --> DISPLAY ( exp_or ) " + "\n\t --> " + " display( " + c + " ) ");
            //concat_rules("Regla 6: sentencia_display --> "+ "display( " + c + " )");
            RESULT = "display(" + c + ")";
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia_asignacion ::= IDENTIFIER ASIGN exp_or 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7: sentencia_asignacion --> IDENTIFIER ASIGN FLOAT " + "\n\t --> " + id + " := " + eo);
        //concat_rules("REGLA 7: sentencia_asignacion --> "+ id + " := " + eo);
        if (!tablaSimbolos2.containsKey(id)){
                    throw new Exception("Variable " + id + " no declarada.");
                    }
         else {
            RESULT=id + " := " + eo;
         }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_or ::= exp_or OR exp_and 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.1: exp_or --> exp_or OR exp_and " + "\n\t --> " + e1 + " OR "+ e2);
        //concat_rules("REGLA 7.1: exp_or --> "+e1+ " OR "+ e2 );
        RESULT = e1+" OR "+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_or",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_or ::= exp_and 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.2: exp_or --> exp_and " + "\n\t --> " + e);
        //concat_rules("REGLA 7.2: exp_or --> "+e );
        RESULT = e ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_or",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_and ::= exp_and AND exp_not 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.3: exp_and --> exp_and AND exp_not " + "\n\t --> " + e1+ " AND "+ e2);
        //concat_rules("REGLA 7.3: exp_and --> "+e1+ " AND "+ e2 );
        RESULT = e1+" AND "+e2 ;

    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_and",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_and ::= exp_not 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.4: exp_and --> exp_not " + "\n\t --> " +e);
        //concat_rules("REGLA 7.4: exp_or --> "+e );
        RESULT = e ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_and",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_not ::= NOT exp_not 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.5: exp_not --> NOT exp_not " + "\n\t --> " + e1);
        //concat_rules("REGLA 7.5: exp_not --> "+e1 );
        RESULT = e1 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_not",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_not ::= comparacion 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.6: exp_not --> comparacion " + "\n\t --> " + c);
        //concat_rules("REGLA 7.6: exp_not --> "+c );
        RESULT = c ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_not",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparacion ::= expresion OPCOMP expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object oc = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.6.1: comparacion --> expresion OPCOMP expresion " + "\n\t --> " + e1+" "+ oc +" "+ e2);
        //concat_rules("REGLA 7.6.1: comparacion --> "+e1+" "+ oc +" "+ e2  );
        RESULT = e1+oc+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparacion ::= expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.6.2: comparacion --> expresion " + "\n\t --> " + e1);
        //concat_rules("REGLA 7.6.2: comparacion --> "+e1);
        RESULT = e1 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion SUMA termino 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.7: expresion --> expresion SUMA termino " + "\n\t --> " + e1 +" + "+ e2);
        //concat_rules("REGLA 7.7: expresion --> "+e1+" + "+e2);
        //RESULT = new Suma(e1,e2);
        RESULT = e1+" + "+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion RESTA termino 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.8: expresion --> expresion RESTA termino " + "\n\t --> " + e1 + " - " + e2);
        //concat_rules("REGLA 7.8: expresion --> "+e1+" - "+e2);
        RESULT = e1+" - "+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= termino 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9: expresion --> termino " + "\n\t --> " + t);
        //concat_rules("REGLA 7.9: expresion --> "+ t );
        RESULT = t ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termino ::= termino MULT menos_unario 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9.1: termino --> termino MULT menor_unario " + "\n\t --> " + t + " * " + mu);
        //concat_rules("REGLA 7.9.1: termino --> " + t + " * " + mu );
        RESULT = t+" * "+ mu ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termino ::= termino DIV menos_unario 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9.2: termino --> termino DIV menor_unario " + "\n\t --> " + t + " / " + mu);
        //concat_rules("REGLA 7.9.2: termino --> " + t + " / " + mu );
        RESULT = t+" / "+ mu ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termino ::= menos_unario 
            {
              String RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9.3: termino --> menor_unario " + "\n\t --> " + mu);
        //concat_rules("REGLA 7.9.3: termino --> " + mu );
        RESULT = mu;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // menos_unario ::= RESTA menos_unario 
            {
              String RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.1: menos_unario --> - menor_unario " + "\n\t --> " + "- " +mu);
        //concat_rules("REGLA 8.1: menos_unario --> -" + mu );
        RESULT = "-"+ mu;

    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // menos_unario ::= factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 //superFenelchat
        concat_rules("REGLA 8.2: menos_unario --> factor " + "\n\t --> " + f);
        //concat_rules("REGLA 8.2: menos_unario --> " + f );
        RESULT = f;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.1: factor --> INT " + "\n\t --> " + i);
        //concat_rules("REGLA 8.1: factor --> " + i );
        RESULT = i;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= FLOAT 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.2: factor --> FLOAT " + "\n\t --> " + f);
        //concat_rules("REGLA 8.2: factor --> " + f );
        RESULT = f;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= BOOL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.3: factor --> BOOL " + "\n\t --> " + b);
        //concat_rules("REGLA 8.3: factor --> " + b );
        RESULT = b;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= funcion_especial 
            {
              String RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.4: factor --> funcion_especial " + "\n\t --> " + fe);
        //concat_rules("REGLA 8.4: factor --> " + fe );
        RESULT = fe;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= PARENTESISO exp_or PARENTESISC 
            {
              String RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String eo = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        concat_rules("REGLA 8.5: factor --> PARENTESISO exp_or PARENTESISC " + "\n\t --> " + " ( " + eo + " ) ");
        //concat_rules("REGLA 8.5: factor --> " + "(" + eo + ")" );
        RESULT = "(" + eo + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.6: factor --> IDENTIFIER " + "\n\t --> " + id + " ");
        //concat_rules("REGLA 8.6: factor --> " + id );
        RESULT = id;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= INPUT_BOOL PARENTESISO PARENTESISC 
            {
              String RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ib = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 8.7: factor --> INPUT_BOOL() " + "\n\t --> " + ib + "()");
        //concat_rules("REGLA 8.7: factor --> " + ib + "()" );
        RESULT = ib + "()";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= INPUT_INT PARENTESISO PARENTESISC 
            {
              String RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ii = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 8.8: factor --> INPUT_INT() " + "\n\t --> " + ii + "()");
        //concat_rules("REGLA 8.8: factor --> " + ii + "()" );
        RESULT = ii + "()";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= INPUT_FLOAT PARENTESISO PARENTESISC 
            {
              String RESULT =null;
		int iflleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iflright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ifl = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 8.9: factor --> INPUT_FLOAT() " + "\n\t --> " + ifl + "()");
        //concat_rules("REGLA 8.9: factor --> " + ifl + "()" );
        RESULT = ifl + "()";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcion_especial ::= COLA PARENTESISO pivot PUNTOCOMA CORCHETEO lista_expresiones CORCHETEC PARENTESISC 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 9: funcion_especial --> COLA PARENTESISO pivot PUNTOCOMA CORCHETEO lista_expresiones CORCHETEC PARENTESISC " + "\n\t --> " + "cola ( " + p + " ;[ " + le + "])");
        //concat_rules("REGLA 9: factor --> " + "cola( " + p + " ;[ " + le + "])"   );
        RESULT = "cola( "+p+";["+le+"])"  ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_especial",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pivot ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10: pivot --> IDENTIFIER " + "\n\t --> " + id);
        //concat_rules("REGLA 10: pivot --> " + id );
        RESULT = id;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("pivot",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // pivot ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10.1: pivot --> INT " + "\n\t --> " + i);
        //concat_rules("REGLA 10.1: pivot --> " + i );
        RESULT = i;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("pivot",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lista_expresiones ::= expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10.2: lista_expresiones --> expresion " + "\n\t --> " + e);
        //concat_rules("REGLA 10.1: lista_expresiones --> " + e );
        RESULT = e;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              String RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10.3: lista_expresiones --> lista_expresiones COMA expresion " + "\n\t --> " + le + ", " + e);
        //concat_rules("REGLA 10.3: lista_expresiones --> " +le+ ", " + e );
        RESULT = le+", " + e;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_expresiones ::= 
            {
              String RESULT =null;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
