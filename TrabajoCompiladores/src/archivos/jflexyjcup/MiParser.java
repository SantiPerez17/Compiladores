
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package archivos.jflexyjcup;

import archivos.jflexyjcup.ast.Base.Constantes.*;
import archivos.jflexyjcup.ast.Base.*;
import archivos.jflexyjcup.ast.Sentencias.Displays.*;
import archivos.jflexyjcup.ast.Sentencias.Inputs.*;
import archivos.jflexyjcup.ast.Operaciones.binarias.*;
import archivos.jflexyjcup.ast.Operaciones.binarias.arismeticos.*;
import archivos.jflexyjcup.ast.Operaciones.binarias.comparaciones.*;
import archivos.jflexyjcup.ast.Operaciones.binarias.logicas.*;
import archivos.jflexyjcup.ast.Operaciones.unarias.conversiones.*;
import archivos.jflexyjcup.ast.Operaciones.unarias.*;
import archivos.jflexyjcup.ast.Sentencias.*;
import archivos.jflexyjcup.ast.Sentencias.SentenciaInteraciones.*;
import archivos.jflexyjcup.ast.Sentencias.SentenciaSeleccion.*;
import com.google.common.collect.ArrayListMultimap;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import com.google.common.collect.Multimap;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\026\005\000\002\027\003" +
    "\000\002\027\004\000\002\030\006\000\002\025\003\000" +
    "\002\025\005\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\004\005\000\002\010\003\000\002\010" +
    "\004\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\011\011\000\002\006\003\000" +
    "\002\006\003\000\002\013\011\000\002\014\013\000\002" +
    "\007\006\000\002\007\006\000\002\012\005\000\002\015" +
    "\005\000\002\015\003\000\002\016\005\000\002\016\003" +
    "\000\002\017\004\000\002\017\003\000\002\024\005\000" +
    "\002\024\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\022\004\000\002\022\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\005\000\002\021\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\033\012\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\005" +
    "\000\002\032\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\010\002\ufffe\041\010\043\007\001\002\000" +
    "\004\043\007\001\002\000\004\002\162\001\002\000\004" +
    "\002\uffff\001\002\000\012\020\032\021\027\023\035\040" +
    "\037\001\002\000\010\035\016\036\013\037\011\001\002" +
    "\000\004\017\ufff5\001\002\000\004\017\021\001\002\000" +
    "\004\017\ufff6\001\002\000\012\035\ufffc\036\ufffc\037\ufffc" +
    "\042\ufffc\001\002\000\012\035\016\036\013\037\011\042" +
    "\017\001\002\000\004\017\ufff7\001\002\000\004\043\ufffd" +
    "\001\002\000\012\035\ufffb\036\ufffb\037\ufffb\042\ufffb\001" +
    "\002\000\004\040\023\001\002\000\006\015\025\016\024" +
    "\001\002\000\006\015\ufff9\016\ufff9\001\002\000\004\040" +
    "\026\001\002\000\012\035\ufffa\036\ufffa\037\ufffa\042\ufffa" +
    "\001\002\000\006\015\ufff8\016\ufff8\001\002\000\004\011" +
    "\154\001\002\000\020\020\ufff1\021\ufff1\023\ufff1\025\ufff1" +
    "\026\ufff1\040\ufff1\044\ufff1\001\002\000\020\020\ufff3\021" +
    "\ufff3\023\ufff3\025\ufff3\026\ufff3\040\ufff3\044\ufff3\001\002" +
    "\000\004\011\147\001\002\000\020\020\uffee\021\uffee\023" +
    "\uffee\025\uffee\026\uffee\040\uffee\044\uffee\001\002\000\020" +
    "\020\uffef\021\uffef\023\uffef\025\uffef\026\uffef\040\uffef\044" +
    "\uffef\001\002\000\004\011\136\001\002\000\020\020\uffeb" +
    "\021\uffeb\023\uffeb\025\uffeb\026\uffeb\040\uffeb\044\uffeb\001" +
    "\002\000\004\010\045\001\002\000\020\020\uffec\021\uffec" +
    "\023\uffec\025\uffec\026\uffec\040\uffec\044\uffec\001\002\000" +
    "\020\020\ufff0\021\ufff0\023\ufff0\025\ufff0\026\ufff0\040\ufff0" +
    "\044\ufff0\001\002\000\014\020\032\021\027\023\035\040" +
    "\037\044\043\001\002\000\004\002\ufff4\001\002\000\020" +
    "\020\ufff2\021\ufff2\023\ufff2\025\ufff2\026\ufff2\040\ufff2\044" +
    "\ufff2\001\002\000\030\005\071\011\061\031\051\033\047" +
    "\040\052\045\064\046\070\047\046\050\053\051\056\052" +
    "\065\001\002\000\044\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\012\uffd5\014\uffd5\016\uffd5\020\uffd5\021\uffd5\023\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\032\uffd5\040\uffd5\044\uffd5" +
    "\001\002\000\004\011\122\001\002\000\034\004\116\005" +
    "\114\012\uffde\020\uffde\021\uffde\023\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\032\115\040\uffde\044\uffde\001\002\000" +
    "\030\005\071\011\061\031\051\033\047\040\052\045\064" +
    "\046\070\047\046\050\053\051\056\052\065\001\002\000" +
    "\044\004\uffd0\005\uffd0\006\uffd0\007\uffd0\012\uffd0\014\uffd0" +
    "\016\uffd0\020\uffd0\021\uffd0\023\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\032\uffd0\040\uffd0\044\uffd0\001\002\000\004" +
    "\011\111\001\002\000\026\012\uffe4\020\uffe4\021\uffe4\023" +
    "\uffe4\025\uffe4\026\uffe4\027\077\030\uffe4\040\uffe4\044\uffe4" +
    "\001\002\000\044\004\uffd8\005\uffd8\006\uffd8\007\uffd8\012" +
    "\uffd8\014\uffd8\016\uffd8\020\uffd8\021\uffd8\023\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\032\uffd8\040\uffd8\044\uffd8\001" +
    "\002\000\044\004\uffd4\005\uffd4\006\uffd4\007\uffd4\012\uffd4" +
    "\014\uffd4\016\uffd4\020\uffd4\021\uffd4\023\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\032\uffd4\040\uffd4\044\uffd4\001\002" +
    "\000\044\004\uffd6\005\uffd6\006\uffd6\007\uffd6\012\uffd6\014" +
    "\uffd6\016\uffd6\020\uffd6\021\uffd6\023\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\032\uffd6\040\uffd6\044\uffd6\001\002\000" +
    "\044\004\uffdb\005\uffdb\006\105\007\106\012\uffdb\014\uffdb" +
    "\016\uffdb\020\uffdb\021\uffdb\023\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\032\uffdb\040\uffdb\044\uffdb\001\002\000\030" +
    "\005\071\011\061\031\051\033\047\040\052\045\064\046" +
    "\070\047\046\050\053\051\056\052\065\001\002\000\026" +
    "\012\uffe2\020\uffe2\021\uffe2\023\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\040\uffe2\044\uffe2\001\002\000\026\012\uffe0" +
    "\020\uffe0\021\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\040\uffe0\044\uffe0\001\002\000\044\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\012\uffd3\014\uffd3\016\uffd3\020\uffd3\021" +
    "\uffd3\023\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\032\uffd3" +
    "\040\uffd3\044\uffd3\001\002\000\004\011\101\001\002\000" +
    "\044\004\uffd2\005\uffd2\006\uffd2\007\uffd2\012\uffd2\014\uffd2" +
    "\016\uffd2\020\uffd2\021\uffd2\023\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\032\uffd2\040\uffd2\044\uffd2\001\002\000\022" +
    "\020\uffe6\021\uffe6\023\uffe6\025\uffe6\026\uffe6\030\075\040" +
    "\uffe6\044\uffe6\001\002\000\004\011\073\001\002\000\026" +
    "\005\071\011\061\033\047\040\052\045\064\046\070\047" +
    "\046\050\053\051\056\052\065\001\002\000\044\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\012\uffd7\014\uffd7\016\uffd7\020" +
    "\uffd7\021\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\032\uffd7\040\uffd7\044\uffd7\001\002\000\004\012\074\001" +
    "\002\000\044\004\uffcf\005\uffcf\006\uffcf\007\uffcf\012\uffcf" +
    "\014\uffcf\016\uffcf\020\uffcf\021\uffcf\023\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\032\uffcf\040\uffcf\044\uffcf\001\002" +
    "\000\030\005\071\011\061\031\051\033\047\040\052\045" +
    "\064\046\070\047\046\050\053\051\056\052\065\001\002" +
    "\000\026\012\uffe5\020\uffe5\021\uffe5\023\uffe5\025\uffe5\026" +
    "\uffe5\027\077\030\uffe5\040\uffe5\044\uffe5\001\002\000\030" +
    "\005\071\011\061\031\051\033\047\040\052\045\064\046" +
    "\070\047\046\050\053\051\056\052\065\001\002\000\026" +
    "\012\uffe3\020\uffe3\021\uffe3\023\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\040\uffe3\044\uffe3\001\002\000\004\012\102" +
    "\001\002\000\044\004\uffcd\005\uffcd\006\uffcd\007\uffcd\012" +
    "\uffcd\014\uffcd\016\uffcd\020\uffcd\021\uffcd\023\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\032\uffcd\040\uffcd\044\uffcd\001" +
    "\002\000\006\012\104\030\075\001\002\000\044\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\012\uffd1\014\uffd1\016\uffd1\020" +
    "\uffd1\021\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\032\uffd1\040\uffd1\044\uffd1\001\002\000\026\005\071\011" +
    "\061\033\047\040\052\045\064\046\070\047\046\050\053" +
    "\051\056\052\065\001\002\000\026\005\071\011\061\033" +
    "\047\040\052\045\064\046\070\047\046\050\053\051\056" +
    "\052\065\001\002\000\044\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\012\uffd9\014\uffd9\016\uffd9\020\uffd9\021\uffd9\023\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\040\uffd9\044" +
    "\uffd9\001\002\000\044\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\012\uffda\014\uffda\016\uffda\020\uffda\021\uffda\023\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\032\uffda\040\uffda\044\uffda" +
    "\001\002\000\004\012\112\001\002\000\044\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\012\uffce\014\uffce\016\uffce\020\uffce" +
    "\021\uffce\023\uffce\025\uffce\026\uffce\027\uffce\030\uffce\032" +
    "\uffce\040\uffce\044\uffce\001\002\000\026\012\uffe1\020\uffe1" +
    "\021\uffe1\023\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\040" +
    "\uffe1\044\uffe1\001\002\000\026\005\071\011\061\033\047" +
    "\040\052\045\064\046\070\047\046\050\053\051\056\052" +
    "\065\001\002\000\026\005\071\011\061\033\047\040\052" +
    "\045\064\046\070\047\046\050\053\051\056\052\065\001" +
    "\002\000\026\005\071\011\061\033\047\040\052\045\064" +
    "\046\070\047\046\050\053\051\056\052\065\001\002\000" +
    "\044\004\uffdd\005\uffdd\006\105\007\106\012\uffdd\014\uffdd" +
    "\016\uffdd\020\uffdd\021\uffdd\023\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\032\uffdd\040\uffdd\044\uffdd\001\002\000\032" +
    "\004\116\005\114\012\uffdf\020\uffdf\021\uffdf\023\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\040\uffdf\044\uffdf\001\002" +
    "\000\044\004\uffdc\005\uffdc\006\105\007\106\012\uffdc\014" +
    "\uffdc\016\uffdc\020\uffdc\021\uffdc\023\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\032\uffdc\040\uffdc\044\uffdc\001\002\000" +
    "\006\040\124\047\125\001\002\000\004\015\126\001\002" +
    "\000\004\015\uffcb\001\002\000\004\015\uffca\001\002\000" +
    "\004\013\127\001\002\000\032\005\071\011\061\014\uffc7" +
    "\016\uffc7\033\047\040\052\045\064\046\070\047\046\050" +
    "\053\051\056\052\065\001\002\000\012\004\116\005\114" +
    "\014\uffc9\016\uffc9\001\002\000\006\014\133\016\132\001" +
    "\002\000\026\005\071\011\061\033\047\040\052\045\064" +
    "\046\070\047\046\050\053\051\056\052\065\001\002\000" +
    "\004\012\134\001\002\000\044\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\012\uffcc\014\uffcc\016\uffcc\020\uffcc\021\uffcc\023" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc\040\uffcc" +
    "\044\uffcc\001\002\000\012\004\116\005\114\014\uffc8\016" +
    "\uffc8\001\002\000\030\005\071\011\061\031\051\033\047" +
    "\040\052\045\064\046\070\047\046\050\053\051\056\052" +
    "\065\001\002\000\006\012\140\030\075\001\002\000\004" +
    "\024\141\001\002\000\012\020\032\021\027\023\035\040" +
    "\037\001\002\000\016\020\032\021\027\023\035\025\143" +
    "\026\144\040\037\001\002\000\012\020\032\021\027\023" +
    "\035\040\037\001\002\000\020\020\uffea\021\uffea\023\uffea" +
    "\025\uffea\026\uffea\040\uffea\044\uffea\001\002\000\014\020" +
    "\032\021\027\023\035\026\146\040\037\001\002\000\020" +
    "\020\uffe9\021\uffe9\023\uffe9\025\uffe9\026\uffe9\040\uffe9\044" +
    "\uffe9\001\002\000\032\005\071\011\061\031\051\033\047" +
    "\040\052\045\064\046\070\047\046\050\053\051\056\052" +
    "\065\053\150\001\002\000\004\012\153\001\002\000\006" +
    "\012\152\030\075\001\002\000\020\020\uffe7\021\uffe7\023" +
    "\uffe7\025\uffe7\026\uffe7\040\uffe7\044\uffe7\001\002\000\020" +
    "\020\uffe8\021\uffe8\023\uffe8\025\uffe8\026\uffe8\040\uffe8\044" +
    "\uffe8\001\002\000\030\005\071\011\061\031\051\033\047" +
    "\040\052\045\064\046\070\047\046\050\053\051\056\052" +
    "\065\001\002\000\006\012\156\030\075\001\002\000\004" +
    "\022\157\001\002\000\012\020\032\021\027\023\035\040" +
    "\037\001\002\000\014\020\032\021\027\023\035\026\161" +
    "\040\037\001\002\000\020\020\uffed\021\uffed\023\uffed\025" +
    "\uffed\026\uffed\040\uffed\044\uffed\001\002\000\004\002\001" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\010\002\004\004\005\026\003\001\001\000" +
    "\004\004\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\030\006\040\007\033\010\041\011\027\012" +
    "\032\013\037\014\035\001\001\000\010\003\011\027\014" +
    "\030\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\011\030\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\043\006\040\007" +
    "\033\011\027\012\032\013\037\014\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\015\066\016\053\017" +
    "\061\020\047\021\056\022\054\023\057\024\062\033\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\112\020\047\021\056\022\054\023\057" +
    "\024\062\033\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\015\102\016" +
    "\053\017\061\020\047\021\056\022\054\023\057\024\062" +
    "\033\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\056\022\071\033" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\075\017\061\020\047\021\056\022" +
    "\054\023\057\024\062\033\065\001\001\000\002\001\001" +
    "\000\020\017\077\020\047\021\056\022\054\023\057\024" +
    "\062\033\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\056\022\107\033\065\001\001\000\010\021\056" +
    "\022\106\033\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\056\022\054\023\120\033\065\001\001\000" +
    "\014\020\117\021\056\022\054\023\057\033\065\001\001" +
    "\000\012\021\056\022\054\023\116\033\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\127\021\056" +
    "\022\054\023\057\032\130\033\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\134\021\056\022\054" +
    "\023\057\033\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\136\016\053\017\061" +
    "\020\047\021\056\022\054\023\057\024\062\033\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\030" +
    "\006\040\007\033\010\141\011\027\012\032\013\037\014" +
    "\035\001\001\000\020\005\043\006\040\007\033\011\027" +
    "\012\032\013\037\014\035\001\001\000\022\005\030\006" +
    "\040\007\033\010\144\011\027\012\032\013\037\014\035" +
    "\001\001\000\002\001\001\000\020\005\043\006\040\007" +
    "\033\011\027\012\032\013\037\014\035\001\001\000\002" +
    "\001\001\000\024\015\150\016\053\017\061\020\047\021" +
    "\056\022\054\023\057\024\062\033\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\015\154\016\053\017\061\020\047\021\056" +
    "\022\054\023\057\024\062\033\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\030\006\040\007\033" +
    "\010\157\011\027\012\032\013\037\014\035\001\001\000" +
    "\020\005\043\006\040\007\033\011\027\012\032\013\037" +
    "\014\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
                    if (s.sym==32){
                                concat_rules("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
                                        +s.value+"' . Simbolo n° "+s.sym);
                        try {
                            throw new Exception((String) s.value);
                        } catch (Exception e) {

                        }
                    }
                            else
                            {concat_rules("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
                                    +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );}
            }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        if (s.sym == 32){
            throw  new Exception("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
                    +s.value+"' . Simbolo n° "+s.sym+ "" );
        }
        else
                                    {throw new Exception("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
                                            +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." ); }
    }

    public String reglas;

    public void concat_rules(String regla){
        reglas += regla + "\n\n";
    }

    public String simbolos;

    Multimap<String, String> tablaSimbolos2 = ArrayListMultimap.create();
    public Multimap getTabladeSimbolos(){
                return tablaSimbolos2;
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {


    Hashtable tablaSimbolo = new Hashtable();
    //Multimap<String, String> tablaSimbolos2 = ArrayListMultimap.create();
    //public Multimap getTabladeSimbolos(){
     //       return tablaSimbolos2;
   // }


    //public String simbolos;


  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= sector_declaraciones programa 
            {
              Programa RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String sd = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		  concat_rules("REGLA 0: program --> sector_declaraciones programa" + "\n\t --> " + sd + " " + p + " ");
    RESULT = new Programa(tablaSimbolos2);
    //RESULT= sd + p ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= programa 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    concat_rules("REGLA 0.1: program --> programa " + "\n\t --> " + p );
    RESULT = p;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= 
            {
              Programa RESULT =null;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sector_declaraciones ::= DECLARE_SECTION lista_declaraciones ENDDECLARE_SECTION 
            {
              String RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 concat_rules("REGLA 1: sector_declaraciones --> DECLARE_SECTION lista_declaraciones ENDDECLARE_SECTION " + "\n\t --> " + "declare.section" + " " + ld + " " + "enddeclare.section" );
       RESULT = "DECLARE_SECTION" + ld + "ENDDECLARE_SECTION"; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sector_declaraciones",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= declaracion 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    concat_rules ( "REGLA 1.1: lista_declaraciones --> declaracion " + "\n\t --> " + d + " ");
    RESULT = d; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= lista_declaraciones declaracion 
            {
              String RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ld = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    concat_rules ("REGLA 1.2: lista_declaraciones --> lista_declaraciones declaracion " + "\n\t --> " + " " + ld + d );
    RESULT = ld + d ; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= tipo_de_dato DOSPUNTOS ids PUNTOCOMA 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Tipo td = (Tipo)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        concat_rules("REGLA 2: declaracion --> tipo_de_dato DOSPUNTOS ids PUNTOCOMA " + "\n\t --> " + td + ": " + i + "; ");
        RESULT = td + ":" + i + ";";
        if (i.contains(",")){
                    String[] parts = i.split(",");
                    for (String s : parts){
                        tablaSimbolos2.put(s,td.name());
                }}
                else{
                        tablaSimbolos2.put(i, td.name());
                    }
        simbolos = tablaSimbolos2.toString() + "\n\n";
        //RESULT = new DeclaracionVariable( id, td) ; PREGUNTAR ESO
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaracion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ids ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2: ids --> IDENTIFIER " + "\n\t --> " + id);
        RESULT = id; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ids ::= ids COMA IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2: ids --> ids IDENTIFIER " + "\n\t --> " + i + ", "+ id);
        RESULT = i + "," + id; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_de_dato ::= TIPO_INT 
            {
              Tipo RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2.1: tipo_de_dato --> TIPO_INT " + "\n\t --> " + ti);
        //concat_rules("Regla 2.2.1: tipo_de_dato -->" + ti );
        RESULT = Tipo.Int; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_de_dato ::= TIPO_FLOAT 
            {
              Tipo RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2.2: tipo_de_dato --> TIPO_FLOAT " + "\n\t --> " + tf);
        //concat_rules("Regla 2.2.2: tipo_de_dato -->" + tf );
        RESULT = Tipo.Float; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_de_dato ::= TIPO_BOOL 
            {
              Tipo RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 2.2.3: tipo_de_dato --> TIPO_BOOL " + "\n\t --> " + tb);
        //concat_rules("Regla 2.2.3: tipo_de_dato --> "+ tb);
        RESULT = Tipo.Bool;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // programa ::= PROGRAM_SECTION lista_sentencias ENDPROGRAM_SECTION 
            {
              Programa RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Sentencia> ls = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 3: programa --> PROGRAM_SECTION lista_sentencias ENDPROGRAM_SECTION " + "\n\t --> " + "program.section " + ls  + " endprogram.section");
            //concat_rules("Regla 3: programa --> program.section " + ls  + " endprogram.section");
            //RESULT = "PROGRAM_SECTION" + ls + "ENDPROGRAM_SECTION";
            RESULT = new Programa(ls);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_sentencias ::= sentencia 
            {
              List<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1: lista_sentencias --> sentencia " + "\n\t --> " + s + " ");
            //concat_rules("Regla 3.1: lista_sentencias --> "  + s);
            List<Sentencia> lista_sentencias = new ArrayList<>();
            lista_sentencias.add(s);
            RESULT = lista_sentencias;  
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_sentencias ::= lista_sentencias sentencia 
            {
              List<Sentencia> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Sentencia> ls = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.2: lista_sentencias --> lista_sentencias sentencia " + "\n\t --> " + ls + " " + s + " ");
            //concat_rules("Regla 3.2: lista_sentencias --> " + ls + s);
            ls.add(s);
            RESULT = ls; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia_while 
            {
              Sentencia RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		While sw = (While)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.1: sentencia --> sentencia_while " + "\n\t --> " + sw + " ");
            //concat_rules("Regla 3.1.1: sentencia --> " + sw);
            RESULT = sw; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentencia_if 
            {
              Sentencia RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia si = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.2: sentencia --> sentencia_if " + "\n\t --> " + si + " ");
            //concat_rules("Regla 3.1.2: sentencia --> " + si);
            RESULT = si; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentencia_display 
            {
              Sentencia RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Sentencia sd = (Sentencia)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.3: sentencia --> sentencia_display " + "\n\t --> " + sd + " ");
            //concat_rules("Regla 3.1.3: sentencia --> " + sd);
            RESULT = sd; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= sentencia_asignacion 
            {
              Sentencia RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Asignacion sa = (Asignacion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 3.1.5: sentencia --> sentencia_asignacion " + "\n\t --> " + sa + " ");
            //concat_rules("Regla 3.1.5: sentencia --> " + sa);
            RESULT = sa;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_while ::= WHILE PARENTESISO exp_or PARENTESISC DO lista_sentencias END 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		OR c = (OR)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Sentencia> ls = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 4: sentencia_while --> WHILE PARENTESISO exp_or PARENTESISC DO lista_sentencias END " + "\n\t --> " + "while ( " + c + " ) do" + ls + "end" + " " );
            //concat_rules("Regla 4: sentencia_while --> while (" + c + ") do" + ls + "end" );
            //RESULT = "while" + "(" + c + ")" + "do" + ls + "end";
            RESULT = new While("While",c,ls);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_while",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_if ::= if_simple 
            {
              Sentencia RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		IfSimple ifs = (IfSimple)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 5: sentencia_if --> if_simple " + "\n\t --> " + ifs + " ");
            //concat_rules("Regla 5: sentencia_if --> " + ifs );
            RESULT = ifs;
         
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_if ::= if_else 
            {
              Sentencia RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		IfElse ie = (IfElse)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            concat_rules("REGLA 5: sentencia_if --> if_else " + "\n\t --> " + ie + " ");
            //concat_rules("Regla 5: sentencia_if --> " + ie );
            RESULT = ie;
         
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_if",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_simple ::= IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias END 
            {
              IfSimple RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		OR cond = (OR)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Sentencia> ls = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 5.1: if_simple --> IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias END " + "\n\t --> " + " if ( " + cond + " ) then " + ls + " end ");
            //concat_rules("Regla 5.1: if_simple --> if (" + cond + ") then " + ls + " end"  );
            //RESULT = "if " + " ( " + cond + " ) " +  " then " + ls + " end";
            RESULT = new IfSimple("IfSimple", cond, ls);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if_simple",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_else ::= IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias ELSE lista_sentencias END 
            {
              IfElse RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).right;
		OR cond = (OR)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		List<Sentencia> ls = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int ls2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ls2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		List<Sentencia> ls2 = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 5.2: if_else --> IF PARENTESISO exp_or PARENTESISC THEN lista_sentencias ELSE lista_sentencias END " + "\n\t --> " + "if ( " + cond + " ) then " + ls + " else " + ls2 + "end ");
            //concat_rules("Regla 5.2: if_else --> if (" + cond + ") then" + ls + "else" + ls2 + "end"  );
            //RESULT = "if" + "(" + cond + ")" +  "then" + ls + "else" + ls2 + "end";
            RESULT = new IfElse("IfElse", cond, ls, ls2);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if_else",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-8)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_display ::= DISPLAY PARENTESISO STRING_LITERAL PARENTESISC 
            {
              Sentencia RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		ConstanteString sl = (ConstanteString)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 6: sentencia_display --> DISPLAY ( STRING_LITERAL ) " + "\n\t --> " + " display( " +sl+ " ) ");
            //concat_rules("Regla 6: sentencia_display --> "+ "display( " +sl+ " )");
            //RESULT = "display(" + sl + ")";
            RESULT = new DisplayCadenaCaracteres((String) sl.getValor());
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_display ::= DISPLAY PARENTESISO exp_or PARENTESISC 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		OR c = (OR)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            concat_rules("REGLA 6: sentencia_display --> DISPLAY ( exp_or ) " + "\n\t --> " + " display( " + c + " ) ");
            //concat_rules("Regla 6: sentencia_display --> "+ "display( " + c + " )");
            //RESULT = "display(" + c + ")";
            RESULT = new DisplayExpresion(c);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_display",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia_asignacion ::= IDENTIFIER ASIGN exp_or 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		OR eo = (OR)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7: sentencia_asignacion --> IDENTIFIER ASIGN FLOAT " + "\n\t --> " + id + " := " + eo);
        //concat_rules("REGLA 7: sentencia_asignacion --> "+ id + " := " + eo);
        if (!tablaSimbolos2.containsKey(id)){
                    throw new Exception("Variable " + id + " no declarada.");
                    }
         else {
            //checkTipos(id,eo); hacer esa funcion arriba.
            RESULT = new Asignacion(new Identificador(id),eo);
            //RESULT=id + " := " + eo;
         }
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_or ::= exp_or OR exp_and 
            {
              OR RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		OR e1 = (OR)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		AND e2 = (AND)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.1: exp_or --> exp_or OR exp_and " + "\n\t --> " + e1 + " OR "+ e2);
        //concat_rules("REGLA 7.1: exp_or --> "+e1+ " OR "+ e2 );
        RESULT = new OR(e1,e2,Tipo.Bool);
        //RESULT = e1+" OR "+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_or",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_or ::= exp_and 
            {
              OR RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		AND e = (AND)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.2: exp_or --> exp_and " + "\n\t --> " + e);
        //concat_rules("REGLA 7.2: exp_or --> "+e );
        RESULT = e ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_or",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_and ::= exp_and AND exp_not 
            {
              AND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		AND e1 = (AND)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		NOT e2 = (NOT)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.3: exp_and --> exp_and AND exp_not " + "\n\t --> " + e1+ " AND "+ e2);
        //concat_rules("REGLA 7.3: exp_and --> "+e1+ " AND "+ e2 );
        //RESULT = e1+" AND "+e2 ;
        RESULT = new AND(e1,e2);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_and",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_and ::= exp_not 
            {
              AND RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		NOT e = (NOT)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.4: exp_and --> exp_not " + "\n\t --> " +e);
        //concat_rules("REGLA 7.4: exp_or --> "+e );
        RESULT = e ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_and",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_not ::= NOT exp_not 
            {
              NOT RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		NOT e1 = (NOT)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.5: exp_not --> NOT exp_not " + "\n\t --> " + e1);
        //concat_rules("REGLA 7.5: exp_not --> "+e1 );
        //RESULT = e1 ;
        RESULT = new NOT(e1);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_not",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_not ::= comparacion 
            {
              NOT RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.6: exp_not --> comparacion " + "\n\t --> " + c);
        //concat_rules("REGLA 7.6: exp_not --> "+c );
        RESULT = c ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp_not",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparacion ::= expresion OPCOMP expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object oc = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.6.1: comparacion --> expresion OPCOMP expresion " + "\n\t --> " + e1+" "+ oc +" "+ e2);
        //concat_rules("REGLA 7.6.1: comparacion --> "+e1+" "+ oc +" "+ e2  );
        RESULT = e1+oc+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparacion ::= expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.6.2: comparacion --> expresion " + "\n\t --> " + e1);
        //concat_rules("REGLA 7.6.2: comparacion --> "+e1);
        RESULT = e1 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion SUMA termino 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.7: expresion --> expresion SUMA termino " + "\n\t --> " + e1 +" + "+ e2);
        //concat_rules("REGLA 7.7: expresion --> "+e1+" + "+e2);
        //RESULT = new Suma(e1,e2);
        RESULT = e1+" + "+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion RESTA termino 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.8: expresion --> expresion RESTA termino " + "\n\t --> " + e1 + " - " + e2);
        //concat_rules("REGLA 7.8: expresion --> "+e1+" - "+e2);
        RESULT = e1+" - "+e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= termino 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9: expresion --> termino " + "\n\t --> " + t);
        //concat_rules("REGLA 7.9: expresion --> "+ t );
        RESULT = t ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termino ::= termino MULT menos_unario 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9.1: termino --> termino MULT menor_unario " + "\n\t --> " + t + " * " + mu);
        //concat_rules("REGLA 7.9.1: termino --> " + t + " * " + mu );
        RESULT = t+" * "+ mu ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termino ::= termino DIV menos_unario 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9.2: termino --> termino DIV menor_unario " + "\n\t --> " + t + " / " + mu);
        //concat_rules("REGLA 7.9.2: termino --> " + t + " / " + mu );
        RESULT = t+" / "+ mu ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termino ::= menos_unario 
            {
              Expresion RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 7.9.3: termino --> menor_unario " + "\n\t --> " + mu);
        //concat_rules("REGLA 7.9.3: termino --> " + mu );
        RESULT = mu;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // menos_unario ::= RESTA menos_unario 
            {
              Expresion RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion mu = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.1: menos_unario --> - menor_unario " + "\n\t --> " + "- " +mu);
        //concat_rules("REGLA 8.1: menos_unario --> -" + mu );
        RESULT = "-"+ mu;

    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // menos_unario ::= factor 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 //superFenelchat
        concat_rules("REGLA 8.2: menos_unario --> factor " + "\n\t --> " + f);
        //concat_rules("REGLA 8.2: menos_unario --> " + f );
        RESULT = f;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("menos_unario",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= INT 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		ConstanteEntera i = (ConstanteEntera)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.1: factor --> INT " + "\n\t --> " + i);
        //concat_rules("REGLA 8.1: factor --> " + i );
        RESULT = i;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= FLOAT 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		ConstanteFloat f = (ConstanteFloat)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.2: factor --> FLOAT " + "\n\t --> " + f);
        //concat_rules("REGLA 8.2: factor --> " + f );
        RESULT = f;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= BOOL 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		ConstanteBool b = (ConstanteBool)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.3: factor --> BOOL " + "\n\t --> " + b);
        //concat_rules("REGLA 8.3: factor --> " + b );
        RESULT = b;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= funcion_especial 
            {
              Expresion RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.4: factor --> funcion_especial " + "\n\t --> " + fe);
        //concat_rules("REGLA 8.4: factor --> " + fe );
        RESULT = fe;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= PARENTESISO exp_or PARENTESISC 
            {
              Expresion RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		OR eo = (OR)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        concat_rules("REGLA 8.5: factor --> PARENTESISO exp_or PARENTESISC " + "\n\t --> " + " ( " + eo + " ) ");
        //concat_rules("REGLA 8.5: factor --> " + "(" + eo + ")" );
        RESULT = "(" + eo + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= IDENTIFIER 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 8.6: factor --> IDENTIFIER " + "\n\t --> " + id + " ");
        //concat_rules("REGLA 8.6: factor --> " + id );
        RESULT = id;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= INPUT_BOOL PARENTESISO PARENTESISC 
            {
              Expresion RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Input_Bool ib = (Input_Bool)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 8.7: factor --> INPUT_BOOL() " + "\n\t --> " + ib + "()");
        //concat_rules("REGLA 8.7: factor --> " + ib + "()" );
        RESULT = ib + "()";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= INPUT_INT PARENTESISO PARENTESISC 
            {
              Expresion RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Input_Int ii = (Input_Int)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 8.8: factor --> INPUT_INT() " + "\n\t --> " + ii + "()");
        //concat_rules("REGLA 8.8: factor --> " + ii + "()" );
        RESULT = ii + "()";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= INPUT_FLOAT PARENTESISO PARENTESISC 
            {
              Expresion RESULT =null;
		int iflleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iflright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Input_Float ifl = (Input_Float)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 8.9: factor --> INPUT_FLOAT() " + "\n\t --> " + ifl + "()");
        //concat_rules("REGLA 8.9: factor --> " + ifl + "()" );
        RESULT = ifl + "()";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcion_especial ::= COLA PARENTESISO pivot PUNTOCOMA CORCHETEO lista_expresiones CORCHETEC PARENTESISC 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        concat_rules("REGLA 9: funcion_especial --> COLA PARENTESISO pivot PUNTOCOMA CORCHETEO lista_expresiones CORCHETEC PARENTESISC " + "\n\t --> " + "cola ( " + p + " ;[ " + le + "])");
        //concat_rules("REGLA 9: factor --> " + "cola( " + p + " ;[ " + le + "])"   );
        RESULT = "cola( "+p+";["+le+"])"  ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("funcion_especial",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pivot ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10: pivot --> IDENTIFIER " + "\n\t --> " + id);
        //concat_rules("REGLA 10: pivot --> " + id );
        RESULT = id;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("pivot",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // pivot ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		ConstanteEntera i = (ConstanteEntera)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10.1: pivot --> INT " + "\n\t --> " + i);
        //concat_rules("REGLA 10.1: pivot --> " + i );
        RESULT = String.valueOf(i);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("pivot",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lista_expresiones ::= expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10.2: lista_expresiones --> expresion " + "\n\t --> " + e);
        //concat_rules("REGLA 10.1: lista_expresiones --> " + e );
        RESULT = String.valueOf(e);
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              String RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String le = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        concat_rules("REGLA 10.3: lista_expresiones --> lista_expresiones COMA expresion " + "\n\t --> " + le + ", " + e);
        //concat_rules("REGLA 10.3: lista_expresiones --> " +le+ ", " + e );
        RESULT = le+", " + e;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_expresiones ::= 
            {
              String RESULT =null;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
