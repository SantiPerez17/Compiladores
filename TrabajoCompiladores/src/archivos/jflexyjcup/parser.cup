package archivos.jflexyjcup;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;

class MiParser;



action code {:
    Hashtable table = new Hashtable();
:};

parser code
{:
    public void syntax_error(Symbol s){
        concat_rules("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        concat_rules("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public String reglas;

    public void concat_rules(String regla){
        reglas += regla + "\n";
    }



:};
//action code para hacer tabla de simbolos

terminal SUMA,RESTA,MULT,DIV, ASIGN, DISPLAY, INPUT_INT, INPUT_BOOL, INPUT_FLOAT, PARENTESISO, PARENTESISC, CORCHETEO, CORCHETEC, PUNTOCOMA,
COMA, DOSPUNTOS, WHILE, DO, IF, THEN, ELSE, END, AND, OR, NOT, OPCOMP, TIPO_INT, TIPO_FLOAT, TIPO_BOOL,COLA;
terminal String IDENTIFIER, INT,FLOAT,BOOL, DECLARE_SECTION, ENDDECLARE_SECTION, PROGRAM_SECTION, ENDPROGRAM_SECTION,STRING_LITERAL;

nonterminal String ids, program, programa, sector_declaraciones,lista_declaraciones, declaracion, tipo_de_dato,
sentencia, lista_sentencias,sentencia_while,sentencia_asignacion, sentencia_if,if_simple, if_else,sentencia_display, sentencia_input, condicion,
factor, funcion_especial, menos_unario, termino, expresion, comparacion, exp_not,exp_and,exp_or, pivot,lista_expresiones;

precedence left OPCOMP, sentencia;

start with program;

program ::= sector_declaraciones:sd programa:p //programa
    {:  concat_rules("Regla 0: program --> sector_declaraciones programa");
    RESULT= sd + p ;:}
    |
    programa:p {:
    concat_rules("Regla 0.1: program --> " + p );
    RESULT= p;
    :};
sector_declaraciones ::= DECLARE_SECTION lista_declaraciones:ld ENDDECLARE_SECTION
    {: concat_rules("Regla 1: sector_declaraciones --> DECLARE_SECTION lista_declaraciones ENDDECLARE.SECTION");
       RESULT = "DECLARE_SECTION" + ld + "ENDDECLARE_SECTION"; :};

lista_declaraciones ::= declaracion:d {:
    concat_rules ( "Regla 1.1: lista_declaraciones --> declaracion");
    RESULT = d; :}
    |
    lista_declaraciones:ld declaracion:d {:
    concat_rules ("Regla 1.2: lista_declaraciones --> lista_declaraciones declaracion");
    RESULT = ld + d ; :};

declaracion ::=
    tipo_de_dato:td DOSPUNTOS ids:i PUNTOCOMA {:
        concat_rules("Regla 2: declaracion --> tipo_de_dato DOSPUNTOS ids PUNTOCOMA");
        concat_rules("Regla 2: declaraciones -->" + td + ": " + i + ";");
        RESULT = td + ":" + i + ";";:};

ids ::=
    IDENTIFIER:id {:
        concat_rules("Regla 2.2: ids --> IDENTIFIER");
        concat_rules("Regla 2.1: ids -->" + id);
        RESULT = id; :}
    |
    ids:i COMA IDENTIFIER:id {:
        concat_rules("Regla 2.2: ids --> ids IDENTIFIER");
        concat_rules("Regla 2.1: ids --> "+ i + id );
        RESULT = i + "," + id; :};

tipo_de_dato ::=
    TIPO_INT:ti {:
        concat_rules("Regla 2.2.1: tipo_de_dato --> TIPO_INT");
        concat_rules("Regla 2.2.1: tipo_de_dato -->" + ti );
        RESULT = "int"; :}
    |
    TIPO_FLOAT:tf {:
        concat_rules("Regla 2.2.2: tipo_de_dato --> TIPO_FLOAT");
        concat_rules("Regla 2.2.2: tipo_de_dato -->" + tf );
        RESULT = "float"; :}
    |
    TIPO_BOOL:tb {:
        concat_rules("Regla 2.2.3: tipo_de_dato --> TIPO_BOOL");
        concat_rules("Regla 2.2.3: tipo_de_dato --> "+ tb);
        RESULT = "bool";:};

programa ::=
        PROGRAM_SECTION lista_sentencias:ls ENDPROGRAM_SECTION {:
            concat_rules("Regla 3: programa --> PROGRAM_SECTION lista_sentencias ENDPROGRAM_SECTION");
            concat_rules("Regla 3: programa --> program.section " + ls  + " endprogram.section");
            RESULT = "PROGRAM_SECTION" + ls + "ENDPROGRAM_SECTION";
        :};
lista_sentencias ::=
        sentencia:s {:
            concat_rules("Regla 3.1: lista_sentencias --> sentencia");
            concat_rules("Regla 3.1: lista_sentencias --> "  + s);
            RESULT = s; :}
        |
        lista_sentencias:ls sentencia:s {:
            concat_rules("Regla 3.2: lista_sentencias --> lista_sentencias sentencia");
            concat_rules("Regla 3.2: lista_sentencias --> " + ls + s);
            RESULT = ls + s; :};

sentencia ::=
        sentencia_while:sw {:
            concat_rules("Regla 3.1.1: sentencia --> sentencia_while");
            concat_rules("Regla 3.1.1: sentencia --> " + sw);
            RESULT = sw; :}
        |
        sentencia_if:si {:
            concat_rules("Regla 3.1.2: sentencia --> sentencia_if");
            concat_rules("Regla 3.1.2: sentencia --> " + si);
            RESULT = si; :}
        |
        sentencia_display:sd {:
            concat_rules("Regla 3.1.3: sentencia --> sentencia_display");
            concat_rules("Regla 3.1.3: sentencia --> " + sd);
            RESULT = sd; :}
        |
         sentencia_input:sinput {:
            concat_rules("Regla 3.1.4: sentencia --> sentencia_input");
            concat_rules("Regla 3.1.4: sentencia --> " + sinput);
            RESULT = sinput;
        :}
        |
        sentencia_asignacion:sa{:
            concat_rules("Regla 3.1.5: sentencia --> sentencia_asignacion");
            concat_rules("Regla 3.1.5: sentencia --> " + sa);
            RESULT = sa;
        :};

sentencia_while ::=
        WHILE PARENTESISO condicion:c PARENTESISC DO lista_sentencias:ls END {:
            concat_rules("Regla 4: sentencia_while --> WHILE PARENTESISO condicion PARENTESISC DO lista_sentencias END");
            concat_rules("Regla 4: sentencia_while --> while (" + c + ") do" + ls + "end" );
            RESULT = "while" + "(" + c + ")" + "do" + ls + "end";
        :};

sentencia_if ::=
        if_simple:ifs {:
            concat_rules("Regla 5: sentencia_if --> if_simple");
            concat_rules("Regla 5: sentencia_if --> " + ifs );
            RESULT = ifs;
         :}
        |
        if_else:ie {:
            concat_rules("Regla 5: sentencia_if --> if_else");
            concat_rules("Regla 5: sentencia_if --> " + ie );
            RESULT = ie;
         :};
if_simple ::=
        IF PARENTESISO condicion:cond PARENTESISC THEN lista_sentencias:ls END {:
            concat_rules("Regla 5.1: if_simple --> IF PARENTESISO condicion PARENTESISC THEN lista_sentencias END");
            concat_rules("Regla 5.1: if_simple --> IF (" + cond + ") THEN " + ls + " END"  );
            RESULT = "if " + " ( " + cond + " ) " +  " then " + ls + " end";
        :};
if_else ::=
        IF PARENTESISO condicion:cond PARENTESISC THEN lista_sentencias:ls ELSE lista_sentencias:ls2 END {:
            concat_rules("Regla 5.2: if_else --> IF PARENTESISO condicion PARENTESISC THEN lista_sentencias ELSE lista_sentencias END");
            concat_rules("Regla 5.2: if_else --> IF (" + cond + ") THEN" + ls + "ELSE" + ls2 + "END"  );
            RESULT = "if" + "(" + cond + ")" +  "then" + ls + "else" + ls2 + "end";
        :};

sentencia_display ::=
        DISPLAY PARENTESISO STRING_LITERAL:sl PARENTESISC {:
            concat_rules("Regla 6: sentencia_display --> DISPLAY ( STRING_LITERAL )");
            concat_rules("Regla 6: sentencia_display --> "+ "display( " +sl+ " )");
            RESULT = "display(" + sl + ")";
        :}
        |
        DISPLAY PARENTESISO comparacion:c PARENTESISC {:
            concat_rules("Regla 6: sentencia_display --> DISPLAY ( comparacion )");
            concat_rules("Regla 6: sentencia_display --> "+ "display( " + c + " )");
            RESULT = "display(" + c + ")";
        :}
        ;
condicion ::=
    exp_or:e1 OPCOMP:op exp_or:e2 {:
        concat_rules("Regla 6.1: condicion --> exp_or OPCOMP exp_or");
        concat_rules("Regla 6.1: condicion -->" + e1 + op + e2 );
        RESULT = e1 + op + e2;
    :}
    |
    exp_or:e1 {:
        concat_rules("Regla 6.2: condicion --> exp_or");
        concat_rules("Regla 6.2: condicion -->" + e1 );
        RESULT = e1; :}
    ;


sentencia_asignacion ::=
    IDENTIFIER:id  ASIGN exp_or:eo {:
        concat_rules("REGLA 7: sentencia_asignacion --> IDENTIFIER ASIGN FLOAT");
        concat_rules("REGLA 7: sentencia_asignacion --> "+ id + " := " + eo);
        RESULT = id + " := " + eo ;
        :};

exp_or ::=
    exp_or:e1 OR exp_and:e2 {:
        concat_rules("REGLA 7.1: exp_or --> exp_or OR exp_and");
        concat_rules("REGLA 7.1: exp_or --> "+e1+ " OR "+ e2 );
        RESULT = e1+" OR "+e2 ;
    :}
    |
    exp_and:e {:
        concat_rules("REGLA 7.2: exp_or --> exp_and");
        concat_rules("REGLA 7.2: exp_or --> "+e );
        RESULT = e ;
    :};

exp_and ::=
    exp_and:e1 AND exp_not:e2 {:
        concat_rules("REGLA 7.3: exp_and --> exp_and AND exp_not");
        concat_rules("REGLA 7.3: exp_and--> "+e1+ " AND "+ e2 );
        RESULT = e1+" AND "+e2 ;

    :}
    |
    exp_not:e {:
        concat_rules("REGLA 7.4: exp_and --> exp_not");
        concat_rules("REGLA 7.4: exp_or --> "+e );
        RESULT = e ;
    :};

exp_not ::=
    NOT exp_not:e1 {:
        concat_rules("REGLA 7.5: exp_not --> NOT exp_not");
        concat_rules("REGLA 7.5: exp_not --> "+e1 );
        RESULT = e1 ;
    :}
    |
    comparacion:c {:
        concat_rules("REGLA 7.6: exp_not --> comparacion");
        concat_rules("REGLA 7.6: exp_not --> "+c );
        RESULT = c ;
    :};

comparacion ::=
    expresion:e1 OPCOMP:oc expresion:e2 {:
        concat_rules("REGLA 7.6.1: comparacion --> expresion OPCOMP expresion");
        concat_rules("REGLA 7.6.1: comparacion --> "+e1+" "+ oc +" "+ e2  );
        RESULT = e1+oc+e2 ;
    :}
    |
    expresion:e1 {:
        concat_rules("REGLA 7.6.2: comparacion --> expresion");
        concat_rules("REGLA 7.6.2: comparacion --> "+e1);
        RESULT = e1 ;
    :};
expresion ::=
    expresion:e1 SUMA termino:e2 {:
        concat_rules("REGLA 7.7: expresion --> expresion SUMA termino");
        concat_rules("REGLA 7.7: expresion --> "+e1+" + "+e2);
        RESULT = e1+" + "+e2 ;
    :}
    |
    expresion:e1 RESTA termino:e2 {:
        concat_rules("REGLA 7.8: expresion --> expresion RESTA termino");
        concat_rules("REGLA 7.8: expresion --> "+e1+" - "+e2);
        RESULT = e1+" - "+e2 ;
    :}
    |
    termino:t {:
        concat_rules("REGLA 7.9: expresion --> termino");
        concat_rules("REGLA 7.9: expresion --> "+ t );
        RESULT = t ;
    :};

termino ::=
    termino:t MULT menos_unario:mu {:
        concat_rules("REGLA 7.9.1: termino --> termino MULT menor_unario");
        concat_rules("REGLA 7.9.1: termino --> " + t + " * " + mu );
        RESULT = t+" * "+ mu ;
    :}
    |
    termino:t DIV menos_unario:mu {:
        concat_rules("REGLA 7.9.2: termino --> termino DIV menor_unario");
        concat_rules("REGLA 7.9.2: termino --> " + t + " / " + mu );
        RESULT = t+" / "+ mu ;
    :}
    |
    menos_unario:mu {:
        concat_rules("REGLA 7.9.3: termino --> menor_unario");
        concat_rules("REGLA 7.9.3: termino --> " + mu );
        RESULT = mu;
    :};

menos_unario ::=
    RESTA menos_unario:mu {:
        concat_rules("REGLA 8.1: menos_unario --> - menor_unario");
        concat_rules("REGLA 8.1: menos_unario --> -" + mu );
        RESULT = "-"+ mu;

    :}
    |
    factor:f {: //superFenelchat
        concat_rules("REGLA 8.2: menos_unario --> factor");
        concat_rules("REGLA 8.2: menos_unario --> " + f );
        RESULT = f;
    :};

factor ::=
    INT:i {:
        concat_rules("REGLA 8.1: factor --> INT");
        concat_rules("REGLA 8.1: factor --> " + i );
        RESULT = i;
    :}
    |
    FLOAT:f {:
        concat_rules("REGLA 8.2: factor --> FLOAT");
        concat_rules("REGLA 8.2: factor --> " + f );
        RESULT = f;
    :}
    |
    BOOL:b {:
        concat_rules("REGLA 8.3: factor --> BOOL");
        concat_rules("REGLA 8.3: factor --> " + b );
        RESULT = b;
    :}
    |
    funcion_especial:fe {:
        concat_rules("REGLA 8.4: factor --> funcion_especial");
        concat_rules("REGLA 8.4: factor --> " + fe );
        RESULT = fe;
    :}
    |
    PARENTESISO exp_or:eo PARENTESISC {:
        concat_rules("REGLA 8.5: factor --> PARENTESISO exp_or PARENTESISC");
        concat_rules("REGLA 8.5: factor --> " + "(" + eo + ")" );
        RESULT = "(" + eo + ")";
    :}
    |
    IDENTIFIER:id {:
        concat_rules("REGLA 8.6: factor --> IDENTIFIER");
        concat_rules("REGLA 8.6: factor --> " + id );
        RESULT = id;
    :}
    |
    INPUT_BOOL:ib PARENTESISO PARENTESISC {:
        concat_rules("REGLA 8.7: factor --> INPUT_BOOL()");
        concat_rules("REGLA 8.7: factor --> " + ib + "()" );
        RESULT = ib + "()";
    :}
    |
    INPUT_INT:ii PARENTESISO PARENTESISC {:
        concat_rules("REGLA 8.8: factor --> INPUT_INT()");
        concat_rules("REGLA 8.8: factor --> " + ii + "()" );
        RESULT = ii + "()";
    :}
    |
    INPUT_FLOAT:ifl PARENTESISO PARENTESISC {:
        concat_rules("REGLA 8.9: factor --> INPUT_FLOAT()");
        concat_rules("REGLA 8.9: factor --> " + ifl + "()" );
        RESULT = ifl + "()";
    :}    ;

funcion_especial ::=
    COLA PARENTESISO pivot:p PUNTOCOMA CORCHETEO lista_expresiones:le CORCHETEC PARENTESISC
    {:
        concat_rules("REGLA 9: funcion_especial --> COLA PARENTESISO pivot PUNTOCOMA CORCHETEO lista_expresiones CORCHETEC PARENTESISC");
        concat_rules("REGLA 9: factor --> " + "cola( " + p + " ;[ " + le + "])"   );
        RESULT = "cola( "+p+";["+le+"])"  ;
    :};

pivot ::=
    IDENTIFIER:id {:
        concat_rules("REGLA 10: pivot --> IDENTIFIER");
        concat_rules("REGLA 10: pivot --> " + id );
        RESULT = id;
    :}
    |
    INT:i {:
        concat_rules("REGLA 10.1: pivot --> INT");
        concat_rules("REGLA 10.1: pivot --> " + i );
        RESULT = i;
    :};

lista_expresiones ::=
    expresion:e {:
        concat_rules("REGLA 10.2: lista_expresiones --> expresion");
        concat_rules("REGLA 10.1: lista_expresiones --> " + e );
        RESULT = e;
    :}
    |
    lista_expresiones:le COMA expresion:e{:
        concat_rules("REGLA 10.3: lista_expresiones --> lista_expresiones COMA expresion");
        concat_rules("REGLA 10.3: lista_expresiones --> " +le+ ", " + e );
        RESULT = le+", " + e;
    :};